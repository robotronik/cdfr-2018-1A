ARM GAS  /tmp/ccqd1Kqm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_hal_rcc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_RCC_DeInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_RCC_DeInit:
  27              	.LFB112:
  28              		.file 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c"
   1:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
   2:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
   3:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @file    stm32f4xx_hal_rcc.c
   4:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @author  MCD Application Team
   5:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @version V1.1.0
   6:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @date    19-June-2014
   7:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *       
  13:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @verbatim                
  14:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  15:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  17:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  18:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  19:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  20:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  21:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  22:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  23:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  24:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  25:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  26:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  27:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
  28:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]          
  29:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       Once the device started from reset, the user application has to:        
  30:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
ARM GAS  /tmp/ccqd1Kqm.s 			page 2


  31:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  32:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  38:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @endverbatim
  39:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  40:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @attention
  41:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  42:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  43:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  44:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  45:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  46:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  47:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  48:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  49:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  50:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  51:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  52:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  53:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      without specific prior written permission.
  54:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  55:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  56:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  57:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  58:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  59:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  60:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  61:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  62:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  63:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  64:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  65:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  66:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  67:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */ 
  68:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  69:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  70:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #include "stm32f4xx_hal.h"
  71:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  72:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup STM32F4xx_HAL_Driver
  73:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  74:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  75:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  76:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC 
  77:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief RCC HAL module driver
  78:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  79:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  80:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  81:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  82:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  83:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  84:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  85:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define HSE_TIMEOUT_VALUE          HSE_STARTUP_TIMEOUT
  86:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define HSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  87:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define LSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
ARM GAS  /tmp/ccqd1Kqm.s 			page 3


  88:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define PLL_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  89:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  ((uint32_t)5000) /* 5 s    */
  90:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  91:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
  92:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __GPIOA_CLK_ENABLE()
  93:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
  94:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8 
  95:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  96:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __GPIOC_CLK_ENABLE()
  97:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
  98:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
  99:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 100:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 101:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** const uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 102:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 103:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 104:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private functions ---------------------------------------------------------*/
 105:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 106:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Private_Functions
 107:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 108:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 109:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 110:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Group1 Initialization and de-initialization functions 
 111:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions 
 112:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 113:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim    
 114:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 115:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 116:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 117:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 118:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 119:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1 
 120:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        and APB2).
 121:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 122:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 123:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 124:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the PLL as System clock source.
 125:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 126:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 127:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source.
 128:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 129:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 130:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 131:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 132:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 133:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 134:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 135:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 136:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 137:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 138:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 139:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 140:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 141:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source), the System clockis automatically switched to HSI and an interrupt
 142:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M4 NMI 
 143:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.   
 144:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
ARM GAS  /tmp/ccqd1Kqm.s 			page 4


 145:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 146:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PA8 pin.
 147:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 148:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 149:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PC9 pin.
 150:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 151:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration  
 152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 153:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              HSE and PLL.
 154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable 
 155:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped 
 156:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock 
 158:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use 
 159:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.  
 160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 161:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 162:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 163:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin. 
 164:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           (+@) SAI: the SAI clock can be derived either from a specific PLL (PLLI2S) or (PLLSAI) or
 166:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin. 
 167:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock. 
 168:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 169:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 divided by 2 to 31. You have to use __HAL_RCC_RTC_CONFIG() and __HAL_RCC_RTC_ENABLE
 170:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 macros to configure this clock. 
 171:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 172:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 to work correctly, while the SDIO require a frequency equal or lower than
 173:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 to 48. This clock is derived of the main PLL through PLLQ divider.
 174:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) IWDG clock which is always the LSI clock.
 175:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        
 176:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F405xx/07xx and STM32F415xx/17xx devices, the maximum
 177:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              frequency of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. 
 178:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 179:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 180:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 181:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F42xxx and STM32F43xxx devices, the maximum frequency
 182:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              of the SYSCLK and HCLK is 180 MHz, PCLK2 90 MHz and PCLK1 45 MHz. 
 183:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 184:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 185:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 186:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F401xx, the maximum frequency of the SYSCLK and HCLK is 84 MHz,
 187:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              PCLK2 84 MHz and PCLK1 42 MHz. 
 188:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 189:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 190:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 191:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 192:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 193:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 194:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 195:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 196:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 197:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 198:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 199:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 200:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 201:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - All interrupts disabled
ARM GAS  /tmp/ccqd1Kqm.s 			page 5


 202:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 203:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - Peripheral clocks  
 204:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks 
 205:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 206:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 207:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 208:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 209:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
  29              		.loc 1 209 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 210:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set HSION bit */
 211:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
  34              		.loc 1 211 0
  35 0000 104B     		ldr	r3, .L2
  36 0002 1A68     		ldr	r2, [r3]
  37 0004 42F08102 		orr	r2, r2, #129
  38 0008 1A60     		str	r2, [r3]
 212:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 213:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset CFGR register */
 214:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  39              		.loc 1 214 0
  40 000a 0021     		movs	r1, #0
  41 000c 9960     		str	r1, [r3, #8]
 215:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 216:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S */
 217:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
  42              		.loc 1 217 0
  43 000e 1A68     		ldr	r2, [r3]
  44 0010 22F0A162 		bic	r2, r2, #84410368
  45 0014 22F48032 		bic	r2, r2, #65536
  46 0018 1A60     		str	r2, [r3]
 218:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 219:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset PLLCFGR register */
 220:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLCFGR);
  47              		.loc 1 220 0
  48 001a 5960     		str	r1, [r3, #4]
 221:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_
  49              		.loc 1 221 0
  50 001c 5868     		ldr	r0, [r3, #4]
  51 001e 0A4A     		ldr	r2, .L2+4
  52 0020 0243     		orrs	r2, r2, r0
  53 0022 5A60     		str	r2, [r3, #4]
 222:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 223:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset PLLI2SCFGR register */
 224:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLI2SCFGR);
  54              		.loc 1 224 0
  55 0024 C3F88410 		str	r1, [r3, #132]
 225:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PL
  56              		.loc 1 225 0
  57 0028 D3F88420 		ldr	r2, [r3, #132]
  58 002c 42F00052 		orr	r2, r2, #536870912
  59 0030 42F44052 		orr	r2, r2, #12288
  60 0034 C3F88420 		str	r2, [r3, #132]
 226:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
ARM GAS  /tmp/ccqd1Kqm.s 			page 6


 227:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 228:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
  61              		.loc 1 228 0
  62 0038 1A68     		ldr	r2, [r3]
  63 003a 22F48022 		bic	r2, r2, #262144
  64 003e 1A60     		str	r2, [r3]
 229:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 230:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Disable all interrupts */
 231:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR); 
  65              		.loc 1 231 0
  66 0040 D960     		str	r1, [r3, #12]
  67 0042 7047     		bx	lr
  68              	.L3:
  69              		.align	2
  70              	.L2:
  71 0044 00380240 		.word	1073887232
  72 0048 10300004 		.word	67121168
  73              		.cfi_endproc
  74              	.LFE112:
  76              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  77              		.align	2
  78              		.global	HAL_RCC_OscConfig
  79              		.thumb
  80              		.thumb_func
  82              	HAL_RCC_OscConfig:
  83              	.LFB113:
 232:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 233:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 234:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 235:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 236:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 237:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 238:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 239:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 240:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HAL status
 241:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 242:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 243:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
  84              		.loc 1 243 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
  89 0000 38B5     		push	{r3, r4, r5, lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 3, -16
  93              		.cfi_offset 4, -12
  94              		.cfi_offset 5, -8
  95              		.cfi_offset 14, -4
  96 0002 0446     		mov	r4, r0
  97              	.LVL1:
 244:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart = 0;  
 245:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 246:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 247:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 248:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
ARM GAS  /tmp/ccqd1Kqm.s 			page 7


 249:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  98              		.loc 1 249 0
  99 0004 0368     		ldr	r3, [r0]
 100 0006 13F0010F 		tst	r3, #1
 101 000a 57D0     		beq	.L5
 250:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 251:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 252:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 253:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 254:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 102              		.loc 1 254 0
 103 000c A94B     		ldr	r3, .L67
 104 000e 9B68     		ldr	r3, [r3, #8]
 105 0010 03F00C03 		and	r3, r3, #12
 106 0014 042B     		cmp	r3, #4
 107 0016 0AD0     		beq	.L6
 108              		.loc 1 254 0 is_stmt 0 discriminator 1
 109 0018 A64B     		ldr	r3, .L67
 110 001a 9B68     		ldr	r3, [r3, #8]
 111 001c 03F00C03 		and	r3, r3, #12
 112 0020 082B     		cmp	r3, #8
 113 0022 0ED1     		bne	.L7
 114              		.loc 1 254 0 discriminator 2
 115 0024 A34B     		ldr	r3, .L67
 116 0026 5B68     		ldr	r3, [r3, #4]
 117 0028 13F4800F 		tst	r3, #4194304
 118 002c 09D0     		beq	.L7
 119              	.L6:
 255:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 256:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_
 120              		.loc 1 256 0 is_stmt 1
 121 002e A14B     		ldr	r3, .L67
 122 0030 1B68     		ldr	r3, [r3]
 123 0032 13F4003F 		tst	r3, #131072
 124 0036 41D0     		beq	.L5
 125              		.loc 1 256 0 is_stmt 0 discriminator 1
 126 0038 6368     		ldr	r3, [r4, #4]
 127 003a 012B     		cmp	r3, #1
 128 003c 40F0A281 		bne	.L48
 129 0040 3CE0     		b	.L5
 130              	.L7:
 257:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 258:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 259:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 260:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 261:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 262:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 263:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
 264:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 131              		.loc 1 264 0 is_stmt 1
 132 0042 0022     		movs	r2, #0
 133 0044 9C4B     		ldr	r3, .L67+4
 134 0046 1A70     		strb	r2, [r3]
 265:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 266:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 267:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 135              		.loc 1 267 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 8


 136 0048 FFF7FEFF 		bl	HAL_GetTick
 137              	.LVL2:
 138 004c 0546     		mov	r5, r0
 139              	.LVL3:
 268:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 269:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till HSE is disabled */  
 270:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 140              		.loc 1 270 0
 141 004e 07E0     		b	.L9
 142              	.LVL4:
 143              	.L10:
 271:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 272:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 144              		.loc 1 272 0
 145 0050 FFF7FEFF 		bl	HAL_GetTick
 146              	.LVL5:
 147 0054 401B     		subs	r0, r0, r5
 148 0056 41F28833 		movw	r3, #5000
 149 005a 9842     		cmp	r0, r3
 150 005c 00F29481 		bhi	.L49
 151              	.L9:
 270:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 152              		.loc 1 270 0
 153 0060 944B     		ldr	r3, .L67
 154 0062 1B68     		ldr	r3, [r3]
 155 0064 13F4003F 		tst	r3, #131072
 156 0068 F2D1     		bne	.L10
 273:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 274:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 275:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 276:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 277:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 278:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 279:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 157              		.loc 1 279 0
 158 006a 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 159 006c 924B     		ldr	r3, .L67+4
 160 006e 1A70     		strb	r2, [r3]
 280:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 281:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSE State */
 282:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSEState) == RCC_HSE_ON)
 161              		.loc 1 282 0
 162 0070 6368     		ldr	r3, [r4, #4]
 163 0072 012B     		cmp	r3, #1
 164 0074 11D1     		bne	.L11
 283:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 284:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 285:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 165              		.loc 1 285 0
 166 0076 FFF7FEFF 		bl	HAL_GetTick
 167              	.LVL6:
 168 007a 0546     		mov	r5, r0
 169              	.LVL7:
 286:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 287:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is ready */  
 288:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 170              		.loc 1 288 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 9


 171 007c 07E0     		b	.L12
 172              	.LVL8:
 173              	.L13:
 289:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 290:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 174              		.loc 1 290 0
 175 007e FFF7FEFF 		bl	HAL_GetTick
 176              	.LVL9:
 177 0082 401B     		subs	r0, r0, r5
 178 0084 41F28833 		movw	r3, #5000
 179 0088 9842     		cmp	r0, r3
 180 008a 00F27F81 		bhi	.L50
 181              	.L12:
 288:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 182              		.loc 1 288 0
 183 008e 894B     		ldr	r3, .L67
 184 0090 1B68     		ldr	r3, [r3]
 185 0092 13F4003F 		tst	r3, #131072
 186 0096 F2D0     		beq	.L13
 187 0098 10E0     		b	.L5
 188              	.L11:
 291:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 292:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 293:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 294:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 295:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 296:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 297:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 298:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 299:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 189              		.loc 1 299 0
 190 009a FFF7FEFF 		bl	HAL_GetTick
 191              	.LVL10:
 192 009e 0546     		mov	r5, r0
 193              	.LVL11:
 300:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 301:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 302:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 194              		.loc 1 302 0
 195 00a0 07E0     		b	.L14
 196              	.LVL12:
 197              	.L15:
 303:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 304:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 198              		.loc 1 304 0
 199 00a2 FFF7FEFF 		bl	HAL_GetTick
 200              	.LVL13:
 201 00a6 401B     		subs	r0, r0, r5
 202 00a8 41F28833 		movw	r3, #5000
 203 00ac 9842     		cmp	r0, r3
 204 00ae 00F26F81 		bhi	.L51
 205              	.L14:
 302:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 206              		.loc 1 302 0
 207 00b2 804B     		ldr	r3, .L67
 208 00b4 1B68     		ldr	r3, [r3]
 209 00b6 13F4003F 		tst	r3, #131072
ARM GAS  /tmp/ccqd1Kqm.s 			page 10


 210 00ba F2D1     		bne	.L15
 211              	.LVL14:
 212              	.L5:
 305:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 306:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 307:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 308:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 309:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 310:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 311:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 312:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 313:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 213              		.loc 1 313 0
 214 00bc 2368     		ldr	r3, [r4]
 215 00be 13F0020F 		tst	r3, #2
 216 00c2 5DD0     		beq	.L16
 314:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 315:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 316:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 317:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 318:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 319:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 320:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 217              		.loc 1 320 0
 218 00c4 7B4B     		ldr	r3, .L67
 219 00c6 9B68     		ldr	r3, [r3, #8]
 220 00c8 13F00C0F 		tst	r3, #12
 221 00cc 0AD0     		beq	.L17
 222              		.loc 1 320 0 is_stmt 0 discriminator 1
 223 00ce 794B     		ldr	r3, .L67
 224 00d0 9B68     		ldr	r3, [r3, #8]
 225 00d2 03F00C03 		and	r3, r3, #12
 226 00d6 082B     		cmp	r3, #8
 227 00d8 1CD1     		bne	.L18
 228              		.loc 1 320 0 discriminator 2
 229 00da 764B     		ldr	r3, .L67
 230 00dc 5B68     		ldr	r3, [r3, #4]
 231 00de 13F4800F 		tst	r3, #4194304
 232 00e2 17D1     		bne	.L18
 233              	.L17:
 321:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 322:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 323:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 234              		.loc 1 323 0 is_stmt 1
 235 00e4 734B     		ldr	r3, .L67
 236 00e6 1B68     		ldr	r3, [r3]
 237 00e8 13F0020F 		tst	r3, #2
 238 00ec 03D0     		beq	.L19
 239              		.loc 1 323 0 is_stmt 0 discriminator 1
 240 00ee E368     		ldr	r3, [r4, #12]
 241 00f0 012B     		cmp	r3, #1
 242 00f2 40F04F81 		bne	.L52
 243              	.L19:
 324:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 325:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 326:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 327:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
ARM GAS  /tmp/ccqd1Kqm.s 			page 11


 328:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 329:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 330:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 331:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 244              		.loc 1 331 0 is_stmt 1
 245 00f6 6F48     		ldr	r0, .L67
 246 00f8 0268     		ldr	r2, [r0]
 247 00fa 22F0F801 		bic	r1, r2, #248
 248 00fe 2269     		ldr	r2, [r4, #16]
 249              	.LVL15:
 250              	.LBB66:
 251              	.LBB67:
 252              		.file 2 "../Drivers/CMSIS/Include/core_cmInstr.h"
   1:../Drivers/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @version  V3.20
   5:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @date     05. March 2013
   6:../Drivers/CMSIS/Include/core_cmInstr.h ****  *
   7:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @note
   8:../Drivers/CMSIS/Include/core_cmInstr.h ****  *
   9:../Drivers/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:../Drivers/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  12:../Drivers/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:../Drivers/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:../Drivers/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:../Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:../Drivers/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../Drivers/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:../Drivers/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:../Drivers/CMSIS/Include/core_cmInstr.h ****    *
  24:../Drivers/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../Drivers/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../Drivers/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../Drivers/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../Drivers/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../Drivers/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../Drivers/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../Drivers/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../Drivers/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../Drivers/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../Drivers/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../Drivers/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  37:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  38:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  41:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  42:../Drivers/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:../Drivers/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
ARM GAS  /tmp/ccqd1Kqm.s 			page 12


  45:../Drivers/CMSIS/Include/core_cmInstr.h ****   @{
  46:../Drivers/CMSIS/Include/core_cmInstr.h **** */
  47:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  48:../Drivers/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../Drivers/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  51:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:../Drivers/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
  54:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  55:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  56:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  58:../Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  60:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  62:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  63:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  65:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:../Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  68:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  70:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  71:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  73:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:../Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  76:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  78:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  79:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  81:../Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  83:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  85:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  86:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  88:../Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:../Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:../Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  92:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  94:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  95:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  97:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:../Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 100:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccqd1Kqm.s 			page 13


 102:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 103:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 105:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:../Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 108:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 110:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 111:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 113:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 115:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 117:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 118:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 119:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 120:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 121:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 123:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 125:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 128:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 131:../Drivers/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 132:../Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 133:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 134:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 135:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 136:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 138:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 140:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 142:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 143:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 146:../Drivers/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 147:../Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 148:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 149:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 150:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 151:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 152:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 154:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 156:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
ARM GAS  /tmp/ccqd1Kqm.s 			page 14


 159:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 160:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 161:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 162:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 163:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 164:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 165:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:../Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 168:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:../Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 171:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 173:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 174:../Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 176:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 178:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 180:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 182:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 183:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 184:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 185:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 186:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 188:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 190:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 193:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 195:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 196:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 198:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 200:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 203:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 205:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 206:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 208:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 210:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 213:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 215:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccqd1Kqm.s 			page 15


 216:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 218:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 220:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 221:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 223:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 224:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 225:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 227:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 228:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 230:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 232:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 233:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 235:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 236:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 237:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 239:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 240:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 242:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 244:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 245:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 247:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 248:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 249:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 251:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 252:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 254:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 256:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 257:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 258:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 259:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 260:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 261:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 262:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 263:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 264:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 267:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 268:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 269:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 270:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 271:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccqd1Kqm.s 			page 16


 273:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 274:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 275:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 278:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 279:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 280:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 281:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 282:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 283:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 284:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 286:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 288:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 289:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 290:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 291:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 293:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 294:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 295:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:../Drivers/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 298:../Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 299:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 300:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 301:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:../Drivers/CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 303:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 304:../Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 306:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 307:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:../Drivers/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 309:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 310:../Drivers/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:../Drivers/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:../Drivers/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:../Drivers/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 317:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 320:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 321:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 322:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 323:../Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 325:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 327:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 328:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 329:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccqd1Kqm.s 			page 17


 330:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 331:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 333:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:../Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 335:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 336:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 338:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 339:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 340:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 341:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 342:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 343:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 344:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:../Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 347:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 349:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 350:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 351:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 352:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 353:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 354:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 355:../Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 357:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 359:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 360:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 361:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 362:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 363:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 365:../Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:../Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:../Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 368:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 369:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 371:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 372:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 373:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 374:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 375:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 377:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:../Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 380:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 382:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 383:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 384:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 385:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 386:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
ARM GAS  /tmp/ccqd1Kqm.s 			page 18


 387:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 388:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 389:../Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 390:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 391:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 392:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 393:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 394:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 395:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 396:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 397:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 398:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 399:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 400:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 401:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 402:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 403:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 404:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
 405:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 406:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 407:../Drivers/CMSIS/Include/core_cmInstr.h ****   return __builtin_bswap32(value);
 408:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 409:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 410:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 411:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 412:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 413:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 414:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 415:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 416:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 417:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 418:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 419:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 420:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 421:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 422:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 423:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 424:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 425:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 426:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 427:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 428:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 429:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 430:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 431:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 432:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 433:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 434:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 435:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 436:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 437:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 438:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 439:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 440:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t __REVSH(int32_t value)
 441:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 442:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 443:../Drivers/CMSIS/Include/core_cmInstr.h ****   return (short)__builtin_bswap16(value);
ARM GAS  /tmp/ccqd1Kqm.s 			page 19


 444:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 445:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 446:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 447:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 448:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 449:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 450:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 451:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 452:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 453:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 454:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 455:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 456:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 457:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 458:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 459:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 460:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 461:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 462:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 463:../Drivers/CMSIS/Include/core_cmInstr.h ****   return (op1 >> op2) | (op1 << (32 - op2)); 
 464:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 465:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 466:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 467:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 468:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 469:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 470:../Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 471:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 472:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 473:../Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 474:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 475:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 476:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 477:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 478:../Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 479:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 480:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 481:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 482:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 483:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 484:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 485:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 486:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 487:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 488:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 489:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 490:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 253              		.loc 2 491 0
 254 0100 F823     		movs	r3, #248
 255              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 256 0102 93FAA3F3 		rbit r3, r3
 257              	@ 0 "" 2
 258              	.LVL16:
 259              		.thumb
 260              	.LBE67:
 261              	.LBE66:
ARM GAS  /tmp/ccqd1Kqm.s 			page 20


 262              	.LBB68:
 263              	.LBB69:
 492:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 493:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 494:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 495:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 496:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 497:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 498:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 499:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 500:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 501:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 502:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 503:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)
 504:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 505:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 506:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 507:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 508:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 509:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 510:../Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 511:../Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 512:../Drivers/CMSIS/Include/core_cmInstr.h ****     */
 513:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 514:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 515:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 516:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 517:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 518:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 519:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 520:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 521:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 522:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 523:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 524:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 525:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 526:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)
 527:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 528:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 529:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 530:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 531:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 532:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 533:../Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 534:../Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 535:../Drivers/CMSIS/Include/core_cmInstr.h ****     */
 536:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 537:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 538:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 539:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 540:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 541:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 542:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 543:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 544:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 545:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 546:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
ARM GAS  /tmp/ccqd1Kqm.s 			page 21


 547:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 548:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 549:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
 550:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 551:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 552:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 553:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 554:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 555:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 556:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 557:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 558:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 559:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 560:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 561:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 562:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 563:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 564:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 565:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 566:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 567:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_
 568:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 569:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 570:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 571:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 572:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 573:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 574:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 575:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 576:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 577:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 578:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 579:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 580:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 581:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 582:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 583:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 584:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 585:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint1
 586:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 587:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 588:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 589:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 590:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 591:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 592:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 593:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 594:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 595:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 596:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 597:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 598:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 599:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 600:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 601:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 602:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 603:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint3
ARM GAS  /tmp/ccqd1Kqm.s 			page 22


 604:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 605:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 606:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 607:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 608:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 609:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 610:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 611:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 612:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 613:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 614:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 615:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 616:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 617:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __CLREX(void)
 618:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 619:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clrex" ::: "memory");
 620:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 621:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 622:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 623:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 624:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 625:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 626:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 627:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 628:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 629:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 630:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 631:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT(ARG1,ARG2) \
 632:../Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 633:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 634:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 635:../Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 636:../Drivers/CMSIS/Include/core_cmInstr.h ****  })
 637:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 638:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 639:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 640:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 641:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 642:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 643:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 644:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 645:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 646:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 647:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT(ARG1,ARG2) \
 648:../Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 649:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 650:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 651:../Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 652:../Drivers/CMSIS/Include/core_cmInstr.h ****  })
 653:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 654:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 655:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 656:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 657:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 658:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 659:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 660:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
ARM GAS  /tmp/ccqd1Kqm.s 			page 23


 661:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 662:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
 663:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 664:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 665:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 264              		.loc 2 666 0
 265              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 266 0106 B3FA83F3 		clz r3, r3
 267              	@ 0 "" 2
 268              	.LVL17:
 667:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 269              		.loc 2 667 0
 270              		.thumb
 271 010a DBB2     		uxtb	r3, r3
 272              	.LVL18:
 273              	.LBE69:
 274              	.LBE68:
 275              		.loc 1 331 0
 276 010c 9A40     		lsls	r2, r2, r3
 277 010e 0A43     		orrs	r2, r2, r1
 278 0110 0260     		str	r2, [r0]
 323:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 279              		.loc 1 323 0
 280 0112 35E0     		b	.L16
 281              	.LVL19:
 282              	.L18:
 332:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 333:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 334:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 335:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 336:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSI State */
 337:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 283              		.loc 1 337 0
 284 0114 E368     		ldr	r3, [r4, #12]
 285 0116 0BB3     		cbz	r3, .L20
 338:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 339:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 340:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 286              		.loc 1 340 0
 287 0118 0122     		movs	r2, #1
 288 011a 684B     		ldr	r3, .L67+8
 289 011c 1A60     		str	r2, [r3]
 341:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 342:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 343:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 290              		.loc 1 343 0
 291 011e FFF7FEFF 		bl	HAL_GetTick
 292              	.LVL20:
 293 0122 0546     		mov	r5, r0
 294              	.LVL21:
 344:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 345:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 346:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 295              		.loc 1 346 0
 296 0124 05E0     		b	.L21
 297              	.LVL22:
ARM GAS  /tmp/ccqd1Kqm.s 			page 24


 298              	.L22:
 347:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 348:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 299              		.loc 1 348 0
 300 0126 FFF7FEFF 		bl	HAL_GetTick
 301              	.LVL23:
 302 012a 401B     		subs	r0, r0, r5
 303 012c 6428     		cmp	r0, #100
 304 012e 00F23381 		bhi	.L53
 305              	.L21:
 346:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 306              		.loc 1 346 0
 307 0132 604B     		ldr	r3, .L67
 308 0134 1B68     		ldr	r3, [r3]
 309 0136 13F0020F 		tst	r3, #2
 310 013a F4D0     		beq	.L22
 349:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 350:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 351:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }       
 352:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 353:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 
 354:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 355:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 311              		.loc 1 355 0
 312 013c 5D48     		ldr	r0, .L67
 313 013e 0368     		ldr	r3, [r0]
 314 0140 23F0F801 		bic	r1, r3, #248
 315 0144 2269     		ldr	r2, [r4, #16]
 316              	.LVL24:
 317              	.LBB70:
 318              	.LBB71:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 319              		.loc 2 491 0
 320 0146 F823     		movs	r3, #248
 321              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 322 0148 93FAA3F3 		rbit r3, r3
 323              	@ 0 "" 2
 324              	.LVL25:
 325              		.thumb
 326              	.LBE71:
 327              	.LBE70:
 328              	.LBB72:
 329              	.LBB73:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 330              		.loc 2 666 0
 331              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 332 014c B3FA83F3 		clz r3, r3
 333              	@ 0 "" 2
 334              	.LVL26:
 335              		.loc 2 667 0
 336              		.thumb
 337 0150 DBB2     		uxtb	r3, r3
 338              	.LVL27:
 339              	.LBE73:
 340              	.LBE72:
 341              		.loc 1 355 0
 342 0152 9A40     		lsls	r2, r2, r3
ARM GAS  /tmp/ccqd1Kqm.s 			page 25


 343 0154 41EA0203 		orr	r3, r1, r2
 344 0158 0360     		str	r3, [r0]
 345 015a 11E0     		b	.L16
 346              	.LVL28:
 347              	.L20:
 356:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 357:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 358:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 359:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 360:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 348              		.loc 1 360 0
 349 015c 0022     		movs	r2, #0
 350 015e 574B     		ldr	r3, .L67+8
 351 0160 1A60     		str	r2, [r3]
 361:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 362:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 363:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 352              		.loc 1 363 0
 353 0162 FFF7FEFF 		bl	HAL_GetTick
 354              	.LVL29:
 355 0166 0546     		mov	r5, r0
 356              	.LVL30:
 364:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 365:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 366:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 357              		.loc 1 366 0
 358 0168 05E0     		b	.L23
 359              	.LVL31:
 360              	.L24:
 367:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 368:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 361              		.loc 1 368 0
 362 016a FFF7FEFF 		bl	HAL_GetTick
 363              	.LVL32:
 364 016e 401B     		subs	r0, r0, r5
 365 0170 6428     		cmp	r0, #100
 366 0172 00F21381 		bhi	.L54
 367              	.L23:
 366:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 368              		.loc 1 366 0
 369 0176 4F4B     		ldr	r3, .L67
 370 0178 1B68     		ldr	r3, [r3]
 371 017a 13F0020F 		tst	r3, #2
 372 017e F4D1     		bne	.L24
 373              	.LVL33:
 374              	.L16:
 369:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 370:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 371:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 372:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 373:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 374:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 375:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 376:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 377:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 375              		.loc 1 377 0
 376 0180 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccqd1Kqm.s 			page 26


 377 0182 13F0080F 		tst	r3, #8
 378 0186 26D0     		beq	.L25
 378:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 379:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 380:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 381:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 382:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSI State */
 383:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 379              		.loc 1 383 0
 380 0188 6369     		ldr	r3, [r4, #20]
 381 018a 93B1     		cbz	r3, .L26
 384:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 385:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 386:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 382              		.loc 1 386 0
 383 018c 0122     		movs	r2, #1
 384 018e 4C4B     		ldr	r3, .L67+12
 385 0190 1A60     		str	r2, [r3]
 387:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 388:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 389:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 386              		.loc 1 389 0
 387 0192 FFF7FEFF 		bl	HAL_GetTick
 388              	.LVL34:
 389 0196 0546     		mov	r5, r0
 390              	.LVL35:
 390:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 391:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */
 392:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 391              		.loc 1 392 0
 392 0198 05E0     		b	.L27
 393              	.LVL36:
 394              	.L28:
 393:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 394:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 395              		.loc 1 394 0
 396 019a FFF7FEFF 		bl	HAL_GetTick
 397              	.LVL37:
 398 019e 401B     		subs	r0, r0, r5
 399 01a0 6428     		cmp	r0, #100
 400 01a2 00F2FD80 		bhi	.L55
 401              	.L27:
 392:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 402              		.loc 1 392 0
 403 01a6 434B     		ldr	r3, .L67
 404 01a8 5B6F     		ldr	r3, [r3, #116]
 405 01aa 13F0020F 		tst	r3, #2
 406 01ae F4D0     		beq	.L28
 407 01b0 11E0     		b	.L25
 408              	.LVL38:
 409              	.L26:
 395:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 396:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 397:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 398:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 399:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 400:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
ARM GAS  /tmp/ccqd1Kqm.s 			page 27


 401:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 402:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 403:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 410              		.loc 1 403 0
 411 01b2 0022     		movs	r2, #0
 412 01b4 424B     		ldr	r3, .L67+12
 413 01b6 1A60     		str	r2, [r3]
 404:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 405:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 406:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 414              		.loc 1 406 0
 415 01b8 FFF7FEFF 		bl	HAL_GetTick
 416              	.LVL39:
 417 01bc 0546     		mov	r5, r0
 418              	.LVL40:
 407:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 408:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 409:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 419              		.loc 1 409 0
 420 01be 05E0     		b	.L29
 421              	.LVL41:
 422              	.L30:
 410:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 411:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 423              		.loc 1 411 0
 424 01c0 FFF7FEFF 		bl	HAL_GetTick
 425              	.LVL42:
 426 01c4 401B     		subs	r0, r0, r5
 427 01c6 6428     		cmp	r0, #100
 428 01c8 00F2EC80 		bhi	.L56
 429              	.L29:
 409:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 430              		.loc 1 409 0
 431 01cc 394B     		ldr	r3, .L67
 432 01ce 5B6F     		ldr	r3, [r3, #116]
 433 01d0 13F0020F 		tst	r3, #2
 434 01d4 F4D1     		bne	.L30
 435              	.LVL43:
 436              	.L25:
 412:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 413:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 414:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 415:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       } 
 416:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 417:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 418:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 419:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 437              		.loc 1 419 0
 438 01d6 2368     		ldr	r3, [r4]
 439 01d8 13F0040F 		tst	r3, #4
 440 01dc 56D0     		beq	.L31
 420:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 421:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 422:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 423:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 424:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable Power Clock*/
 425:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __PWR_CLK_ENABLE();
ARM GAS  /tmp/ccqd1Kqm.s 			page 28


 441              		.loc 1 425 0
 442 01de 354A     		ldr	r2, .L67
 443 01e0 136C     		ldr	r3, [r2, #64]
 444 01e2 43F08053 		orr	r3, r3, #268435456
 445 01e6 1364     		str	r3, [r2, #64]
 426:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 427:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable write access to Backup domain */
 428:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     PWR->CR |= PWR_CR_DBP;
 446              		.loc 1 428 0
 447 01e8 A2F5E432 		sub	r2, r2, #116736
 448 01ec 1368     		ldr	r3, [r2]
 449 01ee 43F48073 		orr	r3, r3, #256
 450 01f2 1360     		str	r3, [r2]
 429:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 430:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Wait for Backup domain Write protection disable */
 431:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 451              		.loc 1 431 0
 452 01f4 FFF7FEFF 		bl	HAL_GetTick
 453              	.LVL44:
 454 01f8 0546     		mov	r5, r0
 455              	.LVL45:
 432:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 433:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 456              		.loc 1 433 0
 457 01fa 05E0     		b	.L32
 458              	.LVL46:
 459              	.L33:
 434:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 435:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > DBP_TIMEOUT_VALUE)
 460              		.loc 1 435 0
 461 01fc FFF7FEFF 		bl	HAL_GetTick
 462              	.LVL47:
 463 0200 401B     		subs	r0, r0, r5
 464 0202 6428     		cmp	r0, #100
 465 0204 00F2D080 		bhi	.L57
 466              	.L32:
 433:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 467              		.loc 1 433 0
 468 0208 2E4B     		ldr	r3, .L67+16
 469 020a 1B68     		ldr	r3, [r3]
 470 020c 13F4807F 		tst	r3, #256
 471 0210 F4D0     		beq	.L33
 436:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 437:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 438:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }      
 439:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 440:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 441:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
 442:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 472              		.loc 1 442 0
 473 0212 0022     		movs	r2, #0
 474 0214 2C4B     		ldr	r3, .L67+20
 475 0216 1A70     		strb	r2, [r3]
 443:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 444:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Get Start Tick*/
 445:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 476              		.loc 1 445 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 29


 477 0218 FFF7FEFF 		bl	HAL_GetTick
 478              	.LVL48:
 479 021c 0546     		mov	r5, r0
 480              	.LVL49:
 446:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 447:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Wait till LSE is ready */  
 448:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 481              		.loc 1 448 0
 482 021e 07E0     		b	.L34
 483              	.LVL50:
 484              	.L35:
 449:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 450:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > LSE_TIMEOUT_VALUE)
 485              		.loc 1 450 0
 486 0220 FFF7FEFF 		bl	HAL_GetTick
 487              	.LVL51:
 488 0224 401B     		subs	r0, r0, r5
 489 0226 41F28833 		movw	r3, #5000
 490 022a 9842     		cmp	r0, r3
 491 022c 00F2BE80 		bhi	.L58
 492              	.L34:
 448:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 493              		.loc 1 448 0
 494 0230 204B     		ldr	r3, .L67
 495 0232 1B6F     		ldr	r3, [r3, #112]
 496 0234 13F0020F 		tst	r3, #2
 497 0238 F2D1     		bne	.L35
 451:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 452:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 453:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }    
 454:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     } 
 455:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 456:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 457:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 498              		.loc 1 457 0
 499 023a 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 500 023c 224B     		ldr	r3, .L67+20
 501 023e 1A70     		strb	r2, [r3]
 458:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSE State */
 459:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 502              		.loc 1 459 0
 503 0240 A368     		ldr	r3, [r4, #8]
 504 0242 012B     		cmp	r3, #1
 505 0244 11D1     		bne	.L36
 460:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 461:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 462:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 506              		.loc 1 462 0
 507 0246 FFF7FEFF 		bl	HAL_GetTick
 508              	.LVL52:
 509 024a 0546     		mov	r5, r0
 510              	.LVL53:
 463:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 464:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 465:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 511              		.loc 1 465 0
 512 024c 07E0     		b	.L37
ARM GAS  /tmp/ccqd1Kqm.s 			page 30


 513              	.LVL54:
 514              	.L38:
 466:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 467:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSE_TIMEOUT_VALUE)
 515              		.loc 1 467 0
 516 024e FFF7FEFF 		bl	HAL_GetTick
 517              	.LVL55:
 518 0252 401B     		subs	r0, r0, r5
 519 0254 41F28833 		movw	r3, #5000
 520 0258 9842     		cmp	r0, r3
 521 025a 00F2A980 		bhi	.L59
 522              	.L37:
 465:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 523              		.loc 1 465 0
 524 025e 154B     		ldr	r3, .L67
 525 0260 1B6F     		ldr	r3, [r3, #112]
 526 0262 13F0020F 		tst	r3, #2
 527 0266 F2D0     		beq	.L38
 528 0268 10E0     		b	.L31
 529              	.L36:
 468:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 469:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 470:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 471:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 472:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 473:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 474:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 475:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 476:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 530              		.loc 1 476 0
 531 026a FFF7FEFF 		bl	HAL_GetTick
 532              	.LVL56:
 533 026e 0546     		mov	r5, r0
 534              	.LVL57:
 477:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 478:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 479:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 535              		.loc 1 479 0
 536 0270 07E0     		b	.L39
 537              	.LVL58:
 538              	.L40:
 480:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 481:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSE_TIMEOUT_VALUE)
 539              		.loc 1 481 0
 540 0272 FFF7FEFF 		bl	HAL_GetTick
 541              	.LVL59:
 542 0276 401B     		subs	r0, r0, r5
 543 0278 41F28833 		movw	r3, #5000
 544 027c 9842     		cmp	r0, r3
 545 027e 00F29980 		bhi	.L60
 546              	.L39:
 479:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 547              		.loc 1 479 0
 548 0282 0C4B     		ldr	r3, .L67
 549 0284 1B6F     		ldr	r3, [r3, #112]
 550 0286 13F0020F 		tst	r3, #2
 551 028a F2D1     		bne	.L40
ARM GAS  /tmp/ccqd1Kqm.s 			page 31


 552              	.LVL60:
 553              	.L31:
 482:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 483:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 484:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 485:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 486:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 487:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 488:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 489:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 490:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 491:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 554              		.loc 1 491 0
 555 028c A369     		ldr	r3, [r4, #24]
 556 028e 002B     		cmp	r3, #0
 557 0290 00F09280 		beq	.L61
 492:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 493:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 494:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 558              		.loc 1 494 0
 559 0294 074A     		ldr	r2, .L67
 560 0296 9268     		ldr	r2, [r2, #8]
 561 0298 02F00C02 		and	r2, r2, #12
 562 029c 082A     		cmp	r2, #8
 563 029e 00F08D80 		beq	.L62
 495:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     { 
 496:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 564              		.loc 1 496 0
 565 02a2 022B     		cmp	r3, #2
 566 02a4 5BD1     		bne	.L41
 497:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 498:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the parameters */
 499:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 500:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 501:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 502:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 503:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 504:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 505:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 506:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 567              		.loc 1 506 0
 568 02a6 0022     		movs	r2, #0
 569 02a8 084B     		ldr	r3, .L67+24
 570 02aa 1A60     		str	r2, [r3]
 507:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 508:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 509:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 571              		.loc 1 509 0
 572 02ac FFF7FEFF 		bl	HAL_GetTick
 573              	.LVL61:
 574 02b0 0546     		mov	r5, r0
 575              	.LVL62:
 510:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 511:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 512:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 576              		.loc 1 512 0
 577 02b2 12E0     		b	.L42
ARM GAS  /tmp/ccqd1Kqm.s 			page 32


 578              	.L68:
 579              		.align	2
 580              	.L67:
 581 02b4 00380240 		.word	1073887232
 582 02b8 02380240 		.word	1073887234
 583 02bc 00004742 		.word	1111949312
 584 02c0 800E4742 		.word	1111953024
 585 02c4 00700040 		.word	1073770496
 586 02c8 70380240 		.word	1073887344
 587 02cc 60004742 		.word	1111949408
 588              	.LVL63:
 589              	.L43:
 513:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 514:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 590              		.loc 1 514 0
 591 02d0 FFF7FEFF 		bl	HAL_GetTick
 592              	.LVL64:
 593 02d4 401B     		subs	r0, r0, r5
 594 02d6 6428     		cmp	r0, #100
 595 02d8 72D8     		bhi	.L63
 596              	.L42:
 512:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 597              		.loc 1 512 0
 598 02da 3C4B     		ldr	r3, .L69
 599 02dc 1B68     		ldr	r3, [r3]
 600 02de 13F0007F 		tst	r3, #33554432
 601 02e2 F5D1     		bne	.L43
 515:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 516:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 517:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 518:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }        
 519:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 520:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 521:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 602              		.loc 1 521 0
 603 02e4 216A     		ldr	r1, [r4, #32]
 604 02e6 626A     		ldr	r2, [r4, #36]
 605              	.LVL65:
 606              	.LBB74:
 607              	.LBB75:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 608              		.loc 2 491 0
 609 02e8 47F6C073 		movw	r3, #32704
 610              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 611 02ec 93FAA3F3 		rbit r3, r3
 612              	@ 0 "" 2
 613              	.LVL66:
 614              		.thumb
 615              	.LBE75:
 616              	.LBE74:
 617              	.LBB76:
 618              	.LBB77:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 619              		.loc 2 666 0
 620              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 621 02f0 B3FA83F3 		clz r3, r3
 622              	@ 0 "" 2
ARM GAS  /tmp/ccqd1Kqm.s 			page 33


 623              	.LVL67:
 624              		.loc 2 667 0
 625              		.thumb
 626 02f4 DBB2     		uxtb	r3, r3
 627              	.LVL68:
 628              	.LBE77:
 629              	.LBE76:
 630              		.loc 1 521 0
 631 02f6 9A40     		lsls	r2, r2, r3
 632 02f8 1143     		orrs	r1, r1, r2
 633 02fa A36A     		ldr	r3, [r4, #40]
 634 02fc 5B08     		lsrs	r3, r3, #1
 635 02fe 013B     		subs	r3, r3, #1
 636              	.LVL69:
 637              	.LBB78:
 638              	.LBB79:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 639              		.loc 2 491 0
 640 0300 4FF44032 		mov	r2, #196608
 641              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 642 0304 92FAA2F2 		rbit r2, r2
 643              	@ 0 "" 2
 644              	.LVL70:
 645              		.thumb
 646              	.LBE79:
 647              	.LBE78:
 648              	.LBB80:
 649              	.LBB81:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 650              		.loc 2 666 0
 651              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 652 0308 B2FA82F2 		clz r2, r2
 653              	@ 0 "" 2
 654              	.LVL71:
 655              		.loc 2 667 0
 656              		.thumb
 657 030c D2B2     		uxtb	r2, r2
 658              	.LVL72:
 659              	.LBE81:
 660              	.LBE80:
 661              		.loc 1 521 0
 662 030e 9340     		lsls	r3, r3, r2
 663 0310 0B43     		orrs	r3, r3, r1
 664 0312 E269     		ldr	r2, [r4, #28]
 665 0314 43EA0201 		orr	r1, r3, r2
 666 0318 E36A     		ldr	r3, [r4, #44]
 667              	.LVL73:
 668              	.LBB82:
 669              	.LBB83:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 670              		.loc 2 491 0
 671 031a 4FF07062 		mov	r2, #251658240
 672              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 673 031e 92FAA2F2 		rbit r2, r2
 674              	@ 0 "" 2
 675              	.LVL74:
 676              		.thumb
ARM GAS  /tmp/ccqd1Kqm.s 			page 34


 677              	.LBE83:
 678              	.LBE82:
 679              	.LBB84:
 680              	.LBB85:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 681              		.loc 2 666 0
 682              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 683 0322 B2FA82F2 		clz r2, r2
 684              	@ 0 "" 2
 685              	.LVL75:
 686              		.loc 2 667 0
 687              		.thumb
 688 0326 D2B2     		uxtb	r2, r2
 689              	.LVL76:
 690              	.LBE85:
 691              	.LBE84:
 692              		.loc 1 521 0
 693 0328 03FA02F2 		lsl	r2, r3, r2
 694 032c 41EA0203 		orr	r3, r1, r2
 695 0330 43F00053 		orr	r3, r3, #536870912
 696 0334 254A     		ldr	r2, .L69
 697 0336 5360     		str	r3, [r2, #4]
 522:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 523:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 524:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 525:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ);
 526:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the main PLL. */
 527:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 698              		.loc 1 527 0
 699 0338 0122     		movs	r2, #1
 700 033a 254B     		ldr	r3, .L69+4
 701 033c 1A60     		str	r2, [r3]
 528:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 529:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 530:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 702              		.loc 1 530 0
 703 033e FFF7FEFF 		bl	HAL_GetTick
 704              	.LVL77:
 705 0342 0446     		mov	r4, r0
 706              	.LVL78:
 531:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 532:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 533:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 707              		.loc 1 533 0
 708 0344 04E0     		b	.L44
 709              	.LVL79:
 710              	.L45:
 534:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 535:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 711              		.loc 1 535 0
 712 0346 FFF7FEFF 		bl	HAL_GetTick
 713              	.LVL80:
 714 034a 001B     		subs	r0, r0, r4
 715 034c 6428     		cmp	r0, #100
 716 034e 39D8     		bhi	.L64
 717              	.L44:
 533:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
ARM GAS  /tmp/ccqd1Kqm.s 			page 35


 718              		.loc 1 533 0
 719 0350 1E4B     		ldr	r3, .L69
 720 0352 1B68     		ldr	r3, [r3]
 721 0354 13F0007F 		tst	r3, #33554432
 722 0358 F5D0     		beq	.L45
 536:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 537:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 538:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 539:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 540:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 541:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 542:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 543:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 544:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 545:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 546:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 547:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 548:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 549:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 550:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 551:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 552:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 553:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 554:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 555:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 556:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 557:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 558:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 559:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 560:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 561:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 562:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 563:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 564:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 723              		.loc 1 564 0
 724 035a 0020     		movs	r0, #0
 725 035c 38BD     		pop	{r3, r4, r5, pc}
 726              	.LVL81:
 727              	.L41:
 544:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 728              		.loc 1 544 0
 729 035e 0022     		movs	r2, #0
 730 0360 1B4B     		ldr	r3, .L69+4
 731 0362 1A60     		str	r2, [r3]
 547:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 732              		.loc 1 547 0
 733 0364 FFF7FEFF 		bl	HAL_GetTick
 734              	.LVL82:
 735 0368 0446     		mov	r4, r0
 736              	.LVL83:
 550:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 737              		.loc 1 550 0
 738 036a 04E0     		b	.L46
 739              	.LVL84:
 740              	.L47:
 552:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 741              		.loc 1 552 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 36


 742 036c FFF7FEFF 		bl	HAL_GetTick
 743              	.LVL85:
 744 0370 001B     		subs	r0, r0, r4
 745 0372 6428     		cmp	r0, #100
 746 0374 28D8     		bhi	.L65
 747              	.L46:
 550:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 748              		.loc 1 550 0
 749 0376 154B     		ldr	r3, .L69
 750 0378 1B68     		ldr	r3, [r3]
 751 037a 13F0007F 		tst	r3, #33554432
 752 037e F5D1     		bne	.L47
 753              		.loc 1 564 0
 754 0380 0020     		movs	r0, #0
 755 0382 38BD     		pop	{r3, r4, r5, pc}
 756              	.LVL86:
 757              	.L48:
 258:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 758              		.loc 1 258 0
 759 0384 0120     		movs	r0, #1
 760              	.LVL87:
 761 0386 38BD     		pop	{r3, r4, r5, pc}
 762              	.LVL88:
 763              	.L49:
 274:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 764              		.loc 1 274 0
 765 0388 0320     		movs	r0, #3
 766 038a 38BD     		pop	{r3, r4, r5, pc}
 767              	.LVL89:
 768              	.L50:
 292:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 769              		.loc 1 292 0
 770 038c 0320     		movs	r0, #3
 771 038e 38BD     		pop	{r3, r4, r5, pc}
 772              	.LVL90:
 773              	.L51:
 306:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 774              		.loc 1 306 0
 775 0390 0320     		movs	r0, #3
 776 0392 38BD     		pop	{r3, r4, r5, pc}
 777              	.LVL91:
 778              	.L52:
 325:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 779              		.loc 1 325 0
 780 0394 0120     		movs	r0, #1
 781 0396 38BD     		pop	{r3, r4, r5, pc}
 782              	.LVL92:
 783              	.L53:
 350:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }       
 784              		.loc 1 350 0
 785 0398 0320     		movs	r0, #3
 786 039a 38BD     		pop	{r3, r4, r5, pc}
 787              	.LVL93:
 788              	.L54:
 370:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 789              		.loc 1 370 0
 790 039c 0320     		movs	r0, #3
ARM GAS  /tmp/ccqd1Kqm.s 			page 37


 791 039e 38BD     		pop	{r3, r4, r5, pc}
 792              	.LVL94:
 793              	.L55:
 396:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 794              		.loc 1 396 0
 795 03a0 0320     		movs	r0, #3
 796 03a2 38BD     		pop	{r3, r4, r5, pc}
 797              	.LVL95:
 798              	.L56:
 413:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 799              		.loc 1 413 0
 800 03a4 0320     		movs	r0, #3
 801 03a6 38BD     		pop	{r3, r4, r5, pc}
 802              	.LVL96:
 803              	.L57:
 437:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }      
 804              		.loc 1 437 0
 805 03a8 0320     		movs	r0, #3
 806 03aa 38BD     		pop	{r3, r4, r5, pc}
 807              	.LVL97:
 808              	.L58:
 452:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }    
 809              		.loc 1 452 0
 810 03ac 0320     		movs	r0, #3
 811 03ae 38BD     		pop	{r3, r4, r5, pc}
 812              	.LVL98:
 813              	.L59:
 469:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 814              		.loc 1 469 0
 815 03b0 0320     		movs	r0, #3
 816 03b2 38BD     		pop	{r3, r4, r5, pc}
 817              	.LVL99:
 818              	.L60:
 483:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 819              		.loc 1 483 0
 820 03b4 0320     		movs	r0, #3
 821 03b6 38BD     		pop	{r3, r4, r5, pc}
 822              	.LVL100:
 823              	.L61:
 824              		.loc 1 564 0
 825 03b8 0020     		movs	r0, #0
 826 03ba 38BD     		pop	{r3, r4, r5, pc}
 827              	.LVL101:
 828              	.L62:
 561:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 829              		.loc 1 561 0
 830 03bc 0120     		movs	r0, #1
 831 03be 38BD     		pop	{r3, r4, r5, pc}
 832              	.LVL102:
 833              	.L63:
 516:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 834              		.loc 1 516 0
 835 03c0 0320     		movs	r0, #3
 836 03c2 38BD     		pop	{r3, r4, r5, pc}
 837              	.LVL103:
 838              	.L64:
 537:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
ARM GAS  /tmp/ccqd1Kqm.s 			page 38


 839              		.loc 1 537 0
 840 03c4 0320     		movs	r0, #3
 841 03c6 38BD     		pop	{r3, r4, r5, pc}
 842              	.LVL104:
 843              	.L65:
 554:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 844              		.loc 1 554 0
 845 03c8 0320     		movs	r0, #3
 565:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 846              		.loc 1 565 0
 847 03ca 38BD     		pop	{r3, r4, r5, pc}
 848              	.LVL105:
 849              	.L70:
 850              		.align	2
 851              	.L69:
 852 03cc 00380240 		.word	1073887232
 853 03d0 60004742 		.word	1111949408
 854              		.cfi_endproc
 855              	.LFE113:
 857              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 858              		.align	2
 859              		.global	HAL_RCC_ClockConfig
 860              		.thumb
 861              		.thumb_func
 863              	HAL_RCC_ClockConfig:
 864              	.LFB114:
 566:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 567:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 568:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified 
 569:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 570:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 571:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 572:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 573:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
 574:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 575:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 576:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
 577:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 578:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 579:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 580:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 581:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 582:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 583:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 584:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 585:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 586:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 587:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 588:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 589:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 590:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 591:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 592:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 593:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 865              		.loc 1 593 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 39


 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869              	.LVL106:
 870 0000 70B5     		push	{r4, r5, r6, lr}
 871              	.LCFI1:
 872              		.cfi_def_cfa_offset 16
 873              		.cfi_offset 4, -16
 874              		.cfi_offset 5, -12
 875              		.cfi_offset 6, -8
 876              		.cfi_offset 14, -4
 877 0002 0446     		mov	r4, r0
 878 0004 0D46     		mov	r5, r1
 879              	.LVL107:
 594:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart = 0;   
 595:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 596:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 597:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 598:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 599:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 600:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 601:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock 
 602:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
 603:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 604:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 605:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 880              		.loc 1 605 0
 881 0006 874B     		ldr	r3, .L117
 882 0008 1B68     		ldr	r3, [r3]
 883 000a 03F00F03 		and	r3, r3, #15
 884 000e 8B42     		cmp	r3, r1
 885 0010 6BD2     		bcs	.L72
 606:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {    
 607:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 608:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 886              		.loc 1 608 0
 887 0012 CAB2     		uxtb	r2, r1
 888 0014 834B     		ldr	r3, .L117
 889 0016 1A70     		strb	r2, [r3]
 609:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 610:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 611:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 612:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 890              		.loc 1 612 0
 891 0018 1B68     		ldr	r3, [r3]
 892 001a 03F00F03 		and	r3, r3, #15
 893 001e 8B42     		cmp	r3, r1
 894 0020 40F0E480 		bne	.L100
 613:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 614:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 615:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 616:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 617:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 618:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 895              		.loc 1 618 0
 896 0024 0368     		ldr	r3, [r0]
 897 0026 13F0020F 		tst	r3, #2
 898 002a 06D0     		beq	.L74
 619:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
ARM GAS  /tmp/ccqd1Kqm.s 			page 40


 620:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 621:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 899              		.loc 1 621 0
 900 002c 7E49     		ldr	r1, .L117+4
 901              	.LVL108:
 902 002e 8B68     		ldr	r3, [r1, #8]
 903 0030 23F0F002 		bic	r2, r3, #240
 904 0034 8368     		ldr	r3, [r0, #8]
 905 0036 1343     		orrs	r3, r3, r2
 906 0038 8B60     		str	r3, [r1, #8]
 907              	.L74:
 622:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 623:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 624:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration ---------------------------*/ 
 625:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 908              		.loc 1 625 0
 909 003a 2368     		ldr	r3, [r4]
 910 003c 13F0010F 		tst	r3, #1
 911 0040 00F0B880 		beq	.L75
 626:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {    
 627:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 628:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 629:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 630:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 912              		.loc 1 630 0
 913 0044 6268     		ldr	r2, [r4, #4]
 914 0046 012A     		cmp	r2, #1
 915 0048 05D1     		bne	.L76
 631:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 632:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 633:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 916              		.loc 1 633 0
 917 004a 774B     		ldr	r3, .L117+4
 918 004c 1B68     		ldr	r3, [r3]
 919 004e 13F4003F 		tst	r3, #131072
 920 0052 0ED1     		bne	.L77
 921 0054 CCE0     		b	.L101
 922              	.L76:
 634:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 635:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 636:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 637:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 638:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 639:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 923              		.loc 1 639 0
 924 0056 022A     		cmp	r2, #2
 925 0058 05D1     		bne	.L78
 640:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 641:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 642:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 926              		.loc 1 642 0
 927 005a 734B     		ldr	r3, .L117+4
 928 005c 1B68     		ldr	r3, [r3]
 929 005e 13F0007F 		tst	r3, #33554432
 930 0062 06D1     		bne	.L77
 931 0064 C6E0     		b	.L102
 932              	.L78:
ARM GAS  /tmp/ccqd1Kqm.s 			page 41


 643:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 644:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 645:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 646:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 647:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 648:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 649:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 650:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 651:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 933              		.loc 1 651 0
 934 0066 704B     		ldr	r3, .L117+4
 935 0068 1B68     		ldr	r3, [r3]
 936 006a 13F0020F 		tst	r3, #2
 937 006e 00F0C380 		beq	.L103
 938              	.L77:
 652:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 653:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 654:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 655:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 656:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 939              		.loc 1 656 0
 940 0072 6D49     		ldr	r1, .L117+4
 941 0074 8B68     		ldr	r3, [r1, #8]
 942 0076 23F00303 		bic	r3, r3, #3
 943 007a 1343     		orrs	r3, r3, r2
 944 007c 8B60     		str	r3, [r1, #8]
 657:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 658:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 659:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 945              		.loc 1 659 0
 946 007e FFF7FEFF 		bl	HAL_GetTick
 947              	.LVL109:
 948 0082 0546     		mov	r5, r0
 949              	.LVL110:
 660:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 661:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 950              		.loc 1 661 0
 951 0084 6368     		ldr	r3, [r4, #4]
 952 0086 012B     		cmp	r3, #1
 953 0088 0FD1     		bne	.L114
 954 008a 07E0     		b	.L79
 955              	.LVL111:
 956              	.L81:
 662:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 663:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 664:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 665:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 957              		.loc 1 665 0
 958 008c FFF7FEFF 		bl	HAL_GetTick
 959              	.LVL112:
 960 0090 401B     		subs	r0, r0, r5
 961 0092 41F28833 		movw	r3, #5000
 962 0096 9842     		cmp	r0, r3
 963 0098 00F2B080 		bhi	.L104
 964              	.L79:
 663:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 965              		.loc 1 663 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 42


 966 009c 624B     		ldr	r3, .L117+4
 967 009e 9B68     		ldr	r3, [r3, #8]
 968 00a0 03F00C03 		and	r3, r3, #12
 969 00a4 042B     		cmp	r3, #4
 970 00a6 F1D1     		bne	.L81
 971 00a8 84E0     		b	.L75
 972              	.LVL113:
 973              	.L114:
 666:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 667:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 668:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 669:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 670:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 671:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 974              		.loc 1 671 0
 975 00aa 022B     		cmp	r3, #2
 976 00ac 17D1     		bne	.L83
 977 00ae 07E0     		b	.L82
 978              	.LVL114:
 979              	.L84:
 672:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 673:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 674:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 675:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 980              		.loc 1 675 0
 981 00b0 FFF7FEFF 		bl	HAL_GetTick
 982              	.LVL115:
 983 00b4 401B     		subs	r0, r0, r5
 984 00b6 41F28833 		movw	r3, #5000
 985 00ba 9842     		cmp	r0, r3
 986 00bc 00F2A080 		bhi	.L105
 987              	.L82:
 673:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 988              		.loc 1 673 0
 989 00c0 594B     		ldr	r3, .L117+4
 990 00c2 9B68     		ldr	r3, [r3, #8]
 991 00c4 03F00C03 		and	r3, r3, #12
 992 00c8 082B     		cmp	r3, #8
 993 00ca F1D1     		bne	.L84
 994 00cc 72E0     		b	.L75
 995              	.L85:
 676:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 677:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 678:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 679:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 680:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 681:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 682:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 683:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 684:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 685:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 996              		.loc 1 685 0
 997 00ce FFF7FEFF 		bl	HAL_GetTick
 998              	.LVL116:
 999 00d2 401B     		subs	r0, r0, r5
 1000 00d4 41F28833 		movw	r3, #5000
 1001 00d8 9842     		cmp	r0, r3
ARM GAS  /tmp/ccqd1Kqm.s 			page 43


 1002 00da 00F29380 		bhi	.L106
 1003              	.L83:
 683:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1004              		.loc 1 683 0
 1005 00de 524B     		ldr	r3, .L117+4
 1006 00e0 9B68     		ldr	r3, [r3, #8]
 1007 00e2 13F00C0F 		tst	r3, #12
 1008 00e6 F2D1     		bne	.L85
 1009 00e8 64E0     		b	.L75
 1010              	.LVL117:
 1011              	.L72:
 686:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 687:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 688:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 689:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 690:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 691:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }    
 692:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 693:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Decreasing the CPU frequency */
 694:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 695:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 696:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 697:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1012              		.loc 1 697 0
 1013 00ea 0368     		ldr	r3, [r0]
 1014 00ec 13F0020F 		tst	r3, #2
 1015 00f0 06D0     		beq	.L86
 698:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 699:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 700:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1016              		.loc 1 700 0
 1017 00f2 4D49     		ldr	r1, .L117+4
 1018              	.LVL118:
 1019 00f4 8B68     		ldr	r3, [r1, #8]
 1020 00f6 23F0F002 		bic	r2, r3, #240
 1021 00fa 8368     		ldr	r3, [r0, #8]
 1022 00fc 1343     		orrs	r3, r3, r2
 1023 00fe 8B60     		str	r3, [r1, #8]
 1024              	.L86:
 701:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 702:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 703:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration -------------------------*/
 704:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1025              		.loc 1 704 0
 1026 0100 2368     		ldr	r3, [r4]
 1027 0102 13F0010F 		tst	r3, #1
 1028 0106 4DD0     		beq	.L87
 705:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {    
 706:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 707:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 708:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 709:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1029              		.loc 1 709 0
 1030 0108 6268     		ldr	r2, [r4, #4]
 1031 010a 012A     		cmp	r2, #1
 1032 010c 05D1     		bne	.L88
 710:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccqd1Kqm.s 			page 44


 711:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 712:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1033              		.loc 1 712 0
 1034 010e 464B     		ldr	r3, .L117+4
 1035 0110 1B68     		ldr	r3, [r3]
 1036 0112 13F4003F 		tst	r3, #131072
 1037 0116 0DD1     		bne	.L89
 1038 0118 76E0     		b	.L107
 1039              	.L88:
 713:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 714:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 715:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 716:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 717:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 718:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1040              		.loc 1 718 0
 1041 011a 022A     		cmp	r2, #2
 1042 011c 05D1     		bne	.L90
 719:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 720:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 721:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1043              		.loc 1 721 0
 1044 011e 424B     		ldr	r3, .L117+4
 1045 0120 1B68     		ldr	r3, [r3]
 1046 0122 13F0007F 		tst	r3, #33554432
 1047 0126 05D1     		bne	.L89
 1048 0128 70E0     		b	.L108
 1049              	.L90:
 722:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 723:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 724:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 725:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 726:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 727:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 728:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 729:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 730:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1050              		.loc 1 730 0
 1051 012a 3F4B     		ldr	r3, .L117+4
 1052 012c 1B68     		ldr	r3, [r3]
 1053 012e 13F0020F 		tst	r3, #2
 1054 0132 6DD0     		beq	.L109
 1055              	.L89:
 731:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 732:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 733:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 734:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 735:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 1056              		.loc 1 735 0
 1057 0134 3C49     		ldr	r1, .L117+4
 1058 0136 8B68     		ldr	r3, [r1, #8]
 1059 0138 23F00303 		bic	r3, r3, #3
 1060 013c 1343     		orrs	r3, r3, r2
 1061 013e 8B60     		str	r3, [r1, #8]
 736:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 737:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 738:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
ARM GAS  /tmp/ccqd1Kqm.s 			page 45


 1062              		.loc 1 738 0
 1063 0140 FFF7FEFF 		bl	HAL_GetTick
 1064              	.LVL119:
 1065 0144 0646     		mov	r6, r0
 1066              	.LVL120:
 739:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 740:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1067              		.loc 1 740 0
 1068 0146 6368     		ldr	r3, [r4, #4]
 1069 0148 012B     		cmp	r3, #1
 1070 014a 0ED1     		bne	.L115
 1071 014c 06E0     		b	.L91
 1072              	.LVL121:
 1073              	.L93:
 741:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 742:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 743:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 744:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1074              		.loc 1 744 0
 1075 014e FFF7FEFF 		bl	HAL_GetTick
 1076              	.LVL122:
 1077 0152 801B     		subs	r0, r0, r6
 1078 0154 41F28833 		movw	r3, #5000
 1079 0158 9842     		cmp	r0, r3
 1080 015a 5BD8     		bhi	.L110
 1081              	.L91:
 742:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1082              		.loc 1 742 0
 1083 015c 324B     		ldr	r3, .L117+4
 1084 015e 9B68     		ldr	r3, [r3, #8]
 1085 0160 03F00C03 		and	r3, r3, #12
 1086 0164 042B     		cmp	r3, #4
 1087 0166 F2D1     		bne	.L93
 1088 0168 1CE0     		b	.L87
 1089              	.LVL123:
 1090              	.L115:
 745:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 746:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 747:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 748:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 749:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 750:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1091              		.loc 1 750 0
 1092 016a 022B     		cmp	r3, #2
 1093 016c 15D1     		bne	.L95
 1094 016e 06E0     		b	.L94
 1095              	.LVL124:
 1096              	.L96:
 751:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 752:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 753:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 754:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1097              		.loc 1 754 0
 1098 0170 FFF7FEFF 		bl	HAL_GetTick
 1099              	.LVL125:
 1100 0174 801B     		subs	r0, r0, r6
 1101 0176 41F28833 		movw	r3, #5000
ARM GAS  /tmp/ccqd1Kqm.s 			page 46


 1102 017a 9842     		cmp	r0, r3
 1103 017c 4CD8     		bhi	.L111
 1104              	.L94:
 752:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1105              		.loc 1 752 0
 1106 017e 2A4B     		ldr	r3, .L117+4
 1107 0180 9B68     		ldr	r3, [r3, #8]
 1108 0182 03F00C03 		and	r3, r3, #12
 1109 0186 082B     		cmp	r3, #8
 1110 0188 F2D1     		bne	.L96
 1111 018a 0BE0     		b	.L87
 1112              	.L97:
 755:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 756:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 757:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 758:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 759:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 760:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 761:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 762:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 763:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 764:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1113              		.loc 1 764 0
 1114 018c FFF7FEFF 		bl	HAL_GetTick
 1115              	.LVL126:
 1116 0190 801B     		subs	r0, r0, r6
 1117 0192 41F28833 		movw	r3, #5000
 1118 0196 9842     		cmp	r0, r3
 1119 0198 40D8     		bhi	.L112
 1120              	.L95:
 762:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1121              		.loc 1 762 0
 1122 019a 234B     		ldr	r3, .L117+4
 1123 019c 9B68     		ldr	r3, [r3, #8]
 1124 019e 13F00C0F 		tst	r3, #12
 1125 01a2 F3D1     		bne	.L97
 1126              	.LVL127:
 1127              	.L87:
 765:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 766:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 767:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 768:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 769:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 770:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 771:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 772:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 773:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1128              		.loc 1 773 0
 1129 01a4 EAB2     		uxtb	r2, r5
 1130 01a6 1F4B     		ldr	r3, .L117
 1131 01a8 1A70     		strb	r2, [r3]
 774:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 775:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 776:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 777:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1132              		.loc 1 777 0
 1133 01aa 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccqd1Kqm.s 			page 47


 1134 01ac 03F00F03 		and	r3, r3, #15
 1135 01b0 AB42     		cmp	r3, r5
 1136 01b2 35D1     		bne	.L113
 1137              	.LVL128:
 1138              	.L75:
 778:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 779:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 780:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 781:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  }
 782:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 783:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 784:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1139              		.loc 1 784 0
 1140 01b4 2368     		ldr	r3, [r4]
 1141 01b6 13F0040F 		tst	r3, #4
 1142 01ba 06D0     		beq	.L98
 785:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 786:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 787:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1143              		.loc 1 787 0
 1144 01bc 1A49     		ldr	r1, .L117+4
 1145 01be 8B68     		ldr	r3, [r1, #8]
 1146 01c0 23F4E052 		bic	r2, r3, #7168
 1147 01c4 E368     		ldr	r3, [r4, #12]
 1148 01c6 1343     		orrs	r3, r3, r2
 1149 01c8 8B60     		str	r3, [r1, #8]
 1150              	.L98:
 788:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 789:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 790:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 791:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1151              		.loc 1 791 0
 1152 01ca 2368     		ldr	r3, [r4]
 1153 01cc 13F0080F 		tst	r3, #8
 1154 01d0 07D0     		beq	.L99
 792:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 793:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 794:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1155              		.loc 1 794 0
 1156 01d2 154A     		ldr	r2, .L117+4
 1157 01d4 9368     		ldr	r3, [r2, #8]
 1158 01d6 23F46043 		bic	r3, r3, #57344
 1159 01da 2169     		ldr	r1, [r4, #16]
 1160 01dc 43EAC103 		orr	r3, r3, r1, lsl #3
 1161 01e0 9360     		str	r3, [r2, #8]
 1162              	.L99:
 795:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 796:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 797:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 798:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1163              		.loc 1 798 0
 1164 01e2 0020     		movs	r0, #0
 1165 01e4 FFF7FEFF 		bl	HAL_InitTick
 1166              	.LVL129:
 799:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 800:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 1167              		.loc 1 800 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 48


 1168 01e8 0020     		movs	r0, #0
 1169 01ea 70BD     		pop	{r4, r5, r6, pc}
 1170              	.LVL130:
 1171              	.L100:
 614:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 1172              		.loc 1 614 0
 1173 01ec 0120     		movs	r0, #1
 1174              	.LVL131:
 1175 01ee 70BD     		pop	{r4, r5, r6, pc}
 1176              	.LVL132:
 1177              	.L101:
 635:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1178              		.loc 1 635 0
 1179 01f0 0120     		movs	r0, #1
 1180              	.LVL133:
 1181 01f2 70BD     		pop	{r4, r5, r6, pc}
 1182              	.LVL134:
 1183              	.L102:
 644:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1184              		.loc 1 644 0
 1185 01f4 0120     		movs	r0, #1
 1186              	.LVL135:
 1187 01f6 70BD     		pop	{r4, r5, r6, pc}
 1188              	.LVL136:
 1189              	.L103:
 653:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1190              		.loc 1 653 0
 1191 01f8 0120     		movs	r0, #1
 1192              	.LVL137:
 1193 01fa 70BD     		pop	{r4, r5, r6, pc}
 1194              	.LVL138:
 1195              	.L104:
 667:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1196              		.loc 1 667 0
 1197 01fc 0320     		movs	r0, #3
 1198 01fe 70BD     		pop	{r4, r5, r6, pc}
 1199              	.LVL139:
 1200              	.L105:
 677:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1201              		.loc 1 677 0
 1202 0200 0320     		movs	r0, #3
 1203 0202 70BD     		pop	{r4, r5, r6, pc}
 1204              	.LVL140:
 1205              	.L106:
 687:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1206              		.loc 1 687 0
 1207 0204 0320     		movs	r0, #3
 1208 0206 70BD     		pop	{r4, r5, r6, pc}
 1209              	.LVL141:
 1210              	.L107:
 714:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1211              		.loc 1 714 0
 1212 0208 0120     		movs	r0, #1
 1213              	.LVL142:
 1214 020a 70BD     		pop	{r4, r5, r6, pc}
 1215              	.LVL143:
 1216              	.L108:
ARM GAS  /tmp/ccqd1Kqm.s 			page 49


 723:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1217              		.loc 1 723 0
 1218 020c 0120     		movs	r0, #1
 1219              	.LVL144:
 1220 020e 70BD     		pop	{r4, r5, r6, pc}
 1221              	.LVL145:
 1222              	.L109:
 732:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1223              		.loc 1 732 0
 1224 0210 0120     		movs	r0, #1
 1225              	.LVL146:
 1226 0212 70BD     		pop	{r4, r5, r6, pc}
 1227              	.LVL147:
 1228              	.L110:
 746:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 1229              		.loc 1 746 0
 1230 0214 0320     		movs	r0, #3
 1231 0216 70BD     		pop	{r4, r5, r6, pc}
 1232              	.LVL148:
 1233              	.L111:
 756:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 1234              		.loc 1 756 0
 1235 0218 0320     		movs	r0, #3
 1236 021a 70BD     		pop	{r4, r5, r6, pc}
 1237              	.LVL149:
 1238              	.L112:
 766:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1239              		.loc 1 766 0
 1240 021c 0320     		movs	r0, #3
 1241 021e 70BD     		pop	{r4, r5, r6, pc}
 1242              	.LVL150:
 1243              	.L113:
 779:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 1244              		.loc 1 779 0
 1245 0220 0120     		movs	r0, #1
 801:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1246              		.loc 1 801 0
 1247 0222 70BD     		pop	{r4, r5, r6, pc}
 1248              	.LVL151:
 1249              	.L118:
 1250              		.align	2
 1251              	.L117:
 1252 0224 003C0240 		.word	1073888256
 1253 0228 00380240 		.word	1073887232
 1254              		.cfi_endproc
 1255              	.LFE114:
 1257              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1258              		.align	2
 1259              		.global	HAL_RCC_MCOConfig
 1260              		.thumb
 1261              		.thumb_func
 1263              	HAL_RCC_MCOConfig:
 1264              	.LFB115:
 802:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 803:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 804:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 805:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccqd1Kqm.s 			page 50


 806:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 807:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Group2 Peripheral Control functions 
 808:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief   RCC clocks control functions 
 809:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 810:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim   
 811:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 812:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 813:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================  
 814:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 815:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 816:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     frequencies.
 817:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 818:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 819:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 820:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 821:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 822:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 823:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 824:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 825:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 826:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 827:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 828:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 829:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 830:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 831:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 832:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 833:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 834:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 835:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 836:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 837:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 838:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 839:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx prescaler.
 840:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 841:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 842:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 843:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 844:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 845:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 846:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 847:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 848:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 849:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1265              		.loc 1 849 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 24
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              	.LVL152:
 1270 0000 70B5     		push	{r4, r5, r6, lr}
 1271              	.LCFI2:
 1272              		.cfi_def_cfa_offset 16
 1273              		.cfi_offset 4, -16
 1274              		.cfi_offset 5, -12
 1275              		.cfi_offset 6, -8
 1276              		.cfi_offset 14, -4
 1277 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccqd1Kqm.s 			page 51


 1278              	.LCFI3:
 1279              		.cfi_def_cfa_offset 40
 1280 0004 0C46     		mov	r4, r1
 1281 0006 1646     		mov	r6, r2
 850:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 851:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 852:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 853:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 854:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* RCC_MCO1 */
 855:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1282              		.loc 1 855 0
 1283 0008 C8B9     		cbnz	r0, .L120
 856:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 857:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 858:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 859:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 860:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 1284              		.loc 1 860 0
 1285 000a 1B4D     		ldr	r5, .L123
 1286 000c 2B6B     		ldr	r3, [r5, #48]
 1287 000e 43F00103 		orr	r3, r3, #1
 1288 0012 2B63     		str	r3, [r5, #48]
 861:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 862:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configue the MCO1 pin in alternate function mode */    
 863:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 1289              		.loc 1 863 0
 1290 0014 4FF48073 		mov	r3, #256
 1291 0018 0193     		str	r3, [sp, #4]
 864:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1292              		.loc 1 864 0
 1293 001a 0223     		movs	r3, #2
 1294 001c 0293     		str	r3, [sp, #8]
 865:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1295              		.loc 1 865 0
 1296 001e 0323     		movs	r3, #3
 1297 0020 0493     		str	r3, [sp, #16]
 866:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1298              		.loc 1 866 0
 1299 0022 0023     		movs	r3, #0
 1300 0024 0393     		str	r3, [sp, #12]
 867:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1301              		.loc 1 867 0
 1302 0026 0593     		str	r3, [sp, #20]
 868:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1303              		.loc 1 868 0
 1304 0028 1448     		ldr	r0, .L123+4
 1305              	.LVL153:
 1306 002a 01A9     		add	r1, sp, #4
 1307              	.LVL154:
 1308 002c FFF7FEFF 		bl	HAL_GPIO_Init
 1309              	.LVL155:
 869:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 870:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 871:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 1310              		.loc 1 871 0
 1311 0030 AB68     		ldr	r3, [r5, #8]
 1312 0032 23F0EC63 		bic	r3, r3, #123731968
ARM GAS  /tmp/ccqd1Kqm.s 			page 52


 1313 0036 3443     		orrs	r4, r4, r6
 1314              	.LVL156:
 1315 0038 1C43     		orrs	r4, r4, r3
 1316 003a AC60     		str	r4, [r5, #8]
 1317 003c 19E0     		b	.L119
 1318              	.LVL157:
 1319              	.L120:
 872:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 873:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 874:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 875:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 876:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 877:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 878:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 1320              		.loc 1 878 0
 1321 003e 0E4D     		ldr	r5, .L123
 1322 0040 2B6B     		ldr	r3, [r5, #48]
 1323 0042 43F00403 		orr	r3, r3, #4
 1324 0046 2B63     		str	r3, [r5, #48]
 879:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 880:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configue the MCO2 pin in alternate function mode */
 881:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 1325              		.loc 1 881 0
 1326 0048 4FF40073 		mov	r3, #512
 1327 004c 0193     		str	r3, [sp, #4]
 882:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1328              		.loc 1 882 0
 1329 004e 0223     		movs	r3, #2
 1330 0050 0293     		str	r3, [sp, #8]
 883:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1331              		.loc 1 883 0
 1332 0052 0323     		movs	r3, #3
 1333 0054 0493     		str	r3, [sp, #16]
 884:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1334              		.loc 1 884 0
 1335 0056 0023     		movs	r3, #0
 1336 0058 0393     		str	r3, [sp, #12]
 885:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1337              		.loc 1 885 0
 1338 005a 0593     		str	r3, [sp, #20]
 886:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1339              		.loc 1 886 0
 1340 005c 0848     		ldr	r0, .L123+8
 1341              	.LVL158:
 1342 005e 01A9     		add	r1, sp, #4
 1343              	.LVL159:
 1344 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 1345              	.LVL160:
 887:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 888:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 889:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 1346              		.loc 1 889 0
 1347 0064 AB68     		ldr	r3, [r5, #8]
 1348 0066 23F07843 		bic	r3, r3, #-134217728
 1349 006a 44EAC604 		orr	r4, r4, r6, lsl #3
 1350              	.LVL161:
 1351 006e 1C43     		orrs	r4, r4, r3
ARM GAS  /tmp/ccqd1Kqm.s 			page 53


 1352 0070 AC60     		str	r4, [r5, #8]
 1353              	.L119:
 890:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 891:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1354              		.loc 1 891 0
 1355 0072 06B0     		add	sp, sp, #24
 1356              	.LCFI4:
 1357              		.cfi_def_cfa_offset 16
 1358              		@ sp needed
 1359 0074 70BD     		pop	{r4, r5, r6, pc}
 1360              	.LVL162:
 1361              	.L124:
 1362 0076 00BF     		.align	2
 1363              	.L123:
 1364 0078 00380240 		.word	1073887232
 1365 007c 00000240 		.word	1073872896
 1366 0080 00080240 		.word	1073874944
 1367              		.cfi_endproc
 1368              	.LFE115:
 1370              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1371              		.align	2
 1372              		.global	HAL_RCC_EnableCSS
 1373              		.thumb
 1374              		.thumb_func
 1376              	HAL_RCC_EnableCSS:
 1377              	.LFB116:
 892:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 893:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 894:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 895:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 896:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 897:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 898:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 899:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 900:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 901:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 902:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 903:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 904:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1378              		.loc 1 904 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 905:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)ENABLE;
 1383              		.loc 1 905 0
 1384 0000 0122     		movs	r2, #1
 1385 0002 014B     		ldr	r3, .L126
 1386 0004 1A60     		str	r2, [r3]
 1387 0006 7047     		bx	lr
 1388              	.L127:
 1389              		.align	2
 1390              	.L126:
 1391 0008 4C004742 		.word	1111949388
 1392              		.cfi_endproc
 1393              	.LFE116:
 1395              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
ARM GAS  /tmp/ccqd1Kqm.s 			page 54


 1396              		.align	2
 1397              		.global	HAL_RCC_DisableCSS
 1398              		.thumb
 1399              		.thumb_func
 1401              	HAL_RCC_DisableCSS:
 1402              	.LFB117:
 906:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 907:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 908:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 909:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 910:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 911:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 912:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 913:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 914:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1403              		.loc 1 914 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              		@ link register save eliminated.
 915:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)DISABLE;
 1408              		.loc 1 915 0
 1409 0000 0022     		movs	r2, #0
 1410 0002 014B     		ldr	r3, .L129
 1411 0004 1A60     		str	r2, [r3]
 1412 0006 7047     		bx	lr
 1413              	.L130:
 1414              		.align	2
 1415              	.L129:
 1416 0008 4C004742 		.word	1111949388
 1417              		.cfi_endproc
 1418              	.LFE117:
 1420              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1421              		.align	2
 1422              		.global	HAL_RCC_GetSysClockFreq
 1423              		.thumb
 1424              		.thumb_func
 1426              	HAL_RCC_GetSysClockFreq:
 1427              	.LFB118:
 916:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 917:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 918:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 919:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 920:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *        
 921:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 922:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 923:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         constant and the selected clock source:
 924:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 925:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 926:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 927:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 928:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 929:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 930:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               in voltage and temperature.
 931:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 932:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 933:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
ARM GAS  /tmp/ccqd1Kqm.s 			page 55


 934:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                have wrong result.
 935:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                  
 936:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 937:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         value for HSE crystal.
 938:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 939:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
 940:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 941:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 942:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 943:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 944:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         
 945:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               
 946:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 947:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval SYSCLK frequency
 948:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 949:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 950:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1428              		.loc 1 950 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
 1433              	.LVL163:
 951:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t pllm = 0, pllvco = 0, pllp = 0;
 952:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t sysclockfreq = 0;
 953:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 954:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 955:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1434              		.loc 1 955 0
 1435 0000 274B     		ldr	r3, .L138
 1436 0002 9B68     		ldr	r3, [r3, #8]
 1437 0004 03F00C03 		and	r3, r3, #12
 1438 0008 042B     		cmp	r3, #4
 1439 000a 46D0     		beq	.L137
 1440 000c 082B     		cmp	r3, #8
 1441 000e 01D0     		beq	.L134
 956:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 957:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
 958:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 959:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1442              		.loc 1 959 0
 1443 0010 2448     		ldr	r0, .L138+4
 1444 0012 7047     		bx	lr
 1445              	.L134:
 960:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        break;
 961:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 962:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
 963:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 964:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 965:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 966:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 967:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
 968:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 969:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 970:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
 971:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1446              		.loc 1 971 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 56


 1447 0014 224B     		ldr	r3, .L138
 1448 0016 5868     		ldr	r0, [r3, #4]
 1449 0018 00F03F00 		and	r0, r0, #63
 1450              	.LVL164:
 972:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if (__RCC_PLLSRC() != 0)
 1451              		.loc 1 972 0
 1452 001c 5968     		ldr	r1, [r3, #4]
 1453 001e 01F48001 		and	r1, r1, #4194304
 1454              	.LVL165:
 1455              	.LBB86:
 1456              	.LBB87:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1457              		.loc 2 491 0
 1458 0022 4FF48002 		mov	r2, #4194304
 1459              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1460 0026 92FAA2F2 		rbit r2, r2
 1461              	@ 0 "" 2
 1462              	.LVL166:
 1463              		.thumb
 1464              	.LBE87:
 1465              	.LBE86:
 1466              	.LBB88:
 1467              	.LBB89:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1468              		.loc 2 666 0
 1469              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1470 002a B2FA82F2 		clz r2, r2
 1471              	@ 0 "" 2
 1472              	.LVL167:
 1473              		.loc 2 667 0
 1474              		.thumb
 1475 002e D2B2     		uxtb	r2, r2
 1476              	.LVL168:
 1477              	.LBE89:
 1478              	.LBE88:
 1479              		.loc 1 972 0
 1480 0030 31FA02F3 		lsrs	r3, r1, r2
 1481 0034 10D0     		beq	.L135
 973:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 974:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSE used as PLL clock source */
 975:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1482              		.loc 1 975 0
 1483 0036 1C4B     		ldr	r3, .L138+8
 1484 0038 B3FBF0F3 		udiv	r3, r3, r0
 1485 003c 184A     		ldr	r2, .L138
 1486 003e 5068     		ldr	r0, [r2, #4]
 1487              	.LVL169:
 1488 0040 47F6C072 		movw	r2, #32704
 1489 0044 1040     		ands	r0, r0, r2
 1490              	.LVL170:
 1491              	.LBB90:
 1492              	.LBB91:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1493              		.loc 2 491 0
 1494              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1495 0046 92FAA2F2 		rbit r2, r2
 1496              	@ 0 "" 2
ARM GAS  /tmp/ccqd1Kqm.s 			page 57


 1497              	.LVL171:
 1498              		.thumb
 1499              	.LBE91:
 1500              	.LBE90:
 1501              	.LBB92:
 1502              	.LBB93:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1503              		.loc 2 666 0
 1504              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1505 004a B2FA82F2 		clz r2, r2
 1506              	@ 0 "" 2
 1507              	.LVL172:
 1508              		.loc 2 667 0
 1509              		.thumb
 1510 004e D2B2     		uxtb	r2, r2
 1511              	.LVL173:
 1512              	.LBE93:
 1513              	.LBE92:
 1514              		.loc 1 975 0
 1515 0050 D040     		lsrs	r0, r0, r2
 1516 0052 00FB03F3 		mul	r3, r0, r3
 1517              	.LVL174:
 1518 0056 0FE0     		b	.L136
 1519              	.LVL175:
 1520              	.L135:
 976:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 977:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 978:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 979:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSI used as PLL clock source */
 980:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1521              		.loc 1 980 0
 1522 0058 124B     		ldr	r3, .L138+4
 1523 005a B3FBF0F3 		udiv	r3, r3, r0
 1524 005e 104A     		ldr	r2, .L138
 1525 0060 5068     		ldr	r0, [r2, #4]
 1526              	.LVL176:
 1527 0062 47F6C072 		movw	r2, #32704
 1528 0066 1040     		ands	r0, r0, r2
 1529              	.LVL177:
 1530              	.LBB94:
 1531              	.LBB95:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1532              		.loc 2 491 0
 1533              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1534 0068 92FAA2F2 		rbit r2, r2
 1535              	@ 0 "" 2
 1536              	.LVL178:
 1537              		.thumb
 1538              	.LBE95:
 1539              	.LBE94:
 1540              	.LBB96:
 1541              	.LBB97:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1542              		.loc 2 666 0
 1543              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1544 006c B2FA82F2 		clz r2, r2
 1545              	@ 0 "" 2
ARM GAS  /tmp/ccqd1Kqm.s 			page 58


 1546              	.LVL179:
 1547              		.loc 2 667 0
 1548              		.thumb
 1549 0070 D2B2     		uxtb	r2, r2
 1550              	.LVL180:
 1551              	.LBE97:
 1552              	.LBE96:
 1553              		.loc 1 980 0
 1554 0072 D040     		lsrs	r0, r0, r2
 1555 0074 00FB03F3 		mul	r3, r0, r3
 1556              	.LVL181:
 1557              	.L136:
 981:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 982:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 1558              		.loc 1 982 0
 1559 0078 094A     		ldr	r2, .L138
 1560 007a 5068     		ldr	r0, [r2, #4]
 1561 007c 00F44030 		and	r0, r0, #196608
 1562              	.LVL182:
 1563              	.LBB98:
 1564              	.LBB99:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1565              		.loc 2 491 0
 1566 0080 4FF44032 		mov	r2, #196608
 1567              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1568 0084 92FAA2F2 		rbit r2, r2
 1569              	@ 0 "" 2
 1570              	.LVL183:
 1571              		.thumb
 1572              	.LBE99:
 1573              	.LBE98:
 1574              	.LBB100:
 1575              	.LBB101:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1576              		.loc 2 666 0
 1577              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1578 0088 B2FA82F2 		clz r2, r2
 1579              	@ 0 "" 2
 1580              	.LVL184:
 1581              		.loc 2 667 0
 1582              		.thumb
 1583 008c D2B2     		uxtb	r2, r2
 1584              	.LVL185:
 1585              	.LBE101:
 1586              	.LBE100:
 1587              		.loc 1 982 0
 1588 008e D040     		lsrs	r0, r0, r2
 1589 0090 0130     		adds	r0, r0, #1
 1590 0092 4000     		lsls	r0, r0, #1
 1591              	.LVL186:
 983:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 984:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 1592              		.loc 1 984 0
 1593 0094 B3FBF0F0 		udiv	r0, r3, r0
 1594              	.LVL187:
 985:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1595              		.loc 1 985 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 59


 1596 0098 7047     		bx	lr
 1597              	.LVL188:
 1598              	.L137:
 964:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1599              		.loc 1 964 0
 1600 009a 0348     		ldr	r0, .L138+8
 1601              	.LVL189:
 986:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 987:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     default:
 988:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 989:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 990:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 991:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 992:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 993:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return sysclockfreq;
 994:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1602              		.loc 1 994 0
 1603 009c 7047     		bx	lr
 1604              	.L139:
 1605 009e 00BF     		.align	2
 1606              	.L138:
 1607 00a0 00380240 		.word	1073887232
 1608 00a4 0024F400 		.word	16000000
 1609 00a8 00127A00 		.word	8000000
 1610              		.cfi_endproc
 1611              	.LFE118:
 1613              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1614              		.align	2
 1615              		.global	HAL_RCC_GetHCLKFreq
 1616              		.thumb
 1617              		.thumb_func
 1619              	HAL_RCC_GetHCLKFreq:
 1620              	.LFB119:
 995:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 996:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 997:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
 998:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
 999:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1000:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
1001:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1002:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated within this function
1003:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
1004:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HCLK frequency
1005:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1006:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1007:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1621              		.loc 1 1007 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 0
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 1625 0000 08B5     		push	{r3, lr}
 1626              	.LCFI5:
 1627              		.cfi_def_cfa_offset 8
 1628              		.cfi_offset 3, -8
 1629              		.cfi_offset 14, -4
1008:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POS
 1630              		.loc 1 1008 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 60


 1631 0002 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1632              	.LVL190:
 1633 0006 094B     		ldr	r3, .L142
 1634 0008 9B68     		ldr	r3, [r3, #8]
 1635 000a 03F0F002 		and	r2, r3, #240
 1636              	.LVL191:
 1637              	.LBB102:
 1638              	.LBB103:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1639              		.loc 2 491 0
 1640 000e F023     		movs	r3, #240
 1641              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1642 0010 93FAA3F3 		rbit r3, r3
 1643              	@ 0 "" 2
 1644              	.LVL192:
 1645              		.thumb
 1646              	.LBE103:
 1647              	.LBE102:
 1648              	.LBB104:
 1649              	.LBB105:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1650              		.loc 2 666 0
 1651              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1652 0014 B3FA83F3 		clz r3, r3
 1653              	@ 0 "" 2
 1654              	.LVL193:
 1655              		.loc 2 667 0
 1656              		.thumb
 1657 0018 DBB2     		uxtb	r3, r3
 1658              	.LVL194:
 1659              	.LBE105:
 1660              	.LBE104:
 1661              		.loc 1 1008 0
 1662 001a 22FA03F3 		lsr	r3, r2, r3
 1663 001e 044A     		ldr	r2, .L142+4
 1664 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1665 0022 D840     		lsrs	r0, r0, r3
 1666 0024 034B     		ldr	r3, .L142+8
 1667 0026 1860     		str	r0, [r3]
1009:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return SystemCoreClock;
1010:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1668              		.loc 1 1010 0
 1669 0028 08BD     		pop	{r3, pc}
 1670              	.L143:
 1671 002a 00BF     		.align	2
 1672              	.L142:
 1673 002c 00380240 		.word	1073887232
 1674 0030 00000000 		.word	.LANCHOR0
 1675 0034 00000000 		.word	SystemCoreClock
 1676              		.cfi_endproc
 1677              	.LFE119:
 1679              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1680              		.align	2
 1681              		.global	HAL_RCC_GetPCLK1Freq
 1682              		.thumb
 1683              		.thumb_func
 1685              	HAL_RCC_GetPCLK1Freq:
ARM GAS  /tmp/ccqd1Kqm.s 			page 61


 1686              	.LFB120:
1011:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1012:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1013:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1014:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1015:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1016:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
1017:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK1 frequency
1018:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1019:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1020:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {  
 1687              		.loc 1 1020 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691 0000 08B5     		push	{r3, lr}
 1692              	.LCFI6:
 1693              		.cfi_def_cfa_offset 8
 1694              		.cfi_offset 3, -8
 1695              		.cfi_offset 14, -4
1021:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1022:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC
 1696              		.loc 1 1022 0
 1697 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1698              	.LVL195:
 1699 0006 084B     		ldr	r3, .L146
 1700 0008 9B68     		ldr	r3, [r3, #8]
 1701 000a 03F4E052 		and	r2, r3, #7168
 1702              	.LVL196:
 1703              	.LBB106:
 1704              	.LBB107:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1705              		.loc 2 491 0
 1706 000e 4FF4E053 		mov	r3, #7168
 1707              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1708 0012 93FAA3F3 		rbit r3, r3
 1709              	@ 0 "" 2
 1710              	.LVL197:
 1711              		.thumb
 1712              	.LBE107:
 1713              	.LBE106:
 1714              	.LBB108:
 1715              	.LBB109:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1716              		.loc 2 666 0
 1717              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1718 0016 B3FA83F3 		clz r3, r3
 1719              	@ 0 "" 2
 1720              	.LVL198:
 1721              		.loc 2 667 0
 1722              		.thumb
 1723 001a DBB2     		uxtb	r3, r3
 1724              	.LVL199:
 1725              	.LBE109:
 1726              	.LBE108:
 1727              		.loc 1 1022 0
 1728 001c 22FA03F3 		lsr	r3, r2, r3
ARM GAS  /tmp/ccqd1Kqm.s 			page 62


 1729 0020 024A     		ldr	r2, .L146+4
 1730 0022 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1023:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1731              		.loc 1 1023 0
 1732 0024 D840     		lsrs	r0, r0, r3
 1733 0026 08BD     		pop	{r3, pc}
 1734              	.L147:
 1735              		.align	2
 1736              	.L146:
 1737 0028 00380240 		.word	1073887232
 1738 002c 00000000 		.word	.LANCHOR0
 1739              		.cfi_endproc
 1740              	.LFE120:
 1742              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1743              		.align	2
 1744              		.global	HAL_RCC_GetPCLK2Freq
 1745              		.thumb
 1746              		.thumb_func
 1748              	HAL_RCC_GetPCLK2Freq:
 1749              	.LFB121:
1024:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1025:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1026:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1027:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1028:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1029:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
1030:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK2 frequency
1031:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1032:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1033:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1750              		.loc 1 1033 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 0
 1753              		@ frame_needed = 0, uses_anonymous_args = 0
 1754 0000 08B5     		push	{r3, lr}
 1755              	.LCFI7:
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 3, -8
 1758              		.cfi_offset 14, -4
1034:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1035:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_
 1759              		.loc 1 1035 0
 1760 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1761              	.LVL200:
 1762 0006 084B     		ldr	r3, .L150
 1763 0008 9B68     		ldr	r3, [r3, #8]
 1764 000a 03F46042 		and	r2, r3, #57344
 1765              	.LVL201:
 1766              	.LBB110:
 1767              	.LBB111:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1768              		.loc 2 491 0
 1769 000e 4FF46043 		mov	r3, #57344
 1770              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1771 0012 93FAA3F3 		rbit r3, r3
 1772              	@ 0 "" 2
 1773              	.LVL202:
ARM GAS  /tmp/ccqd1Kqm.s 			page 63


 1774              		.thumb
 1775              	.LBE111:
 1776              	.LBE110:
 1777              	.LBB112:
 1778              	.LBB113:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1779              		.loc 2 666 0
 1780              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1781 0016 B3FA83F3 		clz r3, r3
 1782              	@ 0 "" 2
 1783              	.LVL203:
 1784              		.loc 2 667 0
 1785              		.thumb
 1786 001a DBB2     		uxtb	r3, r3
 1787              	.LVL204:
 1788              	.LBE113:
 1789              	.LBE112:
 1790              		.loc 1 1035 0
 1791 001c 22FA03F3 		lsr	r3, r2, r3
 1792 0020 024A     		ldr	r2, .L150+4
 1793 0022 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1036:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** } 
 1794              		.loc 1 1036 0
 1795 0024 D840     		lsrs	r0, r0, r3
 1796 0026 08BD     		pop	{r3, pc}
 1797              	.L151:
 1798              		.align	2
 1799              	.L150:
 1800 0028 00380240 		.word	1073887232
 1801 002c 00000000 		.word	.LANCHOR0
 1802              		.cfi_endproc
 1803              	.LFE121:
 1805              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1806              		.align	2
 1807              		.global	HAL_RCC_GetOscConfig
 1808              		.thumb
 1809              		.thumb_func
 1811              	HAL_RCC_GetOscConfig:
 1812              	.LFB122:
1037:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1038:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1039:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1040:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1041:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
1042:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1043:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1044:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1045:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1046:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1813              		.loc 1 1046 0
 1814              		.cfi_startproc
 1815              		@ args = 0, pretend = 0, frame = 0
 1816              		@ frame_needed = 0, uses_anonymous_args = 0
 1817              		@ link register save eliminated.
 1818              	.LVL205:
1047:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1048:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
ARM GAS  /tmp/ccqd1Kqm.s 			page 64


 1819              		.loc 1 1048 0
 1820 0000 0F23     		movs	r3, #15
 1821 0002 0360     		str	r3, [r0]
1049:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1050:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1051:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1822              		.loc 1 1051 0
 1823 0004 3F4B     		ldr	r3, .L165
 1824 0006 1B68     		ldr	r3, [r3]
 1825 0008 13F4802F 		tst	r3, #262144
 1826 000c 02D0     		beq	.L153
1052:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1053:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1827              		.loc 1 1053 0
 1828 000e 0523     		movs	r3, #5
 1829 0010 4360     		str	r3, [r0, #4]
 1830 0012 09E0     		b	.L154
 1831              	.L153:
1054:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1055:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1832              		.loc 1 1055 0
 1833 0014 3B4B     		ldr	r3, .L165
 1834 0016 1B68     		ldr	r3, [r3]
 1835 0018 13F4803F 		tst	r3, #65536
 1836 001c 02D0     		beq	.L155
1056:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1057:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1837              		.loc 1 1057 0
 1838 001e 0123     		movs	r3, #1
 1839 0020 4360     		str	r3, [r0, #4]
 1840 0022 01E0     		b	.L154
 1841              	.L155:
1058:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1059:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1060:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1061:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1842              		.loc 1 1061 0
 1843 0024 0023     		movs	r3, #0
 1844 0026 4360     		str	r3, [r0, #4]
 1845              	.L154:
1062:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1063:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1064:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1065:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1846              		.loc 1 1065 0
 1847 0028 364B     		ldr	r3, .L165
 1848 002a 1B68     		ldr	r3, [r3]
 1849 002c 13F0010F 		tst	r3, #1
 1850 0030 02D0     		beq	.L156
1066:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1067:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1851              		.loc 1 1067 0
 1852 0032 0123     		movs	r3, #1
 1853 0034 C360     		str	r3, [r0, #12]
 1854 0036 01E0     		b	.L157
 1855              	.L156:
1068:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccqd1Kqm.s 			page 65


1069:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1070:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1071:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1856              		.loc 1 1071 0
 1857 0038 0023     		movs	r3, #0
 1858 003a C360     		str	r3, [r0, #12]
 1859              	.L157:
1072:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1073:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1074:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC
 1860              		.loc 1 1074 0
 1861 003c 3149     		ldr	r1, .L165
 1862 003e 0B68     		ldr	r3, [r1]
 1863 0040 03F0F802 		and	r2, r3, #248
 1864              	.LVL206:
 1865              	.LBB114:
 1866              	.LBB115:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1867              		.loc 2 491 0
 1868 0044 F823     		movs	r3, #248
 1869              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1870 0046 93FAA3F3 		rbit r3, r3
 1871              	@ 0 "" 2
 1872              	.LVL207:
 1873              		.thumb
 1874              	.LBE115:
 1875              	.LBE114:
 1876              	.LBB116:
 1877              	.LBB117:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1878              		.loc 2 666 0
 1879              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1880 004a B3FA83F3 		clz r3, r3
 1881              	@ 0 "" 2
 1882              	.LVL208:
 1883              		.loc 2 667 0
 1884              		.thumb
 1885 004e DBB2     		uxtb	r3, r3
 1886              	.LVL209:
 1887              	.LBE117:
 1888              	.LBE116:
 1889              		.loc 1 1074 0
 1890 0050 22FA03F3 		lsr	r3, r2, r3
 1891 0054 0361     		str	r3, [r0, #16]
1075:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1076:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1077:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1892              		.loc 1 1077 0
 1893 0056 0B6F     		ldr	r3, [r1, #112]
 1894 0058 13F0040F 		tst	r3, #4
 1895 005c 02D0     		beq	.L158
1078:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1079:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1896              		.loc 1 1079 0
 1897 005e 0523     		movs	r3, #5
 1898 0060 8360     		str	r3, [r0, #8]
 1899 0062 09E0     		b	.L159
ARM GAS  /tmp/ccqd1Kqm.s 			page 66


 1900              	.L158:
1080:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1081:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1901              		.loc 1 1081 0
 1902 0064 274B     		ldr	r3, .L165
 1903 0066 1B6F     		ldr	r3, [r3, #112]
 1904 0068 13F0010F 		tst	r3, #1
 1905 006c 02D0     		beq	.L160
1082:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1083:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 1906              		.loc 1 1083 0
 1907 006e 0123     		movs	r3, #1
 1908 0070 8360     		str	r3, [r0, #8]
 1909 0072 01E0     		b	.L159
 1910              	.L160:
1084:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1085:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1086:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1087:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 1911              		.loc 1 1087 0
 1912 0074 0023     		movs	r3, #0
 1913 0076 8360     		str	r3, [r0, #8]
 1914              	.L159:
1088:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1089:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1090:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1091:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 1915              		.loc 1 1091 0
 1916 0078 224B     		ldr	r3, .L165
 1917 007a 5B6F     		ldr	r3, [r3, #116]
 1918 007c 13F0010F 		tst	r3, #1
 1919 0080 02D0     		beq	.L161
1092:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1093:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1920              		.loc 1 1093 0
 1921 0082 0123     		movs	r3, #1
 1922 0084 4361     		str	r3, [r0, #20]
 1923 0086 01E0     		b	.L162
 1924              	.L161:
1094:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1095:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1096:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1097:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 1925              		.loc 1 1097 0
 1926 0088 0023     		movs	r3, #0
 1927 008a 4361     		str	r3, [r0, #20]
 1928              	.L162:
1098:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1099:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1100:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1101:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1929              		.loc 1 1101 0
 1930 008c 1D4B     		ldr	r3, .L165
 1931 008e 1B68     		ldr	r3, [r3]
 1932 0090 13F0807F 		tst	r3, #16777216
 1933 0094 02D0     		beq	.L163
1102:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
ARM GAS  /tmp/ccqd1Kqm.s 			page 67


1103:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 1934              		.loc 1 1103 0
 1935 0096 0223     		movs	r3, #2
 1936 0098 8361     		str	r3, [r0, #24]
 1937 009a 01E0     		b	.L164
 1938              	.L163:
1104:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1105:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1106:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1107:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1939              		.loc 1 1107 0
 1940 009c 0123     		movs	r3, #1
 1941 009e 8361     		str	r3, [r0, #24]
 1942              	.L164:
1108:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1109:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 1943              		.loc 1 1109 0
 1944 00a0 1849     		ldr	r1, .L165
 1945 00a2 4B68     		ldr	r3, [r1, #4]
 1946 00a4 03F48003 		and	r3, r3, #4194304
 1947 00a8 C361     		str	r3, [r0, #28]
1110:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 1948              		.loc 1 1110 0
 1949 00aa 4B68     		ldr	r3, [r1, #4]
 1950 00ac 03F03F03 		and	r3, r3, #63
 1951 00b0 0362     		str	r3, [r0, #32]
1111:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 1952              		.loc 1 1111 0
 1953 00b2 4A68     		ldr	r2, [r1, #4]
 1954 00b4 47F6C073 		movw	r3, #32704
 1955 00b8 1A40     		ands	r2, r2, r3
 1956              	.LVL210:
 1957              	.LBB118:
 1958              	.LBB119:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1959              		.loc 2 491 0
 1960              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1961 00ba 93FAA3F3 		rbit r3, r3
 1962              	@ 0 "" 2
 1963              	.LVL211:
 1964              		.thumb
 1965              	.LBE119:
 1966              	.LBE118:
 1967              	.LBB120:
 1968              	.LBB121:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1969              		.loc 2 666 0
 1970              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1971 00be B3FA83F3 		clz r3, r3
 1972              	@ 0 "" 2
 1973              	.LVL212:
 1974              		.loc 2 667 0
 1975              		.thumb
 1976 00c2 DBB2     		uxtb	r3, r3
 1977              	.LVL213:
 1978              	.LBE121:
 1979              	.LBE120:
ARM GAS  /tmp/ccqd1Kqm.s 			page 68


 1980              		.loc 1 1111 0
 1981 00c4 22FA03F3 		lsr	r3, r2, r3
 1982 00c8 4362     		str	r3, [r0, #36]
1112:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 1983              		.loc 1 1112 0
 1984 00ca 4B68     		ldr	r3, [r1, #4]
 1985 00cc 03F44033 		and	r3, r3, #196608
 1986 00d0 03F58033 		add	r3, r3, #65536
 1987 00d4 5B00     		lsls	r3, r3, #1
 1988              	.LVL214:
 1989              	.LBB122:
 1990              	.LBB123:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1991              		.loc 2 491 0
 1992 00d6 4FF44032 		mov	r2, #196608
 1993              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1994 00da 92FAA2F2 		rbit r2, r2
 1995              	@ 0 "" 2
 1996              	.LVL215:
 1997              		.thumb
 1998              	.LBE123:
 1999              	.LBE122:
 2000              	.LBB124:
 2001              	.LBB125:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 2002              		.loc 2 666 0
 2003              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2004 00de B2FA82F2 		clz r2, r2
 2005              	@ 0 "" 2
 2006              	.LVL216:
 2007              		.loc 2 667 0
 2008              		.thumb
 2009 00e2 D2B2     		uxtb	r2, r2
 2010              	.LVL217:
 2011              	.LBE125:
 2012              	.LBE124:
 2013              		.loc 1 1112 0
 2014 00e4 D340     		lsrs	r3, r3, r2
 2015 00e6 8362     		str	r3, [r0, #40]
1113:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PL
 2016              		.loc 1 1113 0
 2017 00e8 4B68     		ldr	r3, [r1, #4]
 2018 00ea 03F07062 		and	r2, r3, #251658240
 2019              	.LVL218:
 2020              	.LBB126:
 2021              	.LBB127:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 2022              		.loc 2 491 0
 2023 00ee 4FF07063 		mov	r3, #251658240
 2024              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2025 00f2 93FAA3F3 		rbit r3, r3
 2026              	@ 0 "" 2
 2027              	.LVL219:
 2028              		.thumb
 2029              	.LBE127:
 2030              	.LBE126:
 2031              	.LBB128:
ARM GAS  /tmp/ccqd1Kqm.s 			page 69


 2032              	.LBB129:
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 2033              		.loc 2 666 0
 2034              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2035 00f6 B3FA83F3 		clz r3, r3
 2036              	@ 0 "" 2
 2037              	.LVL220:
 2038              		.loc 2 667 0
 2039              		.thumb
 2040 00fa DBB2     		uxtb	r3, r3
 2041              	.LVL221:
 2042              	.LBE129:
 2043              	.LBE128:
 2044              		.loc 1 1113 0
 2045 00fc 22FA03F3 		lsr	r3, r2, r3
 2046 0100 C362     		str	r3, [r0, #44]
 2047 0102 7047     		bx	lr
 2048              	.L166:
 2049              		.align	2
 2050              	.L165:
 2051 0104 00380240 		.word	1073887232
 2052              		.cfi_endproc
 2053              	.LFE122:
 2055              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2056              		.align	2
 2057              		.global	HAL_RCC_GetClockConfig
 2058              		.thumb
 2059              		.thumb_func
 2061              	HAL_RCC_GetClockConfig:
 2062              	.LFB123:
1114:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
1115:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1116:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1117:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal 
1118:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1119:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_ClkInitTypeDef structure that 
1120:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1121:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
1122:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1123:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1124:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1125:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2063              		.loc 1 1125 0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 0
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 2067              		@ link register save eliminated.
 2068              	.LVL222:
1126:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1127:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2069              		.loc 1 1127 0
 2070 0000 0F23     		movs	r3, #15
 2071 0002 0360     		str	r3, [r0]
1128:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    
1129:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1130:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2072              		.loc 1 1130 0
ARM GAS  /tmp/ccqd1Kqm.s 			page 70


 2073 0004 0B4B     		ldr	r3, .L168
 2074 0006 9A68     		ldr	r2, [r3, #8]
 2075 0008 02F00302 		and	r2, r2, #3
 2076 000c 4260     		str	r2, [r0, #4]
1131:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1132:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1133:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2077              		.loc 1 1133 0
 2078 000e 9A68     		ldr	r2, [r3, #8]
 2079 0010 02F0F002 		and	r2, r2, #240
 2080 0014 8260     		str	r2, [r0, #8]
1134:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1135:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1136:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 2081              		.loc 1 1136 0
 2082 0016 9A68     		ldr	r2, [r3, #8]
 2083 0018 02F4E052 		and	r2, r2, #7168
 2084 001c C260     		str	r2, [r0, #12]
1137:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1138:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1139:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2085              		.loc 1 1139 0
 2086 001e 9B68     		ldr	r3, [r3, #8]
 2087 0020 03F46043 		and	r3, r3, #57344
 2088 0024 DB08     		lsrs	r3, r3, #3
 2089 0026 0361     		str	r3, [r0, #16]
1140:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1141:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1142:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2090              		.loc 1 1142 0
 2091 0028 034B     		ldr	r3, .L168+4
 2092 002a 1B68     		ldr	r3, [r3]
 2093 002c 03F00F03 		and	r3, r3, #15
 2094 0030 0B60     		str	r3, [r1]
 2095 0032 7047     		bx	lr
 2096              	.L169:
 2097              		.align	2
 2098              	.L168:
 2099 0034 00380240 		.word	1073887232
 2100 0038 003C0240 		.word	1073888256
 2101              		.cfi_endproc
 2102              	.LFE123:
 2104              		.section	.text.HAL_RCC_CCSCallback,"ax",%progbits
 2105              		.align	2
 2106              		.weak	HAL_RCC_CCSCallback
 2107              		.thumb
 2108              		.thumb_func
 2110              	HAL_RCC_CCSCallback:
 2111              	.LFB125:
1143:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
1144:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1145:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1146:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1147:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1148:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param None
1149:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1150:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccqd1Kqm.s 			page 71


1151:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
1153:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
1155:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1156:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_RCC_CCSCallback();
1158:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1159:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
1161:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1162:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
1163:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1164:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1166:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  none 
1167:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval none
1168:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1169:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_CCSCallback(void)
1170:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2112              		.loc 1 1170 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              		@ link register save eliminated.
 2117 0000 7047     		bx	lr
 2118              		.cfi_endproc
 2119              	.LFE125:
 2121 0002 00BF     		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2122              		.align	2
 2123              		.global	HAL_RCC_NMI_IRQHandler
 2124              		.thumb
 2125              		.thumb_func
 2127              	HAL_RCC_NMI_IRQHandler:
 2128              	.LFB124:
1152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 2129              		.loc 1 1152 0
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 0
 2132              		@ frame_needed = 0, uses_anonymous_args = 0
1152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 2133              		.loc 1 1152 0
 2134 0000 08B5     		push	{r3, lr}
 2135              	.LCFI8:
 2136              		.cfi_def_cfa_offset 8
 2137              		.cfi_offset 3, -8
 2138              		.cfi_offset 14, -4
1154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 2139              		.loc 1 1154 0
 2140 0002 054B     		ldr	r3, .L174
 2141 0004 DB68     		ldr	r3, [r3, #12]
 2142 0006 13F0800F 		tst	r3, #128
 2143 000a 04D0     		beq	.L171
1157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 2144              		.loc 1 1157 0
 2145 000c FFF7FEFF 		bl	HAL_RCC_CCSCallback
 2146              	.LVL223:
ARM GAS  /tmp/ccqd1Kqm.s 			page 72


1160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 2147              		.loc 1 1160 0
 2148 0010 8022     		movs	r2, #128
 2149 0012 024B     		ldr	r3, .L174+4
 2150 0014 1A70     		strb	r2, [r3]
 2151              	.L171:
 2152 0016 08BD     		pop	{r3, pc}
 2153              	.L175:
 2154              		.align	2
 2155              	.L174:
 2156 0018 00380240 		.word	1073887232
 2157 001c 0E380240 		.word	1073887246
 2158              		.cfi_endproc
 2159              	.LFE124:
 2161              		.global	APBAHBPrescTable
 2162              		.section	.rodata.APBAHBPrescTable,"a",%progbits
 2163              		.align	2
 2164              		.set	.LANCHOR0,. + 0
 2167              	APBAHBPrescTable:
 2168 0000 00       		.byte	0
 2169 0001 00       		.byte	0
 2170 0002 00       		.byte	0
 2171 0003 00       		.byte	0
 2172 0004 01       		.byte	1
 2173 0005 02       		.byte	2
 2174 0006 03       		.byte	3
 2175 0007 04       		.byte	4
 2176 0008 01       		.byte	1
 2177 0009 02       		.byte	2
 2178 000a 03       		.byte	3
 2179 000b 04       		.byte	4
 2180 000c 06       		.byte	6
 2181 000d 07       		.byte	7
 2182 000e 08       		.byte	8
 2183 000f 09       		.byte	9
 2184              		.text
 2185              	.Letext0:
 2186              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2187              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2188              		.file 5 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2189              		.file 6 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2190              		.file 7 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2191              		.file 8 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2192              		.file 9 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2193              		.file 10 "../Drivers/CMSIS/Include/core_cm4.h"
 2194              		.file 11 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2195              		.file 12 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccqd1Kqm.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_rcc.c
     /tmp/ccqd1Kqm.s:21     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccqd1Kqm.s:26     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccqd1Kqm.s:71     .text.HAL_RCC_DeInit:0000000000000044 $d
     /tmp/ccqd1Kqm.s:77     .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccqd1Kqm.s:82     .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccqd1Kqm.s:581    .text.HAL_RCC_OscConfig:00000000000002b4 $d
     /tmp/ccqd1Kqm.s:591    .text.HAL_RCC_OscConfig:00000000000002d0 $t
     /tmp/ccqd1Kqm.s:852    .text.HAL_RCC_OscConfig:00000000000003cc $d
     /tmp/ccqd1Kqm.s:858    .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccqd1Kqm.s:863    .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccqd1Kqm.s:1252   .text.HAL_RCC_ClockConfig:0000000000000224 $d
     /tmp/ccqd1Kqm.s:1258   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1263   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccqd1Kqm.s:1364   .text.HAL_RCC_MCOConfig:0000000000000078 $d
     /tmp/ccqd1Kqm.s:1371   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1376   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccqd1Kqm.s:1391   .text.HAL_RCC_EnableCSS:0000000000000008 $d
     /tmp/ccqd1Kqm.s:1396   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1401   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccqd1Kqm.s:1416   .text.HAL_RCC_DisableCSS:0000000000000008 $d
     /tmp/ccqd1Kqm.s:1421   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1426   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccqd1Kqm.s:1607   .text.HAL_RCC_GetSysClockFreq:00000000000000a0 $d
     /tmp/ccqd1Kqm.s:1614   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1619   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccqd1Kqm.s:1673   .text.HAL_RCC_GetHCLKFreq:000000000000002c $d
     /tmp/ccqd1Kqm.s:1680   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1685   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccqd1Kqm.s:1737   .text.HAL_RCC_GetPCLK1Freq:0000000000000028 $d
     /tmp/ccqd1Kqm.s:1743   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1748   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccqd1Kqm.s:1800   .text.HAL_RCC_GetPCLK2Freq:0000000000000028 $d
     /tmp/ccqd1Kqm.s:1806   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccqd1Kqm.s:1811   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccqd1Kqm.s:2051   .text.HAL_RCC_GetOscConfig:0000000000000104 $d
     /tmp/ccqd1Kqm.s:2056   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccqd1Kqm.s:2061   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccqd1Kqm.s:2099   .text.HAL_RCC_GetClockConfig:0000000000000034 $d
     /tmp/ccqd1Kqm.s:2105   .text.HAL_RCC_CCSCallback:0000000000000000 $t
     /tmp/ccqd1Kqm.s:2110   .text.HAL_RCC_CCSCallback:0000000000000000 HAL_RCC_CCSCallback
     /tmp/ccqd1Kqm.s:2122   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccqd1Kqm.s:2127   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccqd1Kqm.s:2156   .text.HAL_RCC_NMI_IRQHandler:0000000000000018 $d
     /tmp/ccqd1Kqm.s:2167   .rodata.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
     /tmp/ccqd1Kqm.s:2163   .rodata.APBAHBPrescTable:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
HAL_GPIO_Init
SystemCoreClock
