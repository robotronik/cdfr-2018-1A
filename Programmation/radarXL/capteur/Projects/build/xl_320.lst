ARM GAS  /tmp/ccJWln4X.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"xl_320.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.XL_FSM_HEADER_0,"ax",%progbits
  22              		.align	2
  23              		.global	XL_FSM_HEADER_0
  24              		.thumb
  25              		.thumb_func
  27              	XL_FSM_HEADER_0:
  28              	.LFB1:
  29              		.file 1 "../Src/xl_320.c"
   1:../Src/xl_320.c **** #include "xl_320.h"
   2:../Src/xl_320.c **** #include <stdio.h>
   3:../Src/xl_320.c **** 
   4:../Src/xl_320.c **** //========================================
   5:../Src/xl_320.c **** //    CONSTANTES ET VARIABLES GLOBALES
   6:../Src/xl_320.c **** //========================================
   7:../Src/xl_320.c **** static const uint8_t header[4] = {0xFF, 0xFF, 0xFD, 0x00};
   8:../Src/xl_320.c **** static const uint8_t stuffing_byte = 0xFD;
   9:../Src/xl_320.c **** static const uint8_t field_addr[] = {
  10:../Src/xl_320.c ****   [XL_ID] = 3,
  11:../Src/xl_320.c ****   [XL_BAUD_RATE] = 4,
  12:../Src/xl_320.c ****   [XL_RETURN_DELAY_TIME] = 5,
  13:../Src/xl_320.c ****   [XL_CW_ANGLE_LIMIT] = 6,
  14:../Src/xl_320.c ****   [XL_CCW_ANGLE_LIMIT] = 8,
  15:../Src/xl_320.c ****   [XL_CONTROL_MODE] = 11,
  16:../Src/xl_320.c ****   [XL_LIMIT_TEMPERATURE] = 12,
  17:../Src/xl_320.c ****   [XL_LOWER_LIMIT_VOLTAGE] = 13,
  18:../Src/xl_320.c ****   [XL_UPPER_LIMIT_VOLTAGE] = 14,
  19:../Src/xl_320.c ****   [XL_MAX_TORQUE] = 15,
  20:../Src/xl_320.c ****   [XL_RETURN_LEVEL] = 17,
  21:../Src/xl_320.c ****   [XL_ALARM_SHUTDOWN] = 18,
  22:../Src/xl_320.c ****   //EEPROM - Info
  23:../Src/xl_320.c ****   [XL_MODEL_NUMBER] = 0,
  24:../Src/xl_320.c ****   [XL_FIRMWARE_VERSION] = 2,
  25:../Src/xl_320.c ****   //RAM - Contrôle
  26:../Src/xl_320.c ****   [XL_TORQUE_ENABLE] = 24,
  27:../Src/xl_320.c ****   [XL_LED] = 25,
  28:../Src/xl_320.c ****   [XL_D_GAIN] = 27,
  29:../Src/xl_320.c ****   [XL_I_GAIN] = 28,
ARM GAS  /tmp/ccJWln4X.s 			page 2


  30:../Src/xl_320.c ****   [XL_P_GAIN] = 29,
  31:../Src/xl_320.c ****   [XL_GOAL_POSITION] = 30,
  32:../Src/xl_320.c ****   [XL_MOVING_SPEED] = 32,
  33:../Src/xl_320.c ****   [XL_TORQUE_LIMIT] = 35,
  34:../Src/xl_320.c ****   [XL_PUNCH] = 51,
  35:../Src/xl_320.c ****   //RAM - Info
  36:../Src/xl_320.c ****   [XL_CURRENT_POSITION] = 37,
  37:../Src/xl_320.c ****   [XL_CURRENT_SPEED] = 39,
  38:../Src/xl_320.c ****   [XL_CURRENT_LOAD] = 41,
  39:../Src/xl_320.c ****   [XL_CURRENT_VOLTAGE] = 45,
  40:../Src/xl_320.c ****   [XL_CURRENT_TEMPERATURE] = 46,
  41:../Src/xl_320.c ****   [XL_REGISTERED_INSTRUCTION] = 47,
  42:../Src/xl_320.c ****   [XL_MOVING] = 49,
  43:../Src/xl_320.c ****   [XL_HARDWARE_ERROR_STATUS] = 50,
  44:../Src/xl_320.c **** };
  45:../Src/xl_320.c **** static const uint8_t field_length[] = {
  46:../Src/xl_320.c ****   [XL_ID] = 1,
  47:../Src/xl_320.c ****   [XL_BAUD_RATE] = 1,
  48:../Src/xl_320.c ****   [XL_RETURN_DELAY_TIME] = 1,
  49:../Src/xl_320.c ****   [XL_CW_ANGLE_LIMIT] = 2,
  50:../Src/xl_320.c ****   [XL_CCW_ANGLE_LIMIT] = 2,
  51:../Src/xl_320.c ****   [XL_CONTROL_MODE] = 1,
  52:../Src/xl_320.c ****   [XL_LIMIT_TEMPERATURE] = 1,
  53:../Src/xl_320.c ****   [XL_LOWER_LIMIT_VOLTAGE] = 1,
  54:../Src/xl_320.c ****   [XL_UPPER_LIMIT_VOLTAGE] = 1,
  55:../Src/xl_320.c ****   [XL_MAX_TORQUE] = 2,
  56:../Src/xl_320.c ****   [XL_RETURN_LEVEL] = 1,
  57:../Src/xl_320.c ****   [XL_ALARM_SHUTDOWN] = 1,
  58:../Src/xl_320.c ****   //EEPROM - Info
  59:../Src/xl_320.c ****   [XL_MODEL_NUMBER] = 2,
  60:../Src/xl_320.c ****   [XL_FIRMWARE_VERSION] = 1,
  61:../Src/xl_320.c ****   //RAM - Contrôle
  62:../Src/xl_320.c ****   [XL_TORQUE_ENABLE] = 1,
  63:../Src/xl_320.c ****   [XL_LED] = 1,
  64:../Src/xl_320.c ****   [XL_D_GAIN] = 1,
  65:../Src/xl_320.c ****   [XL_I_GAIN] = 1,
  66:../Src/xl_320.c ****   [XL_P_GAIN] = 1,
  67:../Src/xl_320.c ****   [XL_GOAL_POSITION] = 2,
  68:../Src/xl_320.c ****   [XL_MOVING_SPEED] = 2,
  69:../Src/xl_320.c ****   [XL_TORQUE_LIMIT] = 2,
  70:../Src/xl_320.c ****   [XL_PUNCH] = 2,
  71:../Src/xl_320.c ****   //RAM - Info
  72:../Src/xl_320.c ****   [XL_CURRENT_POSITION] = 2,
  73:../Src/xl_320.c ****   [XL_CURRENT_SPEED] = 2,
  74:../Src/xl_320.c ****   [XL_CURRENT_LOAD] = 2,
  75:../Src/xl_320.c ****   [XL_CURRENT_VOLTAGE] = 1,
  76:../Src/xl_320.c ****   [XL_CURRENT_TEMPERATURE] = 1,
  77:../Src/xl_320.c ****   [XL_REGISTERED_INSTRUCTION] = 1,
  78:../Src/xl_320.c ****   [XL_MOVING] = 1,
  79:../Src/xl_320.c ****   [XL_HARDWARE_ERROR_STATUS] = 1,
  80:../Src/xl_320.c **** };
  81:../Src/xl_320.c **** static uint16_t err;
  82:../Src/xl_320.c **** 
  83:../Src/xl_320.c **** //========================================
  84:../Src/xl_320.c **** //        FONCTIONS DE RECEPTION
  85:../Src/xl_320.c **** //========================================
  86:../Src/xl_320.c **** #define FSM_BYTE *(fsm->p_buffer)
ARM GAS  /tmp/ccJWln4X.s 			page 3


  87:../Src/xl_320.c **** #define FSM_NEXT fsm->p_buffer++
  88:../Src/xl_320.c **** #define FSM_RESET fsm->update_state = XL_FSM_HEADER_0; fsm->p_buffer = fsm->buffer
  89:../Src/xl_320.c **** #define FSM_UPDATE(state_function) fsm->update_state = state_function
  90:../Src/xl_320.c **** 
  91:../Src/xl_320.c **** void XL_FSM_HEADER_0(XL_Receiver_FSM *fsm){
  30              		.loc 1 91 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LVL0:
  92:../Src/xl_320.c ****   if(FSM_BYTE == header[0]){
  36              		.loc 1 92 0
  37 0000 C368     		ldr	r3, [r0, #12]
  38 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  39 0004 FF2A     		cmp	r2, #255
  40 0006 03D1     		bne	.L1
  93:../Src/xl_320.c ****     FSM_NEXT;
  41              		.loc 1 93 0
  42 0008 0133     		adds	r3, r3, #1
  43 000a C360     		str	r3, [r0, #12]
  94:../Src/xl_320.c ****     FSM_UPDATE(XL_FSM_HEADER_1);
  44              		.loc 1 94 0
  45 000c 014B     		ldr	r3, .L3
  46 000e 0360     		str	r3, [r0]
  47              	.L1:
  48 0010 7047     		bx	lr
  49              	.L4:
  50 0012 00BF     		.align	2
  51              	.L3:
  52 0014 00000000 		.word	XL_FSM_HEADER_1
  53              		.cfi_endproc
  54              	.LFE1:
  56              		.section	.text.XL_FSM_HEADER_1,"ax",%progbits
  57              		.align	2
  58              		.global	XL_FSM_HEADER_1
  59              		.thumb
  60              		.thumb_func
  62              	XL_FSM_HEADER_1:
  63              	.LFB2:
  95:../Src/xl_320.c ****   }
  96:../Src/xl_320.c **** }
  97:../Src/xl_320.c **** 
  98:../Src/xl_320.c **** void XL_FSM_HEADER_1(XL_Receiver_FSM *fsm){
  64              		.loc 1 98 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              	.LVL1:
  99:../Src/xl_320.c ****   if(FSM_BYTE == header[1]){
  70              		.loc 1 99 0
  71 0000 C368     		ldr	r3, [r0, #12]
  72 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  73 0004 FF2A     		cmp	r2, #255
  74 0006 04D1     		bne	.L6
 100:../Src/xl_320.c ****     FSM_NEXT;
ARM GAS  /tmp/ccJWln4X.s 			page 4


  75              		.loc 1 100 0
  76 0008 0133     		adds	r3, r3, #1
  77 000a C360     		str	r3, [r0, #12]
 101:../Src/xl_320.c ****     FSM_UPDATE(XL_FSM_HEADER_2);
  78              		.loc 1 101 0
  79 000c 034B     		ldr	r3, .L8
  80 000e 0360     		str	r3, [r0]
  81 0010 7047     		bx	lr
  82              	.L6:
 102:../Src/xl_320.c ****   }
 103:../Src/xl_320.c ****   else{
 104:../Src/xl_320.c ****     FSM_RESET;
  83              		.loc 1 104 0
  84 0012 034B     		ldr	r3, .L8+4
  85 0014 0360     		str	r3, [r0]
  86 0016 8368     		ldr	r3, [r0, #8]
  87 0018 C360     		str	r3, [r0, #12]
  88 001a 7047     		bx	lr
  89              	.L9:
  90              		.align	2
  91              	.L8:
  92 001c 00000000 		.word	XL_FSM_HEADER_2
  93 0020 00000000 		.word	XL_FSM_HEADER_0
  94              		.cfi_endproc
  95              	.LFE2:
  97              		.section	.text.XL_FSM_HEADER_2,"ax",%progbits
  98              		.align	2
  99              		.global	XL_FSM_HEADER_2
 100              		.thumb
 101              		.thumb_func
 103              	XL_FSM_HEADER_2:
 104              	.LFB3:
 105:../Src/xl_320.c ****   }
 106:../Src/xl_320.c **** }
 107:../Src/xl_320.c **** 
 108:../Src/xl_320.c **** void XL_FSM_HEADER_2(XL_Receiver_FSM *fsm){
 105              		.loc 1 108 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL2:
 109:../Src/xl_320.c ****   if(FSM_BYTE == header[2]){
 111              		.loc 1 109 0
 112 0000 C368     		ldr	r3, [r0, #12]
 113 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 114 0004 FD2A     		cmp	r2, #253
 115 0006 04D1     		bne	.L11
 110:../Src/xl_320.c ****     FSM_NEXT;
 116              		.loc 1 110 0
 117 0008 0133     		adds	r3, r3, #1
 118 000a C360     		str	r3, [r0, #12]
 111:../Src/xl_320.c ****     FSM_UPDATE(XL_FSM_HEADER_3);
 119              		.loc 1 111 0
 120 000c 034B     		ldr	r3, .L13
 121 000e 0360     		str	r3, [r0]
 122 0010 7047     		bx	lr
ARM GAS  /tmp/ccJWln4X.s 			page 5


 123              	.L11:
 112:../Src/xl_320.c ****   }
 113:../Src/xl_320.c ****   else{
 114:../Src/xl_320.c ****     FSM_RESET;
 124              		.loc 1 114 0
 125 0012 034B     		ldr	r3, .L13+4
 126 0014 0360     		str	r3, [r0]
 127 0016 8368     		ldr	r3, [r0, #8]
 128 0018 C360     		str	r3, [r0, #12]
 129 001a 7047     		bx	lr
 130              	.L14:
 131              		.align	2
 132              	.L13:
 133 001c 00000000 		.word	XL_FSM_HEADER_3
 134 0020 00000000 		.word	XL_FSM_HEADER_0
 135              		.cfi_endproc
 136              	.LFE3:
 138              		.section	.text.XL_FSM_HEADER_3,"ax",%progbits
 139              		.align	2
 140              		.global	XL_FSM_HEADER_3
 141              		.thumb
 142              		.thumb_func
 144              	XL_FSM_HEADER_3:
 145              	.LFB4:
 115:../Src/xl_320.c ****   }
 116:../Src/xl_320.c **** }
 117:../Src/xl_320.c **** 
 118:../Src/xl_320.c **** void XL_FSM_HEADER_3(XL_Receiver_FSM *fsm){
 146              		.loc 1 118 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL3:
 119:../Src/xl_320.c ****   if(FSM_BYTE != stuffing_byte){
 152              		.loc 1 119 0
 153 0000 C368     		ldr	r3, [r0, #12]
 154 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 155 0004 FD2A     		cmp	r2, #253
 156 0006 04D0     		beq	.L16
 120:../Src/xl_320.c ****     FSM_NEXT;
 157              		.loc 1 120 0
 158 0008 0133     		adds	r3, r3, #1
 159 000a C360     		str	r3, [r0, #12]
 121:../Src/xl_320.c ****     FSM_UPDATE(XL_FSM_ID);
 160              		.loc 1 121 0
 161 000c 034B     		ldr	r3, .L18
 162 000e 0360     		str	r3, [r0]
 163 0010 7047     		bx	lr
 164              	.L16:
 122:../Src/xl_320.c ****   }
 123:../Src/xl_320.c ****   else{
 124:../Src/xl_320.c ****     FSM_RESET;
 165              		.loc 1 124 0
 166 0012 034B     		ldr	r3, .L18+4
 167 0014 0360     		str	r3, [r0]
 168 0016 8368     		ldr	r3, [r0, #8]
ARM GAS  /tmp/ccJWln4X.s 			page 6


 169 0018 C360     		str	r3, [r0, #12]
 170 001a 7047     		bx	lr
 171              	.L19:
 172              		.align	2
 173              	.L18:
 174 001c 00000000 		.word	XL_FSM_ID
 175 0020 00000000 		.word	XL_FSM_HEADER_0
 176              		.cfi_endproc
 177              	.LFE4:
 179              		.section	.text.XL_FSM_ID,"ax",%progbits
 180              		.align	2
 181              		.global	XL_FSM_ID
 182              		.thumb
 183              		.thumb_func
 185              	XL_FSM_ID:
 186              	.LFB5:
 125:../Src/xl_320.c ****   }
 126:../Src/xl_320.c **** }
 127:../Src/xl_320.c **** 
 128:../Src/xl_320.c **** void XL_FSM_ID(XL_Receiver_FSM *fsm){
 187              		.loc 1 128 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192              	.LVL4:
 129:../Src/xl_320.c ****   if(FSM_BYTE != 0xFF && FSM_BYTE != 0xFD){
 193              		.loc 1 129 0
 194 0000 C368     		ldr	r3, [r0, #12]
 195 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 196 0004 FF2A     		cmp	r2, #255
 197 0006 06D0     		beq	.L21
 198              		.loc 1 129 0 is_stmt 0 discriminator 1
 199 0008 FD2A     		cmp	r2, #253
 200 000a 04D0     		beq	.L21
 130:../Src/xl_320.c ****     FSM_NEXT;
 201              		.loc 1 130 0 is_stmt 1
 202 000c 0133     		adds	r3, r3, #1
 203 000e C360     		str	r3, [r0, #12]
 131:../Src/xl_320.c ****     FSM_UPDATE(XL_FSM_LENGTH_LOW);
 204              		.loc 1 131 0
 205 0010 034B     		ldr	r3, .L23
 206 0012 0360     		str	r3, [r0]
 207 0014 7047     		bx	lr
 208              	.L21:
 132:../Src/xl_320.c ****   }
 133:../Src/xl_320.c ****   else{
 134:../Src/xl_320.c ****     FSM_RESET;
 209              		.loc 1 134 0
 210 0016 034B     		ldr	r3, .L23+4
 211 0018 0360     		str	r3, [r0]
 212 001a 8368     		ldr	r3, [r0, #8]
 213 001c C360     		str	r3, [r0, #12]
 214 001e 7047     		bx	lr
 215              	.L24:
 216              		.align	2
 217              	.L23:
ARM GAS  /tmp/ccJWln4X.s 			page 7


 218 0020 00000000 		.word	XL_FSM_LENGTH_LOW
 219 0024 00000000 		.word	XL_FSM_HEADER_0
 220              		.cfi_endproc
 221              	.LFE5:
 223              		.section	.text.XL_FSM_LENGTH_LOW,"ax",%progbits
 224              		.align	2
 225              		.global	XL_FSM_LENGTH_LOW
 226              		.thumb
 227              		.thumb_func
 229              	XL_FSM_LENGTH_LOW:
 230              	.LFB6:
 135:../Src/xl_320.c ****   }
 136:../Src/xl_320.c **** }
 137:../Src/xl_320.c **** 
 138:../Src/xl_320.c **** void XL_FSM_LENGTH_LOW(XL_Receiver_FSM *fsm){
 231              		.loc 1 138 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 236              	.LVL5:
 139:../Src/xl_320.c ****   fsm->remaining_bytes = FSM_BYTE;
 237              		.loc 1 139 0
 238 0000 C368     		ldr	r3, [r0, #12]
 239 0002 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 240 0006 8280     		strh	r2, [r0, #4]	@ movhi
 140:../Src/xl_320.c ****   FSM_NEXT;
 241              		.loc 1 140 0
 242 0008 C360     		str	r3, [r0, #12]
 141:../Src/xl_320.c ****   FSM_UPDATE(XL_FSM_LENGTH_HIGH);
 243              		.loc 1 141 0
 244 000a 014B     		ldr	r3, .L26
 245 000c 0360     		str	r3, [r0]
 246 000e 7047     		bx	lr
 247              	.L27:
 248              		.align	2
 249              	.L26:
 250 0010 00000000 		.word	XL_FSM_LENGTH_HIGH
 251              		.cfi_endproc
 252              	.LFE6:
 254              		.section	.text.XL_FSM_LENGTH_HIGH,"ax",%progbits
 255              		.align	2
 256              		.global	XL_FSM_LENGTH_HIGH
 257              		.thumb
 258              		.thumb_func
 260              	XL_FSM_LENGTH_HIGH:
 261              	.LFB7:
 142:../Src/xl_320.c **** }
 143:../Src/xl_320.c **** 
 144:../Src/xl_320.c **** void XL_FSM_LENGTH_HIGH(XL_Receiver_FSM *fsm){
 262              		.loc 1 144 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 267              	.LVL6:
 145:../Src/xl_320.c ****   fsm->remaining_bytes |= FSM_BYTE << 8;
ARM GAS  /tmp/ccJWln4X.s 			page 8


 268              		.loc 1 145 0
 269 0000 C268     		ldr	r2, [r0, #12]
 270 0002 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 271 0004 8388     		ldrh	r3, [r0, #4]
 272 0006 43EA0123 		orr	r3, r3, r1, lsl #8
 273 000a 9BB2     		uxth	r3, r3
 274 000c 8380     		strh	r3, [r0, #4]	@ movhi
 275              	.LVL7:
 146:../Src/xl_320.c ****   const uint16_t remaining_bytes = fsm->remaining_bytes;
 147:../Src/xl_320.c ****   if((remaining_bytes >= 4) && (7 + remaining_bytes <= XL_BUFFER_SIZE)){
 276              		.loc 1 147 0
 277 000e 032B     		cmp	r3, #3
 278 0010 07D9     		bls	.L29
 279              		.loc 1 147 0 is_stmt 0 discriminator 1
 280 0012 0733     		adds	r3, r3, #7
 281              	.LVL8:
 282 0014 202B     		cmp	r3, #32
 283 0016 04DC     		bgt	.L29
 148:../Src/xl_320.c ****     FSM_NEXT;
 284              		.loc 1 148 0 is_stmt 1
 285 0018 0132     		adds	r2, r2, #1
 286 001a C260     		str	r2, [r0, #12]
 149:../Src/xl_320.c ****     FSM_UPDATE(XL_FSM_INSTRUCTION);
 287              		.loc 1 149 0
 288 001c 034B     		ldr	r3, .L31
 289 001e 0360     		str	r3, [r0]
 290 0020 7047     		bx	lr
 291              	.L29:
 150:../Src/xl_320.c ****   }
 151:../Src/xl_320.c ****   else{
 152:../Src/xl_320.c ****     FSM_RESET;
 292              		.loc 1 152 0
 293 0022 034B     		ldr	r3, .L31+4
 294 0024 0360     		str	r3, [r0]
 295 0026 8368     		ldr	r3, [r0, #8]
 296 0028 C360     		str	r3, [r0, #12]
 297 002a 7047     		bx	lr
 298              	.L32:
 299              		.align	2
 300              	.L31:
 301 002c 00000000 		.word	XL_FSM_INSTRUCTION
 302 0030 00000000 		.word	XL_FSM_HEADER_0
 303              		.cfi_endproc
 304              	.LFE7:
 306              		.section	.text.XL_FSM_INSTRUCTION,"ax",%progbits
 307              		.align	2
 308              		.global	XL_FSM_INSTRUCTION
 309              		.thumb
 310              		.thumb_func
 312              	XL_FSM_INSTRUCTION:
 313              	.LFB8:
 153:../Src/xl_320.c ****   }
 154:../Src/xl_320.c **** }
 155:../Src/xl_320.c **** void XL_FSM_INSTRUCTION(XL_Receiver_FSM *fsm){
 314              		.loc 1 155 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccJWln4X.s 			page 9


 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319              	.LVL9:
 156:../Src/xl_320.c ****   if(FSM_BYTE == XL_STATUS){
 320              		.loc 1 156 0
 321 0000 C368     		ldr	r3, [r0, #12]
 322 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 323 0004 552A     		cmp	r2, #85
 324 0006 07D1     		bne	.L34
 157:../Src/xl_320.c ****     fsm->remaining_bytes--;
 325              		.loc 1 157 0
 326 0008 8288     		ldrh	r2, [r0, #4]
 327 000a 013A     		subs	r2, r2, #1
 328 000c 8280     		strh	r2, [r0, #4]	@ movhi
 158:../Src/xl_320.c ****     FSM_NEXT;
 329              		.loc 1 158 0
 330 000e 0133     		adds	r3, r3, #1
 331 0010 C360     		str	r3, [r0, #12]
 159:../Src/xl_320.c ****     FSM_UPDATE(XL_FSM_RECEIVING);
 332              		.loc 1 159 0
 333 0012 044B     		ldr	r3, .L36
 334 0014 0360     		str	r3, [r0]
 335 0016 7047     		bx	lr
 336              	.L34:
 160:../Src/xl_320.c ****   }else{
 161:../Src/xl_320.c ****     FSM_RESET;
 337              		.loc 1 161 0
 338 0018 034B     		ldr	r3, .L36+4
 339 001a 0360     		str	r3, [r0]
 340 001c 8368     		ldr	r3, [r0, #8]
 341 001e C360     		str	r3, [r0, #12]
 342 0020 7047     		bx	lr
 343              	.L37:
 344 0022 00BF     		.align	2
 345              	.L36:
 346 0024 00000000 		.word	XL_FSM_RECEIVING
 347 0028 00000000 		.word	XL_FSM_HEADER_0
 348              		.cfi_endproc
 349              	.LFE8:
 351              		.section	.text.XL_FSM_RECEIVING,"ax",%progbits
 352              		.align	2
 353              		.global	XL_FSM_RECEIVING
 354              		.thumb
 355              		.thumb_func
 357              	XL_FSM_RECEIVING:
 358              	.LFB9:
 162:../Src/xl_320.c ****   }
 163:../Src/xl_320.c **** }
 164:../Src/xl_320.c **** 
 165:../Src/xl_320.c **** void XL_FSM_RECEIVING(XL_Receiver_FSM *fsm){
 359              		.loc 1 165 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364              	.LVL10:
 166:../Src/xl_320.c ****   FSM_NEXT;
ARM GAS  /tmp/ccJWln4X.s 			page 10


 365              		.loc 1 166 0
 366 0000 C368     		ldr	r3, [r0, #12]
 367 0002 0133     		adds	r3, r3, #1
 368 0004 C360     		str	r3, [r0, #12]
 167:../Src/xl_320.c ****   fsm->remaining_bytes--;
 369              		.loc 1 167 0
 370 0006 8388     		ldrh	r3, [r0, #4]
 371 0008 013B     		subs	r3, r3, #1
 372 000a 9BB2     		uxth	r3, r3
 373 000c 8380     		strh	r3, [r0, #4]	@ movhi
 168:../Src/xl_320.c ****   if(fsm->remaining_bytes == 0){
 374              		.loc 1 168 0
 375 000e 0BB9     		cbnz	r3, .L38
 169:../Src/xl_320.c ****     fsm->done = 1;
 376              		.loc 1 169 0
 377 0010 0123     		movs	r3, #1
 378 0012 0374     		strb	r3, [r0, #16]
 379              	.L38:
 380 0014 7047     		bx	lr
 381              		.cfi_endproc
 382              	.LFE9:
 384 0016 00BF     		.section	.text.XL_Update_CRC,"ax",%progbits
 385              		.align	2
 386              		.global	XL_Update_CRC
 387              		.thumb
 388              		.thumb_func
 390              	XL_Update_CRC:
 391              	.LFB14:
 170:../Src/xl_320.c ****   }
 171:../Src/xl_320.c **** }
 172:../Src/xl_320.c **** 
 173:../Src/xl_320.c **** uint8_t XL_Extract_Status_Packet(XL_Status_Packet *packet, uint8_t frame[XL_BUFFER_SIZE], uint16_t 
 174:../Src/xl_320.c ****   //La taille est supposée vérifiée dans XL_Receive.
 175:../Src/xl_320.c ****   //CRC
 176:../Src/xl_320.c ****   uint16_t old_crc = (frame[length-1] << 8) | frame[length-2];
 177:../Src/xl_320.c ****   uint16_t new_crc = XL_Update_CRC(0, frame, length-2);
 178:../Src/xl_320.c ****   if(new_crc != old_crc){
 179:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 180:../Src/xl_320.c ****     return 1;
 181:../Src/xl_320.c ****   }
 182:../Src/xl_320.c **** 
 183:../Src/xl_320.c ****   packet->id = frame[4];
 184:../Src/xl_320.c ****   packet->err = frame[8];
 185:../Src/xl_320.c **** 
 186:../Src/xl_320.c ****   //Paramètres
 187:../Src/xl_320.c ****   uint8_t *start_stuffing = frame+7;
 188:../Src/xl_320.c ****   uint8_t *end_stuffing = frame+(length-2);
 189:../Src/xl_320.c ****   uint8_t *p_frame = frame+9;
 190:../Src/xl_320.c **** 
 191:../Src/xl_320.c ****   packet->nb_params = 0;
 192:../Src/xl_320.c ****   while(p_frame != end_stuffing){
 193:../Src/xl_320.c ****     packet->params[packet->nb_params++] = *(p_frame++);
 194:../Src/xl_320.c ****     if(p_frame - start_stuffing == 3){
 195:../Src/xl_320.c ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 196:../Src/xl_320.c **** 	if(*p_frame != stuffing_byte){
 197:../Src/xl_320.c **** 	  err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 198:../Src/xl_320.c **** 	  return 1;
ARM GAS  /tmp/ccJWln4X.s 			page 11


 199:../Src/xl_320.c **** 	}
 200:../Src/xl_320.c **** 	p_frame++;
 201:../Src/xl_320.c **** 	start_stuffing = p_frame;
 202:../Src/xl_320.c ****       }
 203:../Src/xl_320.c ****       else{
 204:../Src/xl_320.c **** 	start_stuffing++;
 205:../Src/xl_320.c ****       }
 206:../Src/xl_320.c ****     }
 207:../Src/xl_320.c ****   }
 208:../Src/xl_320.c ****   
 209:../Src/xl_320.c ****   return 0;
 210:../Src/xl_320.c **** }
 211:../Src/xl_320.c **** 
 212:../Src/xl_320.c **** uint8_t XL_Receive(XL_Interface *interface, uint16_t packet_size, uint32_t timeout){
 213:../Src/xl_320.c ****   //Evite un overflow
 214:../Src/xl_320.c ****   if(packet_size > XL_BUFFER_SIZE){
 215:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 216:../Src/xl_320.c ****     return 1;
 217:../Src/xl_320.c ****   }
 218:../Src/xl_320.c ****   
 219:../Src/xl_320.c ****   //Préparation de la réception
 220:../Src/xl_320.c ****   interface->set_direction(XL_RECEIVE);
 221:../Src/xl_320.c ****   
 222:../Src/xl_320.c ****   interface->fsm.update_state = XL_FSM_HEADER_0;
 223:../Src/xl_320.c ****   interface->fsm.remaining_bytes = 0;
 224:../Src/xl_320.c ****   interface->fsm.buffer = interface->buffer;
 225:../Src/xl_320.c ****   interface->fsm.p_buffer = interface->buffer;
 226:../Src/xl_320.c ****   interface->fsm.done = 0;
 227:../Src/xl_320.c **** 
 228:../Src/xl_320.c ****   //Réception
 229:../Src/xl_320.c ****   if(interface->receive(interface->fsm.p_buffer, packet_size, timeout) != 0){
 230:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 231:../Src/xl_320.c ****     return 1;
 232:../Src/xl_320.c ****   }
 233:../Src/xl_320.c **** 
 234:../Src/xl_320.c ****   //FSM
 235:../Src/xl_320.c ****   do{
 236:../Src/xl_320.c ****     interface->fsm.update_state(&(interface->fsm));
 237:../Src/xl_320.c **** 
 238:../Src/xl_320.c ****     /*uint8_t *p;
 239:../Src/xl_320.c ****     printf("Buffer : ");
 240:../Src/xl_320.c ****     for(p = interface->buffer; p < interface->fsm.p_buffer; p++){
 241:../Src/xl_320.c ****       printf("0x%2.2X ", *p);
 242:../Src/xl_320.c ****     }
 243:../Src/xl_320.c ****     printf("\n");*/
 244:../Src/xl_320.c ****   }while(interface->fsm.p_buffer != interface->fsm.buffer && interface->fsm.done != 1);
 245:../Src/xl_320.c **** 
 246:../Src/xl_320.c ****   //Récupération du paquet
 247:../Src/xl_320.c ****   if(interface->fsm.done == 0){
 248:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 249:../Src/xl_320.c ****     return 1;
 250:../Src/xl_320.c ****   }
 251:../Src/xl_320.c **** 
 252:../Src/xl_320.c ****   //Vérification de la taille du paquet (au cas où)
 253:../Src/xl_320.c ****   uint16_t r_packet_size = interface->fsm.p_buffer - interface->fsm.buffer;
 254:../Src/xl_320.c ****   if(r_packet_size != packet_size){
 255:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
ARM GAS  /tmp/ccJWln4X.s 			page 12


 256:../Src/xl_320.c ****     return 1;
 257:../Src/xl_320.c ****   }
 258:../Src/xl_320.c **** 
 259:../Src/xl_320.c ****   return XL_Extract_Status_Packet(&interface->status, interface->buffer, packet_size);
 260:../Src/xl_320.c **** }
 261:../Src/xl_320.c **** 
 262:../Src/xl_320.c **** //======================================
 263:../Src/xl_320.c **** //           FONCTIONS D'ENVOI          
 264:../Src/xl_320.c **** //======================================
 265:../Src/xl_320.c **** uint8_t XL_Build_Frame(XL_Instruction_Packet *packet, uint8_t buffer[XL_BUFFER_SIZE]){
 266:../Src/xl_320.c ****   //Vérification des arguments
 267:../Src/xl_320.c ****   if(packet == 0 || (packet->params == 0 && packet->nb_params > 0) || buffer == 0){
 268:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 269:../Src/xl_320.c ****     return 0;
 270:../Src/xl_320.c ****   }
 271:../Src/xl_320.c ****   //Evite une collision avec l'en-tête
 272:../Src/xl_320.c ****   if(packet->id == 0xFD || packet->id == 0xFF){
 273:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 274:../Src/xl_320.c ****     return 0;
 275:../Src/xl_320.c ****   }
 276:../Src/xl_320.c ****   //Evite un overflow
 277:../Src/xl_320.c ****   if(10+packet->nb_params+packet->nb_params/3 > XL_BUFFER_SIZE){
 278:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 279:../Src/xl_320.c ****     return 0;
 280:../Src/xl_320.c ****   }
 281:../Src/xl_320.c **** 
 282:../Src/xl_320.c ****   uint8_t *p_buffer = buffer;
 283:../Src/xl_320.c ****   //Header
 284:../Src/xl_320.c ****   *(p_buffer++) = header[0];
 285:../Src/xl_320.c ****   *(p_buffer++) = header[1];
 286:../Src/xl_320.c ****   *(p_buffer++) = header[2];
 287:../Src/xl_320.c ****   *(p_buffer++) = header[3];
 288:../Src/xl_320.c **** 
 289:../Src/xl_320.c ****   //Packet ID
 290:../Src/xl_320.c ****   *(p_buffer++) = packet->id;
 291:../Src/xl_320.c **** 
 292:../Src/xl_320.c ****   //Packet length (temporaire)
 293:../Src/xl_320.c ****   p_buffer += 2;
 294:../Src/xl_320.c **** 
 295:../Src/xl_320.c ****   //<BEGIN BYTE STUFFING>
 296:../Src/xl_320.c ****   //Instruction
 297:../Src/xl_320.c ****   uint8_t *start_stuffing = p_buffer;
 298:../Src/xl_320.c ****   *(p_buffer++) = packet->instruction;
 299:../Src/xl_320.c **** 
 300:../Src/xl_320.c ****   //Paramètres
 301:../Src/xl_320.c ****   int i;
 302:../Src/xl_320.c ****   for(i = 0; i < packet->nb_params; i++){
 303:../Src/xl_320.c ****     *(p_buffer++) = packet->params[i];
 304:../Src/xl_320.c ****     if(p_buffer - start_stuffing == 3){
 305:../Src/xl_320.c ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 306:../Src/xl_320.c **** 	*(p_buffer++) = stuffing_byte;
 307:../Src/xl_320.c **** 	start_stuffing = p_buffer;
 308:../Src/xl_320.c ****       }else{
 309:../Src/xl_320.c **** 	start_stuffing++;
 310:../Src/xl_320.c ****       }
 311:../Src/xl_320.c ****     }
 312:../Src/xl_320.c ****   }
ARM GAS  /tmp/ccJWln4X.s 			page 13


 313:../Src/xl_320.c ****   //<END BYTE STUFFING>
 314:../Src/xl_320.c **** 
 315:../Src/xl_320.c ****   //Packet length
 316:../Src/xl_320.c ****   uint16_t packet_length = (p_buffer-buffer) - 7 + 2;//Ce qu'on a écrit - (header+id+length) + crc
 317:../Src/xl_320.c ****   buffer[5] = packet_length & 0x00FF;
 318:../Src/xl_320.c ****   buffer[6] = packet_length >> 8;
 319:../Src/xl_320.c **** 
 320:../Src/xl_320.c ****   //Cyclic Redundancy Check
 321:../Src/xl_320.c ****   uint16_t crc = XL_Update_CRC(0, buffer, packet_length+7-2);
 322:../Src/xl_320.c ****   *(p_buffer++) = crc & 0x00FF;
 323:../Src/xl_320.c ****   *(p_buffer++) = crc >> 8;
 324:../Src/xl_320.c ****   
 325:../Src/xl_320.c ****   return p_buffer-buffer;    
 326:../Src/xl_320.c **** }
 327:../Src/xl_320.c **** 
 328:../Src/xl_320.c **** uint8_t XL_Send(XL_Interface *interface, XL_Instruction_Packet *packet, uint32_t timeout){
 329:../Src/xl_320.c ****   //Préparation de la trame
 330:../Src/xl_320.c ****   uint8_t length = XL_Build_Frame(packet, interface->buffer);
 331:../Src/xl_320.c ****   if(!length){
 332:../Src/xl_320.c ****     return 1;
 333:../Src/xl_320.c ****   }
 334:../Src/xl_320.c **** 
 335:../Src/xl_320.c ****   //Envoi
 336:../Src/xl_320.c ****   interface->set_direction(XL_SEND);
 337:../Src/xl_320.c ****   if(interface->send(interface->buffer, length, timeout) == 1){
 338:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 339:../Src/xl_320.c ****     return 1;
 340:../Src/xl_320.c ****   }
 341:../Src/xl_320.c ****   return 0;
 342:../Src/xl_320.c **** }
 343:../Src/xl_320.c **** 
 344:../Src/xl_320.c **** uint16_t XL_Update_CRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size){
 392              		.loc 1 344 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 512
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              	.LVL11:
 397 0000 70B5     		push	{r4, r5, r6, lr}
 398              	.LCFI0:
 399              		.cfi_def_cfa_offset 16
 400              		.cfi_offset 4, -16
 401              		.cfi_offset 5, -12
 402              		.cfi_offset 6, -8
 403              		.cfi_offset 14, -4
 404 0002 ADF5007D 		sub	sp, sp, #512
 405              	.LCFI1:
 406              		.cfi_def_cfa_offset 528
 407 0006 0446     		mov	r4, r0
 408 0008 0E46     		mov	r6, r1
 409 000a 1546     		mov	r5, r2
 345:../Src/xl_320.c ****   uint16_t i, j;
 346:../Src/xl_320.c ****   uint16_t crc_table[256] = {
 410              		.loc 1 346 0
 411 000c 4FF40072 		mov	r2, #512
 412              	.LVL12:
 413 0010 0A49     		ldr	r1, .L44
 414              	.LVL13:
ARM GAS  /tmp/ccJWln4X.s 			page 14


 415 0012 6846     		mov	r0, sp
 416              	.LVL14:
 417 0014 FFF7FEFF 		bl	memcpy
 418              	.LVL15:
 347:../Src/xl_320.c ****     0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
 348:../Src/xl_320.c ****     0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
 349:../Src/xl_320.c ****     0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
 350:../Src/xl_320.c ****     0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
 351:../Src/xl_320.c ****     0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
 352:../Src/xl_320.c ****     0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
 353:../Src/xl_320.c ****     0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
 354:../Src/xl_320.c ****     0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
 355:../Src/xl_320.c ****     0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
 356:../Src/xl_320.c ****     0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
 357:../Src/xl_320.c ****     0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
 358:../Src/xl_320.c ****     0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
 359:../Src/xl_320.c ****     0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
 360:../Src/xl_320.c ****     0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
 361:../Src/xl_320.c ****     0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
 362:../Src/xl_320.c ****     0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,
 363:../Src/xl_320.c ****     0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
 364:../Src/xl_320.c ****     0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
 365:../Src/xl_320.c ****     0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
 366:../Src/xl_320.c ****     0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
 367:../Src/xl_320.c ****     0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
 368:../Src/xl_320.c ****     0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
 369:../Src/xl_320.c ****     0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
 370:../Src/xl_320.c ****     0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
 371:../Src/xl_320.c ****     0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
 372:../Src/xl_320.c ****     0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
 373:../Src/xl_320.c ****     0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
 374:../Src/xl_320.c ****     0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
 375:../Src/xl_320.c ****     0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
 376:../Src/xl_320.c ****     0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
 377:../Src/xl_320.c ****     0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
 378:../Src/xl_320.c ****     0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
 379:../Src/xl_320.c **** 
 380:../Src/xl_320.c ****   for(j = 0; j < data_blk_size; j++){
 419              		.loc 1 380 0
 420 0018 0023     		movs	r3, #0
 421 001a 09E0     		b	.L41
 422              	.LVL16:
 423              	.L42:
 381:../Src/xl_320.c ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 424              		.loc 1 381 0 discriminator 3
 425 001c F25C     		ldrb	r2, [r6, r3]	@ zero_extendqisi2
 426 001e 82EA1422 		eor	r2, r2, r4, lsr #8
 427              	.LVL17:
 382:../Src/xl_320.c ****       crc_accum = (crc_accum << 8) ^ crc_table[i];
 428              		.loc 1 382 0 discriminator 3
 429 0022 3DF81220 		ldrh	r2, [sp, r2, lsl #1]
 430              	.LVL18:
 431 0026 82EA0424 		eor	r4, r2, r4, lsl #8
 432              	.LVL19:
 433 002a A4B2     		uxth	r4, r4
 434              	.LVL20:
 380:../Src/xl_320.c ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
ARM GAS  /tmp/ccJWln4X.s 			page 15


 435              		.loc 1 380 0 discriminator 3
 436 002c 0133     		adds	r3, r3, #1
 437              	.LVL21:
 438 002e 9BB2     		uxth	r3, r3
 439              	.LVL22:
 440              	.L41:
 380:../Src/xl_320.c ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 441              		.loc 1 380 0 is_stmt 0 discriminator 1
 442 0030 AB42     		cmp	r3, r5
 443 0032 F3D3     		bcc	.L42
 383:../Src/xl_320.c ****   }
 384:../Src/xl_320.c **** 
 385:../Src/xl_320.c ****   return crc_accum;
 386:../Src/xl_320.c **** }
 444              		.loc 1 386 0 is_stmt 1
 445 0034 2046     		mov	r0, r4
 446 0036 0DF5007D 		add	sp, sp, #512
 447              	.LCFI2:
 448              		.cfi_def_cfa_offset 16
 449              		@ sp needed
 450 003a 70BD     		pop	{r4, r5, r6, pc}
 451              	.LVL23:
 452              	.L45:
 453              		.align	2
 454              	.L44:
 455 003c 00000000 		.word	.LANCHOR0
 456              		.cfi_endproc
 457              	.LFE14:
 459              		.section	.text.XL_Extract_Status_Packet,"ax",%progbits
 460              		.align	2
 461              		.global	XL_Extract_Status_Packet
 462              		.thumb
 463              		.thumb_func
 465              	XL_Extract_Status_Packet:
 466              	.LFB10:
 173:../Src/xl_320.c ****   //La taille est supposée vérifiée dans XL_Receive.
 467              		.loc 1 173 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              	.LVL24:
 472 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 473              	.LCFI3:
 474              		.cfi_def_cfa_offset 24
 475              		.cfi_offset 3, -24
 476              		.cfi_offset 4, -20
 477              		.cfi_offset 5, -16
 478              		.cfi_offset 6, -12
 479              		.cfi_offset 7, -8
 480              		.cfi_offset 14, -4
 481 0002 0546     		mov	r5, r0
 482 0004 0C46     		mov	r4, r1
 176:../Src/xl_320.c ****   uint16_t new_crc = XL_Update_CRC(0, frame, length-2);
 483              		.loc 1 176 0
 484 0006 8B18     		adds	r3, r1, r2
 485 0008 13F8017C 		ldrb	r7, [r3, #-1]	@ zero_extendqisi2
 486 000c 023A     		subs	r2, r2, #2
ARM GAS  /tmp/ccJWln4X.s 			page 16


 487              	.LVL25:
 488 000e 8E18     		adds	r6, r1, r2
 489 0010 8B5C     		ldrb	r3, [r1, r2]	@ zero_extendqisi2
 490 0012 43EA0727 		orr	r7, r3, r7, lsl #8
 491              	.LVL26:
 177:../Src/xl_320.c ****   if(new_crc != old_crc){
 492              		.loc 1 177 0
 493 0016 92B2     		uxth	r2, r2
 494 0018 0020     		movs	r0, #0
 495              	.LVL27:
 496 001a FFF7FEFF 		bl	XL_Update_CRC
 497              	.LVL28:
 178:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 498              		.loc 1 178 0
 499 001e 8742     		cmp	r7, r0
 500 0020 05D0     		beq	.L47
 179:../Src/xl_320.c ****     return 1;
 501              		.loc 1 179 0
 502 0022 4FF48072 		mov	r2, #256
 503 0026 194B     		ldr	r3, .L55
 504 0028 1A80     		strh	r2, [r3]	@ movhi
 180:../Src/xl_320.c ****   }
 505              		.loc 1 180 0
 506 002a 0120     		movs	r0, #1
 507              	.LVL29:
 508 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 509              	.LVL30:
 510              	.L47:
 183:../Src/xl_320.c ****   packet->err = frame[8];
 511              		.loc 1 183 0
 512 002e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 513 0030 2B70     		strb	r3, [r5]
 184:../Src/xl_320.c **** 
 514              		.loc 1 184 0
 515 0032 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 516 0034 6B70     		strb	r3, [r5, #1]
 187:../Src/xl_320.c ****   uint8_t *end_stuffing = frame+(length-2);
 517              		.loc 1 187 0
 518 0036 E71D     		adds	r7, r4, #7
 519              	.LVL31:
 189:../Src/xl_320.c **** 
 520              		.loc 1 189 0
 521 0038 04F10902 		add	r2, r4, #9
 522              	.LVL32:
 191:../Src/xl_320.c ****   while(p_frame != end_stuffing){
 523              		.loc 1 191 0
 524 003c 0023     		movs	r3, #0
 525 003e AB70     		strb	r3, [r5, #2]
 192:../Src/xl_320.c ****     packet->params[packet->nb_params++] = *(p_frame++);
 526              		.loc 1 192 0
 527 0040 20E0     		b	.L49
 528              	.LVL33:
 529              	.L53:
 193:../Src/xl_320.c ****     if(p_frame - start_stuffing == 3){
 530              		.loc 1 193 0
 531 0042 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 532 0044 591C     		adds	r1, r3, #1
ARM GAS  /tmp/ccJWln4X.s 			page 17


 533 0046 A970     		strb	r1, [r5, #2]
 534 0048 511C     		adds	r1, r2, #1
 535              	.LVL34:
 536 004a 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 537 004c 2B44     		add	r3, r3, r5
 538 004e D870     		strb	r0, [r3, #3]
 194:../Src/xl_320.c ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 539              		.loc 1 194 0
 540 0050 CB1B     		subs	r3, r1, r7
 541 0052 032B     		cmp	r3, #3
 542 0054 15D1     		bne	.L50
 195:../Src/xl_320.c **** 	if(*p_frame != stuffing_byte){
 543              		.loc 1 195 0
 544 0056 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 545 0058 FF2B     		cmp	r3, #255
 546 005a 11D1     		bne	.L51
 195:../Src/xl_320.c **** 	if(*p_frame != stuffing_byte){
 547              		.loc 1 195 0 is_stmt 0 discriminator 1
 548 005c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 549 005e FF2B     		cmp	r3, #255
 550 0060 0ED1     		bne	.L51
 195:../Src/xl_320.c **** 	if(*p_frame != stuffing_byte){
 551              		.loc 1 195 0 discriminator 2
 552 0062 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 553 0064 FD2B     		cmp	r3, #253
 554 0066 0BD1     		bne	.L51
 196:../Src/xl_320.c **** 	  err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 555              		.loc 1 196 0 is_stmt 1
 556 0068 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 557 006a FD2B     		cmp	r3, #253
 558 006c 05D0     		beq	.L52
 197:../Src/xl_320.c **** 	  return 1;
 559              		.loc 1 197 0
 560 006e 4FF48072 		mov	r2, #256
 561 0072 064B     		ldr	r3, .L55
 562 0074 1A80     		strh	r2, [r3]	@ movhi
 198:../Src/xl_320.c **** 	}
 563              		.loc 1 198 0
 564 0076 0120     		movs	r0, #1
 565 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 566              	.LVL35:
 567              	.L52:
 200:../Src/xl_320.c **** 	start_stuffing = p_frame;
 568              		.loc 1 200 0
 569 007a 971C     		adds	r7, r2, #2
 570              	.LVL36:
 571 007c 3946     		mov	r1, r7
 201:../Src/xl_320.c ****       }
 572              		.loc 1 201 0
 573 007e 00E0     		b	.L50
 574              	.LVL37:
 575              	.L51:
 204:../Src/xl_320.c ****       }
 576              		.loc 1 204 0
 577 0080 0137     		adds	r7, r7, #1
 578              	.LVL38:
 579              	.L50:
ARM GAS  /tmp/ccJWln4X.s 			page 18


 200:../Src/xl_320.c **** 	start_stuffing = p_frame;
 580              		.loc 1 200 0
 581 0082 0A46     		mov	r2, r1
 582              	.LVL39:
 583              	.L49:
 192:../Src/xl_320.c ****     packet->params[packet->nb_params++] = *(p_frame++);
 584              		.loc 1 192 0
 585 0084 B242     		cmp	r2, r6
 586 0086 DCD1     		bne	.L53
 209:../Src/xl_320.c **** }
 587              		.loc 1 209 0
 588 0088 0020     		movs	r0, #0
 210:../Src/xl_320.c **** 
 589              		.loc 1 210 0
 590 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 591              	.LVL40:
 592              	.L56:
 593              		.align	2
 594              	.L55:
 595 008c 00000000 		.word	.LANCHOR1
 596              		.cfi_endproc
 597              	.LFE10:
 599              		.section	.text.XL_Receive,"ax",%progbits
 600              		.align	2
 601              		.global	XL_Receive
 602              		.thumb
 603              		.thumb_func
 605              	XL_Receive:
 606              	.LFB11:
 212:../Src/xl_320.c ****   //Evite un overflow
 607              		.loc 1 212 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              	.LVL41:
 612 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 613              	.LCFI4:
 614              		.cfi_def_cfa_offset 24
 615              		.cfi_offset 3, -24
 616              		.cfi_offset 4, -20
 617              		.cfi_offset 5, -16
 618              		.cfi_offset 6, -12
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 214:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 621              		.loc 1 214 0
 622 0002 2029     		cmp	r1, #32
 623 0004 03D9     		bls	.L58
 215:../Src/xl_320.c ****     return 1;
 624              		.loc 1 215 0
 625 0006 0120     		movs	r0, #1
 626              	.LVL42:
 627 0008 224B     		ldr	r3, .L65
 628 000a 1880     		strh	r0, [r3]	@ movhi
 216:../Src/xl_320.c ****   }
 629              		.loc 1 216 0
 630 000c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccJWln4X.s 			page 19


 631              	.LVL43:
 632              	.L58:
 633 000e 1746     		mov	r7, r2
 634 0010 0D46     		mov	r5, r1
 635 0012 0446     		mov	r4, r0
 220:../Src/xl_320.c ****   
 636              		.loc 1 220 0
 637 0014 8368     		ldr	r3, [r0, #8]
 638 0016 0120     		movs	r0, #1
 639              	.LVL44:
 640 0018 9847     		blx	r3
 641              	.LVL45:
 222:../Src/xl_320.c ****   interface->fsm.remaining_bytes = 0;
 642              		.loc 1 222 0
 643 001a 1F4B     		ldr	r3, .L65+4
 644 001c 2361     		str	r3, [r4, #16]
 223:../Src/xl_320.c ****   interface->fsm.buffer = interface->buffer;
 645              		.loc 1 223 0
 646 001e 0023     		movs	r3, #0
 647 0020 A382     		strh	r3, [r4, #20]	@ movhi
 224:../Src/xl_320.c ****   interface->fsm.p_buffer = interface->buffer;
 648              		.loc 1 224 0
 649 0022 04F12406 		add	r6, r4, #36
 650 0026 A661     		str	r6, [r4, #24]
 225:../Src/xl_320.c ****   interface->fsm.done = 0;
 651              		.loc 1 225 0
 652 0028 E661     		str	r6, [r4, #28]
 226:../Src/xl_320.c **** 
 653              		.loc 1 226 0
 654 002a 84F82030 		strb	r3, [r4, #32]
 229:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 655              		.loc 1 229 0
 656 002e 6368     		ldr	r3, [r4, #4]
 657 0030 3A46     		mov	r2, r7
 658 0032 2946     		mov	r1, r5
 659 0034 3046     		mov	r0, r6
 660 0036 9847     		blx	r3
 661              	.LVL46:
 662 0038 28B1     		cbz	r0, .L60
 230:../Src/xl_320.c ****     return 1;
 663              		.loc 1 230 0
 664 003a 40F20112 		movw	r2, #257
 665 003e 154B     		ldr	r3, .L65
 666 0040 1A80     		strh	r2, [r3]	@ movhi
 231:../Src/xl_320.c ****   }
 667              		.loc 1 231 0
 668 0042 0120     		movs	r0, #1
 669 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 670              	.LVL47:
 671              	.L60:
 236:../Src/xl_320.c **** 
 672              		.loc 1 236 0 discriminator 2
 673 0046 2046     		mov	r0, r4
 674 0048 50F8103F 		ldr	r3, [r0, #16]!
 675 004c 9847     		blx	r3
 676              	.LVL48:
 244:../Src/xl_320.c **** 
ARM GAS  /tmp/ccJWln4X.s 			page 20


 677              		.loc 1 244 0 discriminator 2
 678 004e E369     		ldr	r3, [r4, #28]
 679 0050 A269     		ldr	r2, [r4, #24]
 680 0052 9342     		cmp	r3, r2
 681 0054 03D0     		beq	.L61
 244:../Src/xl_320.c **** 
 682              		.loc 1 244 0 is_stmt 0 discriminator 1
 683 0056 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 684 005a 0129     		cmp	r1, #1
 685 005c F3D1     		bne	.L60
 686              	.L61:
 247:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 687              		.loc 1 247 0 is_stmt 1
 688 005e 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 689 0062 29B9     		cbnz	r1, .L62
 248:../Src/xl_320.c ****     return 1;
 690              		.loc 1 248 0
 691 0064 4FF48072 		mov	r2, #256
 692 0068 0A4B     		ldr	r3, .L65
 693 006a 1A80     		strh	r2, [r3]	@ movhi
 249:../Src/xl_320.c ****   }
 694              		.loc 1 249 0
 695 006c 0120     		movs	r0, #1
 696 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 697              	.LVL49:
 698              	.L62:
 253:../Src/xl_320.c ****   if(r_packet_size != packet_size){
 699              		.loc 1 253 0
 700 0070 9B1A     		subs	r3, r3, r2
 701 0072 9BB2     		uxth	r3, r3
 702              	.LVL50:
 254:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 703              		.loc 1 254 0
 704 0074 9D42     		cmp	r5, r3
 705 0076 05D0     		beq	.L63
 255:../Src/xl_320.c ****     return 1;
 706              		.loc 1 255 0
 707 0078 4FF48072 		mov	r2, #256
 708 007c 054B     		ldr	r3, .L65
 709              	.LVL51:
 710 007e 1A80     		strh	r2, [r3]	@ movhi
 256:../Src/xl_320.c ****   }
 711              		.loc 1 256 0
 712 0080 0120     		movs	r0, #1
 713 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 714              	.LVL52:
 715              	.L63:
 259:../Src/xl_320.c **** }
 716              		.loc 1 259 0
 717 0084 2A46     		mov	r2, r5
 718 0086 3146     		mov	r1, r6
 719 0088 04F14400 		add	r0, r4, #68
 720 008c FFF7FEFF 		bl	XL_Extract_Status_Packet
 721              	.LVL53:
 260:../Src/xl_320.c **** 
 722              		.loc 1 260 0
 723 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccJWln4X.s 			page 21


 724              	.LVL54:
 725              	.L66:
 726 0092 00BF     		.align	2
 727              	.L65:
 728 0094 00000000 		.word	.LANCHOR1
 729 0098 00000000 		.word	XL_FSM_HEADER_0
 730              		.cfi_endproc
 731              	.LFE11:
 733              		.section	.text.XL_Build_Frame,"ax",%progbits
 734              		.align	2
 735              		.global	XL_Build_Frame
 736              		.thumb
 737              		.thumb_func
 739              	XL_Build_Frame:
 740              	.LFB12:
 265:../Src/xl_320.c ****   //Vérification des arguments
 741              		.loc 1 265 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 745              	.LVL55:
 267:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 746              		.loc 1 267 0
 747 0000 28B1     		cbz	r0, .L68
 748 0002 0246     		mov	r2, r0
 267:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 749              		.loc 1 267 0 is_stmt 0 discriminator 1
 750 0004 4368     		ldr	r3, [r0, #4]
 751 0006 0BB9     		cbnz	r3, .L69
 267:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 752              		.loc 1 267 0 discriminator 2
 753 0008 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 754 000a 03B9     		cbnz	r3, .L68
 755              	.L69:
 267:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 756              		.loc 1 267 0 discriminator 4
 757 000c 19B9     		cbnz	r1, .L70
 758              	.L68:
 268:../Src/xl_320.c ****     return 0;
 759              		.loc 1 268 0 is_stmt 1
 760 000e 0020     		movs	r0, #0
 761              	.LVL56:
 762 0010 2C4B     		ldr	r3, .L81
 763 0012 1880     		strh	r0, [r3]	@ movhi
 326:../Src/xl_320.c **** 
 764              		.loc 1 326 0
 765 0014 7047     		bx	lr
 766              	.LVL57:
 767              	.L70:
 272:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 768              		.loc 1 272 0
 769 0016 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 770 0018 FD2B     		cmp	r3, #253
 771 001a 01D0     		beq	.L72
 272:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 772              		.loc 1 272 0 is_stmt 0 discriminator 1
 773 001c FF2B     		cmp	r3, #255
ARM GAS  /tmp/ccJWln4X.s 			page 22


 774 001e 03D1     		bne	.L73
 775              	.L72:
 273:../Src/xl_320.c ****     return 0;
 776              		.loc 1 273 0 is_stmt 1
 777 0020 0020     		movs	r0, #0
 778              	.LVL58:
 779 0022 284B     		ldr	r3, .L81
 780 0024 1880     		strh	r0, [r3]	@ movhi
 274:../Src/xl_320.c ****   }
 781              		.loc 1 274 0
 782 0026 7047     		bx	lr
 783              	.LVL59:
 784              	.L73:
 265:../Src/xl_320.c ****   //Vérification des arguments
 785              		.loc 1 265 0
 786 0028 70B5     		push	{r4, r5, r6, lr}
 787              	.LCFI5:
 788              		.cfi_def_cfa_offset 16
 789              		.cfi_offset 4, -16
 790              		.cfi_offset 5, -12
 791              		.cfi_offset 6, -8
 792              		.cfi_offset 14, -4
 277:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 793              		.loc 1 277 0
 794 002a 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 795 002c 03F10A00 		add	r0, r3, #10
 796              	.LVL60:
 797 0030 254C     		ldr	r4, .L81+4
 798 0032 A4FB0343 		umull	r4, r3, r4, r3
 799 0036 00EB5303 		add	r3, r0, r3, lsr #1
 800 003a 202B     		cmp	r3, #32
 801 003c 04DD     		ble	.L74
 278:../Src/xl_320.c ****     return 0;
 802              		.loc 1 278 0
 803 003e 0122     		movs	r2, #1
 804              	.LVL61:
 805 0040 204B     		ldr	r3, .L81
 806 0042 1A80     		strh	r2, [r3]	@ movhi
 279:../Src/xl_320.c ****   }
 807              		.loc 1 279 0
 808 0044 0020     		movs	r0, #0
 809 0046 70BD     		pop	{r4, r5, r6, pc}
 810              	.LVL62:
 811              	.L74:
 284:../Src/xl_320.c ****   *(p_buffer++) = header[1];
 812              		.loc 1 284 0
 813 0048 FF23     		movs	r3, #255
 814 004a 0B70     		strb	r3, [r1]
 815              	.LVL63:
 285:../Src/xl_320.c ****   *(p_buffer++) = header[2];
 816              		.loc 1 285 0
 817 004c 4B70     		strb	r3, [r1, #1]
 818              	.LVL64:
 286:../Src/xl_320.c ****   *(p_buffer++) = header[3];
 819              		.loc 1 286 0
 820 004e FD23     		movs	r3, #253
 821 0050 8B70     		strb	r3, [r1, #2]
ARM GAS  /tmp/ccJWln4X.s 			page 23


 822              	.LVL65:
 287:../Src/xl_320.c **** 
 823              		.loc 1 287 0
 824 0052 0023     		movs	r3, #0
 825 0054 CB70     		strb	r3, [r1, #3]
 826              	.LVL66:
 290:../Src/xl_320.c **** 
 827              		.loc 1 290 0
 828 0056 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 829 0058 0871     		strb	r0, [r1, #4]
 293:../Src/xl_320.c **** 
 830              		.loc 1 293 0
 831 005a CD1D     		adds	r5, r1, #7
 832              	.LVL67:
 298:../Src/xl_320.c **** 
 833              		.loc 1 298 0
 834 005c 01F10804 		add	r4, r1, #8
 835              	.LVL68:
 836 0060 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 837 0062 C871     		strb	r0, [r1, #7]
 838              	.LVL69:
 302:../Src/xl_320.c ****     *(p_buffer++) = packet->params[i];
 839              		.loc 1 302 0
 840 0064 17E0     		b	.L75
 841              	.LVL70:
 842              	.L78:
 303:../Src/xl_320.c ****     if(p_buffer - start_stuffing == 3){
 843              		.loc 1 303 0
 844 0066 601C     		adds	r0, r4, #1
 845              	.LVL71:
 846 0068 5668     		ldr	r6, [r2, #4]
 847 006a F65C     		ldrb	r6, [r6, r3]	@ zero_extendqisi2
 848 006c 2670     		strb	r6, [r4]
 304:../Src/xl_320.c ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 849              		.loc 1 304 0
 850 006e 461B     		subs	r6, r0, r5
 851 0070 032E     		cmp	r6, #3
 852 0072 0ED1     		bne	.L76
 305:../Src/xl_320.c **** 	*(p_buffer++) = stuffing_byte;
 853              		.loc 1 305 0
 854 0074 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 855 0076 FF2E     		cmp	r6, #255
 856 0078 0AD1     		bne	.L77
 305:../Src/xl_320.c **** 	*(p_buffer++) = stuffing_byte;
 857              		.loc 1 305 0 is_stmt 0 discriminator 1
 858 007a 6E78     		ldrb	r6, [r5, #1]	@ zero_extendqisi2
 859 007c FF2E     		cmp	r6, #255
 860 007e 07D1     		bne	.L77
 305:../Src/xl_320.c **** 	*(p_buffer++) = stuffing_byte;
 861              		.loc 1 305 0 discriminator 2
 862 0080 AE78     		ldrb	r6, [r5, #2]	@ zero_extendqisi2
 863 0082 FD2E     		cmp	r6, #253
 864 0084 04D1     		bne	.L77
 306:../Src/xl_320.c **** 	start_stuffing = p_buffer;
 865              		.loc 1 306 0 is_stmt 1
 866 0086 A01C     		adds	r0, r4, #2
 867              	.LVL72:
ARM GAS  /tmp/ccJWln4X.s 			page 24


 868 0088 FD25     		movs	r5, #253
 869              	.LVL73:
 870 008a 6570     		strb	r5, [r4, #1]
 871              	.LVL74:
 307:../Src/xl_320.c ****       }else{
 872              		.loc 1 307 0
 873 008c 0546     		mov	r5, r0
 874 008e 00E0     		b	.L76
 875              	.LVL75:
 876              	.L77:
 309:../Src/xl_320.c ****       }
 877              		.loc 1 309 0
 878 0090 0135     		adds	r5, r5, #1
 879              	.LVL76:
 880              	.L76:
 302:../Src/xl_320.c ****     *(p_buffer++) = packet->params[i];
 881              		.loc 1 302 0 discriminator 2
 882 0092 0133     		adds	r3, r3, #1
 883              	.LVL77:
 884 0094 0446     		mov	r4, r0
 885              	.LVL78:
 886              	.L75:
 302:../Src/xl_320.c ****     *(p_buffer++) = packet->params[i];
 887              		.loc 1 302 0 is_stmt 0 discriminator 1
 888 0096 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 889 0098 8342     		cmp	r3, r0
 890 009a E4DB     		blt	.L78
 891 009c 0D46     		mov	r5, r1
 892              	.LVL79:
 316:../Src/xl_320.c ****   buffer[5] = packet_length & 0x00FF;
 893              		.loc 1 316 0 is_stmt 1
 894 009e 621A     		subs	r2, r4, r1
 895              	.LVL80:
 896 00a0 92B2     		uxth	r2, r2
 897 00a2 531F     		subs	r3, r2, #5
 898              	.LVL81:
 899 00a4 9BB2     		uxth	r3, r3
 900              	.LVL82:
 317:../Src/xl_320.c ****   buffer[6] = packet_length >> 8;
 901              		.loc 1 317 0
 902 00a6 4B71     		strb	r3, [r1, #5]
 318:../Src/xl_320.c **** 
 903              		.loc 1 318 0
 904 00a8 1B0A     		lsrs	r3, r3, #8
 905              	.LVL83:
 906 00aa 8B71     		strb	r3, [r1, #6]
 321:../Src/xl_320.c ****   *(p_buffer++) = crc & 0x00FF;
 907              		.loc 1 321 0
 908 00ac 0020     		movs	r0, #0
 909 00ae FFF7FEFF 		bl	XL_Update_CRC
 910              	.LVL84:
 322:../Src/xl_320.c ****   *(p_buffer++) = crc >> 8;
 911              		.loc 1 322 0
 912 00b2 2146     		mov	r1, r4
 913 00b4 01F8020B 		strb	r0, [r1], #2
 914              	.LVL85:
 323:../Src/xl_320.c ****   
ARM GAS  /tmp/ccJWln4X.s 			page 25


 915              		.loc 1 323 0
 916 00b8 000A     		lsrs	r0, r0, #8
 917              	.LVL86:
 918 00ba 6070     		strb	r0, [r4, #1]
 325:../Src/xl_320.c **** }
 919              		.loc 1 325 0
 920 00bc 481B     		subs	r0, r1, r5
 921 00be C0B2     		uxtb	r0, r0
 326:../Src/xl_320.c **** 
 922              		.loc 1 326 0
 923 00c0 70BD     		pop	{r4, r5, r6, pc}
 924              	.LVL87:
 925              	.L82:
 926 00c2 00BF     		.align	2
 927              	.L81:
 928 00c4 00000000 		.word	.LANCHOR1
 929 00c8 ABAAAAAA 		.word	-1431655765
 930              		.cfi_endproc
 931              	.LFE12:
 933              		.section	.text.XL_Send,"ax",%progbits
 934              		.align	2
 935              		.global	XL_Send
 936              		.thumb
 937              		.thumb_func
 939              	XL_Send:
 940              	.LFB13:
 328:../Src/xl_320.c ****   //Préparation de la trame
 941              		.loc 1 328 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL88:
 946 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 947              	.LCFI6:
 948              		.cfi_def_cfa_offset 24
 949              		.cfi_offset 3, -24
 950              		.cfi_offset 4, -20
 951              		.cfi_offset 5, -16
 952              		.cfi_offset 6, -12
 953              		.cfi_offset 7, -8
 954              		.cfi_offset 14, -4
 955 0002 0446     		mov	r4, r0
 956 0004 0846     		mov	r0, r1
 957              	.LVL89:
 958 0006 1746     		mov	r7, r2
 330:../Src/xl_320.c ****   if(!length){
 959              		.loc 1 330 0
 960 0008 04F12405 		add	r5, r4, #36
 961 000c 2946     		mov	r1, r5
 962              	.LVL90:
 963 000e FFF7FEFF 		bl	XL_Build_Frame
 964              	.LVL91:
 331:../Src/xl_320.c ****     return 1;
 965              		.loc 1 331 0
 966 0012 78B1     		cbz	r0, .L85
 967 0014 0646     		mov	r6, r0
 336:../Src/xl_320.c ****   if(interface->send(interface->buffer, length, timeout) == 1){
ARM GAS  /tmp/ccJWln4X.s 			page 26


 968              		.loc 1 336 0
 969 0016 A368     		ldr	r3, [r4, #8]
 970 0018 0020     		movs	r0, #0
 971              	.LVL92:
 972 001a 9847     		blx	r3
 973              	.LVL93:
 337:../Src/xl_320.c ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 974              		.loc 1 337 0
 975 001c 2368     		ldr	r3, [r4]
 976 001e 3A46     		mov	r2, r7
 977 0020 B1B2     		uxth	r1, r6
 978 0022 2846     		mov	r0, r5
 979 0024 9847     		blx	r3
 980              	.LVL94:
 981 0026 0128     		cmp	r0, #1
 982 0028 06D1     		bne	.L86
 338:../Src/xl_320.c ****     return 1;
 983              		.loc 1 338 0
 984 002a 40F20112 		movw	r2, #257
 985 002e 034B     		ldr	r3, .L88
 986 0030 1A80     		strh	r2, [r3]	@ movhi
 339:../Src/xl_320.c ****   }
 987              		.loc 1 339 0
 988 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 989              	.LVL95:
 990              	.L85:
 332:../Src/xl_320.c ****   }
 991              		.loc 1 332 0
 992 0034 0120     		movs	r0, #1
 993              	.LVL96:
 994 0036 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 995              	.LVL97:
 996              	.L86:
 341:../Src/xl_320.c **** }
 997              		.loc 1 341 0
 998 0038 0020     		movs	r0, #0
 342:../Src/xl_320.c **** 
 999              		.loc 1 342 0
 1000 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1001              	.LVL98:
 1002              	.L89:
 1003              		.align	2
 1004              	.L88:
 1005 003c 00000000 		.word	.LANCHOR1
 1006              		.cfi_endproc
 1007              	.LFE13:
 1009              		.section	.text.XL_Get_Error,"ax",%progbits
 1010              		.align	2
 1011              		.global	XL_Get_Error
 1012              		.thumb
 1013              		.thumb_func
 1015              	XL_Get_Error:
 1016              	.LFB15:
 387:../Src/xl_320.c **** 
 388:../Src/xl_320.c **** //======================================
 389:../Src/xl_320.c **** //         GESTION DES ERREURS      
 390:../Src/xl_320.c **** //======================================
ARM GAS  /tmp/ccJWln4X.s 			page 27


 391:../Src/xl_320.c **** uint16_t XL_Get_Error(){
 1017              		.loc 1 391 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 392:../Src/xl_320.c ****   return err;
 393:../Src/xl_320.c **** }
 1022              		.loc 1 393 0
 1023 0000 014B     		ldr	r3, .L91
 1024 0002 1888     		ldrh	r0, [r3]
 1025 0004 7047     		bx	lr
 1026              	.L92:
 1027 0006 00BF     		.align	2
 1028              	.L91:
 1029 0008 00000000 		.word	.LANCHOR1
 1030              		.cfi_endproc
 1031              	.LFE15:
 1033              		.section	.text.XL_Check_Status,"ax",%progbits
 1034              		.align	2
 1035              		.global	XL_Check_Status
 1036              		.thumb
 1037              		.thumb_func
 1039              	XL_Check_Status:
 1040              	.LFB16:
 394:../Src/xl_320.c **** 
 395:../Src/xl_320.c **** uint8_t XL_Check_Status(XL *servo){
 1041              		.loc 1 395 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045              		@ link register save eliminated.
 1046              	.LVL99:
 396:../Src/xl_320.c ****   if(XL_STATUS_ERROR(servo->interface->status.err) != 0){
 1047              		.loc 1 396 0
 1048 0000 4368     		ldr	r3, [r0, #4]
 1049 0002 93F84500 		ldrb	r0, [r3, #69]	@ zero_extendqisi2
 1050              	.LVL100:
 1051 0006 10F03F00 		ands	r0, r0, #63
 1052 000a 04D0     		beq	.L94
 397:../Src/xl_320.c ****     err = XL_ERR_STATUS | XL_STATUS_ERROR(servo->interface->status.err);
 1053              		.loc 1 397 0
 1054 000c 40F40070 		orr	r0, r0, #512
 1055 0010 014B     		ldr	r3, .L95
 1056 0012 1880     		strh	r0, [r3]	@ movhi
 398:../Src/xl_320.c ****     return 1;
 1057              		.loc 1 398 0
 1058 0014 0120     		movs	r0, #1
 1059              	.L94:
 399:../Src/xl_320.c ****   }
 400:../Src/xl_320.c ****   return 0;
 401:../Src/xl_320.c **** }
 1060              		.loc 1 401 0
 1061 0016 7047     		bx	lr
 1062              	.L96:
 1063              		.align	2
 1064              	.L95:
ARM GAS  /tmp/ccJWln4X.s 			page 28


 1065 0018 00000000 		.word	.LANCHOR1
 1066              		.cfi_endproc
 1067              	.LFE16:
 1069              		.section	.text.XL_Ping,"ax",%progbits
 1070              		.align	2
 1071              		.global	XL_Ping
 1072              		.thumb
 1073              		.thumb_func
 1075              	XL_Ping:
 1076              	.LFB18:
 402:../Src/xl_320.c **** 
 403:../Src/xl_320.c **** uint8_t XL_Check_Alert(XL *servo){
 404:../Src/xl_320.c ****   if(XL_STATUS_ALERT(servo->interface->status.err) == 1){
 405:../Src/xl_320.c ****     uint16_t hw_error;
 406:../Src/xl_320.c ****     if(XL_Get_Hardware_Error(servo, &hw_error) == 1){
 407:../Src/xl_320.c ****       return 1;
 408:../Src/xl_320.c ****     }
 409:../Src/xl_320.c ****     err = XL_ERR_HARDWARE | hw_error;
 410:../Src/xl_320.c ****     return 1;
 411:../Src/xl_320.c ****   }
 412:../Src/xl_320.c ****   return 0;
 413:../Src/xl_320.c **** }
 414:../Src/xl_320.c **** 
 415:../Src/xl_320.c **** 
 416:../Src/xl_320.c **** //======================================
 417:../Src/xl_320.c **** //         JEU D'INSTRUCTIONS      
 418:../Src/xl_320.c **** //======================================
 419:../Src/xl_320.c **** uint8_t XL_Ping(XL *servo){
 1077              		.loc 1 419 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 8
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              	.LVL101:
 420:../Src/xl_320.c ****   if(servo == 0){
 1082              		.loc 1 420 0
 1083 0000 20B9     		cbnz	r0, .L98
 421:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1084              		.loc 1 421 0
 1085 0002 0022     		movs	r2, #0
 1086 0004 114B     		ldr	r3, .L101
 1087 0006 1A80     		strh	r2, [r3]	@ movhi
 422:../Src/xl_320.c ****     return 1;
 1088              		.loc 1 422 0
 1089 0008 0120     		movs	r0, #1
 1090              	.LVL102:
 423:../Src/xl_320.c ****   }
 424:../Src/xl_320.c ****   
 425:../Src/xl_320.c ****   XL_Instruction_Packet packet;
 426:../Src/xl_320.c ****   packet.id = servo->id;
 427:../Src/xl_320.c ****   packet.instruction = XL_PING;
 428:../Src/xl_320.c ****   packet.nb_params = 0;
 429:../Src/xl_320.c ****   packet.params = 0;
 430:../Src/xl_320.c **** 
 431:../Src/xl_320.c ****   //Envoi de l'instruction
 432:../Src/xl_320.c ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 433:../Src/xl_320.c ****     return 1;
 434:../Src/xl_320.c ****   }
ARM GAS  /tmp/ccJWln4X.s 			page 29


 435:../Src/xl_320.c **** 
 436:../Src/xl_320.c ****   //Réception de la réponse
 437:../Src/xl_320.c ****   if(XL_Receive(servo->interface, 14, XL_DEFAULT_TIMEOUT) == 1){
 438:../Src/xl_320.c ****     return 1;
 439:../Src/xl_320.c ****   }
 440:../Src/xl_320.c **** 
 441:../Src/xl_320.c ****   //Vérification de la réponse
 442:../Src/xl_320.c ****   return XL_Check_Status(servo);
 443:../Src/xl_320.c **** }
 1091              		.loc 1 443 0
 1092 000a 7047     		bx	lr
 1093              	.LVL103:
 1094              	.L98:
 419:../Src/xl_320.c ****   if(servo == 0){
 1095              		.loc 1 419 0
 1096 000c 10B5     		push	{r4, lr}
 1097              	.LCFI7:
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 4, -8
 1100              		.cfi_offset 14, -4
 1101 000e 82B0     		sub	sp, sp, #8
 1102              	.LCFI8:
 1103              		.cfi_def_cfa_offset 16
 1104 0010 0446     		mov	r4, r0
 426:../Src/xl_320.c ****   packet.instruction = XL_PING;
 1105              		.loc 1 426 0
 1106 0012 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1107 0014 8DF80030 		strb	r3, [sp]
 427:../Src/xl_320.c ****   packet.nb_params = 0;
 1108              		.loc 1 427 0
 1109 0018 0122     		movs	r2, #1
 1110 001a 8DF80120 		strb	r2, [sp, #1]
 428:../Src/xl_320.c ****   packet.params = 0;
 1111              		.loc 1 428 0
 1112 001e 0023     		movs	r3, #0
 1113 0020 8DF80230 		strb	r3, [sp, #2]
 429:../Src/xl_320.c **** 
 1114              		.loc 1 429 0
 1115 0024 0193     		str	r3, [sp, #4]
 432:../Src/xl_320.c ****     return 1;
 1116              		.loc 1 432 0
 1117 0026 6946     		mov	r1, sp
 1118 0028 4068     		ldr	r0, [r0, #4]
 1119              	.LVL104:
 1120 002a FFF7FEFF 		bl	XL_Send
 1121              	.LVL105:
 1122 002e 0128     		cmp	r0, #1
 1123 0030 09D0     		beq	.L99
 437:../Src/xl_320.c ****     return 1;
 1124              		.loc 1 437 0
 1125 0032 0122     		movs	r2, #1
 1126 0034 0E21     		movs	r1, #14
 1127 0036 6068     		ldr	r0, [r4, #4]
 1128 0038 FFF7FEFF 		bl	XL_Receive
 1129              	.LVL106:
 1130 003c 0128     		cmp	r0, #1
 1131 003e 02D0     		beq	.L99
ARM GAS  /tmp/ccJWln4X.s 			page 30


 442:../Src/xl_320.c **** }
 1132              		.loc 1 442 0
 1133 0040 2046     		mov	r0, r4
 1134 0042 FFF7FEFF 		bl	XL_Check_Status
 1135              	.LVL107:
 1136              	.L99:
 1137              		.loc 1 443 0
 1138 0046 02B0     		add	sp, sp, #8
 1139              	.LCFI9:
 1140              		.cfi_def_cfa_offset 8
 1141              		@ sp needed
 1142 0048 10BD     		pop	{r4, pc}
 1143              	.LVL108:
 1144              	.L102:
 1145 004a 00BF     		.align	2
 1146              	.L101:
 1147 004c 00000000 		.word	.LANCHOR1
 1148              		.cfi_endproc
 1149              	.LFE18:
 1151              		.section	.text.XL_Discover,"ax",%progbits
 1152              		.align	2
 1153              		.global	XL_Discover
 1154              		.thumb
 1155              		.thumb_func
 1157              	XL_Discover:
 1158              	.LFB19:
 444:../Src/xl_320.c **** 
 445:../Src/xl_320.c **** uint8_t XL_Discover(XL_Interface *interface, XL *buffer_servos, uint8_t len_buffer, uint16_t *nb_se
 1159              		.loc 1 445 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 8
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              	.LVL109:
 1164 0000 70B5     		push	{r4, r5, r6, lr}
 1165              	.LCFI10:
 1166              		.cfi_def_cfa_offset 16
 1167              		.cfi_offset 4, -16
 1168              		.cfi_offset 5, -12
 1169              		.cfi_offset 6, -8
 1170              		.cfi_offset 14, -4
 1171 0002 82B0     		sub	sp, sp, #8
 1172              	.LCFI11:
 1173              		.cfi_def_cfa_offset 24
 1174 0004 0E46     		mov	r6, r1
 1175 0006 1546     		mov	r5, r2
 1176 0008 1C46     		mov	r4, r3
 446:../Src/xl_320.c ****   XL servo;
 447:../Src/xl_320.c ****   servo.interface = interface;
 1177              		.loc 1 447 0
 1178 000a 0190     		str	r0, [sp, #4]
 448:../Src/xl_320.c **** 
 449:../Src/xl_320.c ****   *nb_servos = 0;
 1179              		.loc 1 449 0
 1180 000c 0023     		movs	r3, #0
 1181              	.LVL110:
 1182 000e 2380     		strh	r3, [r4]	@ movhi
 450:../Src/xl_320.c ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
ARM GAS  /tmp/ccJWln4X.s 			page 31


 1183              		.loc 1 450 0
 1184 0010 8DF80030 		strb	r3, [sp]
 1185 0014 12E0     		b	.L104
 1186              	.LVL111:
 1187              	.L107:
 451:../Src/xl_320.c ****     if(XL_Ping(&servo) == 0){
 1188              		.loc 1 451 0
 1189 0016 6846     		mov	r0, sp
 1190 0018 FFF7FEFF 		bl	XL_Ping
 1191              	.LVL112:
 1192 001c 48B9     		cbnz	r0, .L105
 452:../Src/xl_320.c ****       buffer_servos[(*nb_servos)++] = servo;
 1193              		.loc 1 452 0
 1194 001e 2388     		ldrh	r3, [r4]
 1195 0020 5A1C     		adds	r2, r3, #1
 1196 0022 2280     		strh	r2, [r4]	@ movhi
 1197 0024 06EBC303 		add	r3, r6, r3, lsl #3
 1198 0028 02AA     		add	r2, sp, #8
 1199 002a 12E90300 		ldmdb	r2, {r0, r1}
 1200 002e 83E80300 		stmia	r3, {r0, r1}
 1201              	.L105:
 450:../Src/xl_320.c ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1202              		.loc 1 450 0 discriminator 2
 1203 0032 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 1204 0036 0133     		adds	r3, r3, #1
 1205 0038 8DF80030 		strb	r3, [sp]
 1206              	.L104:
 450:../Src/xl_320.c ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1207              		.loc 1 450 0 is_stmt 0 discriminator 1
 1208 003c 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 1209 0040 FC2B     		cmp	r3, #252
 1210 0042 03D8     		bhi	.L106
 450:../Src/xl_320.c ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1211              		.loc 1 450 0 discriminator 3
 1212 0044 2288     		ldrh	r2, [r4]
 1213 0046 ABB2     		uxth	r3, r5
 1214 0048 9A42     		cmp	r2, r3
 1215 004a E4D3     		bcc	.L107
 1216              	.L106:
 453:../Src/xl_320.c ****     }
 454:../Src/xl_320.c ****   }
 455:../Src/xl_320.c ****   
 456:../Src/xl_320.c ****   return (*nb_servos > 0)?0:1;
 1217              		.loc 1 456 0 is_stmt 1
 1218 004c 2088     		ldrh	r0, [r4]
 457:../Src/xl_320.c **** }
 1219              		.loc 1 457 0
 1220 004e B0FA80F0 		clz	r0, r0
 1221 0052 4009     		lsrs	r0, r0, #5
 1222 0054 02B0     		add	sp, sp, #8
 1223              	.LCFI12:
 1224              		.cfi_def_cfa_offset 16
 1225              		@ sp needed
 1226 0056 70BD     		pop	{r4, r5, r6, pc}
 1227              		.cfi_endproc
 1228              	.LFE19:
 1230              		.section	.text.XL_Read,"ax",%progbits
ARM GAS  /tmp/ccJWln4X.s 			page 32


 1231              		.align	2
 1232              		.global	XL_Read
 1233              		.thumb
 1234              		.thumb_func
 1236              	XL_Read:
 1237              	.LFB21:
 458:../Src/xl_320.c **** 
 459:../Src/xl_320.c **** uint8_t XL_Say_Hello(XL *servo){
 460:../Src/xl_320.c ****   if(XL_Ping(servo) == 1){
 461:../Src/xl_320.c ****     return 1;
 462:../Src/xl_320.c ****   }
 463:../Src/xl_320.c **** 
 464:../Src/xl_320.c ****   const XL_LED_Color color = (servo->interface->status.err == 0x00)?XL_GREEN:XL_RED;
 465:../Src/xl_320.c ****   uint8_t i;
 466:../Src/xl_320.c ****   for(i = 0; i < servo->id; i++){
 467:../Src/xl_320.c ****     XL_Set_LED(servo, color, XL_NOW);
 468:../Src/xl_320.c ****     servo->interface->delay(500);
 469:../Src/xl_320.c ****     XL_Set_LED(servo, XL_LED_OFF, XL_NOW);
 470:../Src/xl_320.c ****     servo->interface->delay(500);
 471:../Src/xl_320.c ****   }
 472:../Src/xl_320.c **** 
 473:../Src/xl_320.c ****   return 0;
 474:../Src/xl_320.c **** }
 475:../Src/xl_320.c **** 
 476:../Src/xl_320.c **** uint8_t XL_Read(XL *servo, XL_Field field, uint16_t *data){
 1238              		.loc 1 476 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 16
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              	.LVL113:
 477:../Src/xl_320.c ****   if(field > XL_NB_FIELDS-1){
 1243              		.loc 1 477 0
 1244 0000 1E29     		cmp	r1, #30
 1245 0002 04D9     		bls	.L110
 478:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1246              		.loc 1 478 0
 1247 0004 0022     		movs	r2, #0
 1248              	.LVL114:
 1249 0006 224B     		ldr	r3, .L114
 1250 0008 1A80     		strh	r2, [r3]	@ movhi
 479:../Src/xl_320.c ****     return 1;
 1251              		.loc 1 479 0
 1252 000a 0120     		movs	r0, #1
 1253              	.LVL115:
 480:../Src/xl_320.c ****   }
 481:../Src/xl_320.c ****   
 482:../Src/xl_320.c ****   //Préparation de l'instruction READ
 483:../Src/xl_320.c ****   XL_Instruction_Packet packet;
 484:../Src/xl_320.c ****   packet.id = servo->id;
 485:../Src/xl_320.c ****   packet.instruction = XL_READ;
 486:../Src/xl_320.c ****   packet.nb_params = 4;
 487:../Src/xl_320.c ****   uint8_t params[4] = {field_addr[field], 0x00, field_length[field], 0x00};
 488:../Src/xl_320.c ****   packet.params = params;
 489:../Src/xl_320.c **** 
 490:../Src/xl_320.c ****   //Envoi de l'instruction
 491:../Src/xl_320.c ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 492:../Src/xl_320.c ****     return 1;
ARM GAS  /tmp/ccJWln4X.s 			page 33


 493:../Src/xl_320.c ****   }
 494:../Src/xl_320.c ****   
 495:../Src/xl_320.c ****   //Réception de la réponse
 496:../Src/xl_320.c ****   if(XL_Receive(servo->interface, 11+field_length[field], XL_DEFAULT_TIMEOUT) == 1){
 497:../Src/xl_320.c ****     return 1;
 498:../Src/xl_320.c ****   }
 499:../Src/xl_320.c **** 
 500:../Src/xl_320.c ****   //Vérification de la réponse
 501:../Src/xl_320.c ****   if(XL_Check_Status(servo) == 1){
 502:../Src/xl_320.c ****     return 1;
 503:../Src/xl_320.c ****   }
 504:../Src/xl_320.c ****   
 505:../Src/xl_320.c ****   //Récupération de la donnée
 506:../Src/xl_320.c ****   *data = servo->interface->status.params[0];
 507:../Src/xl_320.c ****   if(field_length[field] == 2){
 508:../Src/xl_320.c ****     *data |= servo->interface->status.params[1] << 8;
 509:../Src/xl_320.c ****   }
 510:../Src/xl_320.c ****   return 0;
 511:../Src/xl_320.c **** }
 1254              		.loc 1 511 0
 1255 000c 7047     		bx	lr
 1256              	.LVL116:
 1257              	.L110:
 476:../Src/xl_320.c ****   if(field > XL_NB_FIELDS-1){
 1258              		.loc 1 476 0
 1259 000e 70B5     		push	{r4, r5, r6, lr}
 1260              	.LCFI13:
 1261              		.cfi_def_cfa_offset 16
 1262              		.cfi_offset 4, -16
 1263              		.cfi_offset 5, -12
 1264              		.cfi_offset 6, -8
 1265              		.cfi_offset 14, -4
 1266 0010 84B0     		sub	sp, sp, #16
 1267              	.LCFI14:
 1268              		.cfi_def_cfa_offset 32
 1269 0012 1546     		mov	r5, r2
 1270 0014 0446     		mov	r4, r0
 484:../Src/xl_320.c ****   packet.instruction = XL_READ;
 1271              		.loc 1 484 0
 1272 0016 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1273 0018 8DF80830 		strb	r3, [sp, #8]
 485:../Src/xl_320.c ****   packet.nb_params = 4;
 1274              		.loc 1 485 0
 1275 001c 0223     		movs	r3, #2
 1276 001e 8DF80930 		strb	r3, [sp, #9]
 486:../Src/xl_320.c ****   uint8_t params[4] = {field_addr[field], 0x00, field_length[field], 0x00};
 1277              		.loc 1 486 0
 1278 0022 0423     		movs	r3, #4
 1279 0024 8DF80A30 		strb	r3, [sp, #10]
 487:../Src/xl_320.c ****   packet.params = params;
 1280              		.loc 1 487 0
 1281 0028 1A4B     		ldr	r3, .L114+4
 1282 002a 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1283 002c 8DF80430 		strb	r3, [sp, #4]
 1284 0030 0023     		movs	r3, #0
 1285 0032 8DF80530 		strb	r3, [sp, #5]
 1286 0036 184A     		ldr	r2, .L114+8
ARM GAS  /tmp/ccJWln4X.s 			page 34


 1287              	.LVL117:
 1288 0038 565C     		ldrb	r6, [r2, r1]	@ zero_extendqisi2
 1289 003a 8DF80660 		strb	r6, [sp, #6]
 1290 003e 8DF80730 		strb	r3, [sp, #7]
 488:../Src/xl_320.c **** 
 1291              		.loc 1 488 0
 1292 0042 01AB     		add	r3, sp, #4
 1293 0044 0393     		str	r3, [sp, #12]
 491:../Src/xl_320.c ****     return 1;
 1294              		.loc 1 491 0
 1295 0046 0122     		movs	r2, #1
 1296 0048 02A9     		add	r1, sp, #8
 1297              	.LVL118:
 1298 004a 4068     		ldr	r0, [r0, #4]
 1299              	.LVL119:
 1300 004c FFF7FEFF 		bl	XL_Send
 1301              	.LVL120:
 1302 0050 0128     		cmp	r0, #1
 1303 0052 1BD0     		beq	.L111
 496:../Src/xl_320.c ****     return 1;
 1304              		.loc 1 496 0
 1305 0054 0122     		movs	r2, #1
 1306 0056 06F10B01 		add	r1, r6, #11
 1307 005a 6068     		ldr	r0, [r4, #4]
 1308 005c FFF7FEFF 		bl	XL_Receive
 1309              	.LVL121:
 1310 0060 0128     		cmp	r0, #1
 1311 0062 13D0     		beq	.L111
 501:../Src/xl_320.c ****     return 1;
 1312              		.loc 1 501 0
 1313 0064 2046     		mov	r0, r4
 1314 0066 FFF7FEFF 		bl	XL_Check_Status
 1315              	.LVL122:
 1316 006a 0128     		cmp	r0, #1
 1317 006c 0ED0     		beq	.L111
 506:../Src/xl_320.c ****   if(field_length[field] == 2){
 1318              		.loc 1 506 0
 1319 006e 6368     		ldr	r3, [r4, #4]
 1320 0070 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 1321 0074 2B80     		strh	r3, [r5]	@ movhi
 507:../Src/xl_320.c ****     *data |= servo->interface->status.params[1] << 8;
 1322              		.loc 1 507 0
 1323 0076 022E     		cmp	r6, #2
 1324 0078 07D1     		bne	.L112
 508:../Src/xl_320.c ****   }
 1325              		.loc 1 508 0
 1326 007a 6268     		ldr	r2, [r4, #4]
 1327 007c 92F84820 		ldrb	r2, [r2, #72]	@ zero_extendqisi2
 1328 0080 43EA0223 		orr	r3, r3, r2, lsl #8
 1329 0084 2B80     		strh	r3, [r5]	@ movhi
 510:../Src/xl_320.c **** }
 1330              		.loc 1 510 0
 1331 0086 0020     		movs	r0, #0
 1332 0088 00E0     		b	.L111
 1333              	.L112:
 1334 008a 0020     		movs	r0, #0
 1335              	.L111:
ARM GAS  /tmp/ccJWln4X.s 			page 35


 1336              		.loc 1 511 0
 1337 008c 04B0     		add	sp, sp, #16
 1338              	.LCFI15:
 1339              		.cfi_def_cfa_offset 16
 1340              		@ sp needed
 1341 008e 70BD     		pop	{r4, r5, r6, pc}
 1342              	.LVL123:
 1343              	.L115:
 1344              		.align	2
 1345              	.L114:
 1346 0090 00000000 		.word	.LANCHOR1
 1347 0094 00000000 		.word	.LANCHOR2
 1348 0098 00000000 		.word	.LANCHOR3
 1349              		.cfi_endproc
 1350              	.LFE21:
 1352              		.section	.text.XL_Factory_Reset,"ax",%progbits
 1353              		.align	2
 1354              		.global	XL_Factory_Reset
 1355              		.thumb
 1356              		.thumb_func
 1358              	XL_Factory_Reset:
 1359              	.LFB23:
 512:../Src/xl_320.c **** 
 513:../Src/xl_320.c **** uint8_t XL_Action(XL *servo){
 514:../Src/xl_320.c ****   //Préparation de l'instruction
 515:../Src/xl_320.c ****   XL_Instruction_Packet packet;
 516:../Src/xl_320.c ****   packet.id = servo->id;
 517:../Src/xl_320.c ****   packet.instruction = XL_ACTION;
 518:../Src/xl_320.c ****   packet.nb_params = 0;
 519:../Src/xl_320.c ****   packet.params = 0;
 520:../Src/xl_320.c **** 
 521:../Src/xl_320.c ****   //Envoi de l'instruction
 522:../Src/xl_320.c ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 523:../Src/xl_320.c ****     return 1;
 524:../Src/xl_320.c ****   }
 525:../Src/xl_320.c **** 
 526:../Src/xl_320.c ****   //Réception de la réponse
 527:../Src/xl_320.c ****   if(XL_Receive(servo->interface, 11, XL_DEFAULT_TIMEOUT) == 1){
 528:../Src/xl_320.c ****     return 1;
 529:../Src/xl_320.c ****   }
 530:../Src/xl_320.c **** 
 531:../Src/xl_320.c ****   //En cas d'erreur matérielle
 532:../Src/xl_320.c ****   if(XL_Check_Alert(servo) == 1){
 533:../Src/xl_320.c ****     return 1;
 534:../Src/xl_320.c ****   }
 535:../Src/xl_320.c **** 
 536:../Src/xl_320.c ****   //Vérification du status
 537:../Src/xl_320.c ****   if(XL_Check_Status(servo) == 1){
 538:../Src/xl_320.c ****     return 1;
 539:../Src/xl_320.c ****   }
 540:../Src/xl_320.c **** 
 541:../Src/xl_320.c ****   //Action OK
 542:../Src/xl_320.c ****   return 0;
 543:../Src/xl_320.c **** }
 544:../Src/xl_320.c **** 
 545:../Src/xl_320.c **** uint8_t XL_Factory_Reset(XL *servo){
 1360              		.loc 1 545 0
ARM GAS  /tmp/ccJWln4X.s 			page 36


 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 16
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              	.LVL124:
 1365 0000 10B5     		push	{r4, lr}
 1366              	.LCFI16:
 1367              		.cfi_def_cfa_offset 8
 1368              		.cfi_offset 4, -8
 1369              		.cfi_offset 14, -4
 1370 0002 84B0     		sub	sp, sp, #16
 1371              	.LCFI17:
 1372              		.cfi_def_cfa_offset 24
 1373 0004 0446     		mov	r4, r0
 546:../Src/xl_320.c ****   XL_Instruction_Packet packet;
 547:../Src/xl_320.c ****   packet.id = servo->id;
 1374              		.loc 1 547 0
 1375 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1376 0008 8DF80830 		strb	r3, [sp, #8]
 548:../Src/xl_320.c ****   packet.instruction = XL_FACTORY_RESET;
 1377              		.loc 1 548 0
 1378 000c 0623     		movs	r3, #6
 1379 000e 8DF80930 		strb	r3, [sp, #9]
 549:../Src/xl_320.c ****   packet.nb_params = 1;
 1380              		.loc 1 549 0
 1381 0012 0122     		movs	r2, #1
 1382 0014 8DF80A20 		strb	r2, [sp, #10]
 550:../Src/xl_320.c ****   uint8_t param = 0x02;
 1383              		.loc 1 550 0
 1384 0018 04AB     		add	r3, sp, #16
 1385 001a 0221     		movs	r1, #2
 1386 001c 03F8091D 		strb	r1, [r3, #-9]!
 551:../Src/xl_320.c ****   packet.params = &param;
 1387              		.loc 1 551 0
 1388 0020 0393     		str	r3, [sp, #12]
 552:../Src/xl_320.c **** 
 553:../Src/xl_320.c ****   //Envoi de l'instruction
 554:../Src/xl_320.c ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 1389              		.loc 1 554 0
 1390 0022 02A9     		add	r1, sp, #8
 1391 0024 4068     		ldr	r0, [r0, #4]
 1392              	.LVL125:
 1393 0026 FFF7FEFF 		bl	XL_Send
 1394              	.LVL126:
 1395 002a 0128     		cmp	r0, #1
 1396 002c 05D0     		beq	.L117
 555:../Src/xl_320.c ****     return 1;
 556:../Src/xl_320.c ****   }
 557:../Src/xl_320.c **** 
 558:../Src/xl_320.c ****   //Attente de la réinitialisation
 559:../Src/xl_320.c ****   servo->interface->delay(5000);
 1397              		.loc 1 559 0
 1398 002e 6368     		ldr	r3, [r4, #4]
 1399 0030 DB68     		ldr	r3, [r3, #12]
 1400 0032 41F28830 		movw	r0, #5000
 1401 0036 9847     		blx	r3
 1402              	.LVL127:
 560:../Src/xl_320.c ****   
ARM GAS  /tmp/ccJWln4X.s 			page 37


 561:../Src/xl_320.c ****   return 0;
 1403              		.loc 1 561 0
 1404 0038 0020     		movs	r0, #0
 1405              	.L117:
 562:../Src/xl_320.c **** }
 1406              		.loc 1 562 0
 1407 003a 04B0     		add	sp, sp, #16
 1408              	.LCFI18:
 1409              		.cfi_def_cfa_offset 8
 1410              		@ sp needed
 1411 003c 10BD     		pop	{r4, pc}
 1412              		.cfi_endproc
 1413              	.LFE23:
 1415 003e 00BF     		.section	.text.XL_Reboot,"ax",%progbits
 1416              		.align	2
 1417              		.global	XL_Reboot
 1418              		.thumb
 1419              		.thumb_func
 1421              	XL_Reboot:
 1422              	.LFB24:
 563:../Src/xl_320.c **** 
 564:../Src/xl_320.c **** uint8_t XL_Reboot(XL *servo){
 1423              		.loc 1 564 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 8
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 1427              	.LVL128:
 1428 0000 10B5     		push	{r4, lr}
 1429              	.LCFI19:
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 4, -8
 1432              		.cfi_offset 14, -4
 1433 0002 82B0     		sub	sp, sp, #8
 1434              	.LCFI20:
 1435              		.cfi_def_cfa_offset 16
 1436 0004 0446     		mov	r4, r0
 565:../Src/xl_320.c ****   XL_Instruction_Packet packet;
 566:../Src/xl_320.c ****   packet.id = servo->id;
 1437              		.loc 1 566 0
 1438 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1439 0008 8DF80030 		strb	r3, [sp]
 567:../Src/xl_320.c ****   packet.instruction = XL_REBOOT;
 1440              		.loc 1 567 0
 1441 000c 0823     		movs	r3, #8
 1442 000e 8DF80130 		strb	r3, [sp, #1]
 568:../Src/xl_320.c ****   packet.nb_params = 0;
 1443              		.loc 1 568 0
 1444 0012 0023     		movs	r3, #0
 1445 0014 8DF80230 		strb	r3, [sp, #2]
 569:../Src/xl_320.c ****   packet.params = 0;
 1446              		.loc 1 569 0
 1447 0018 0193     		str	r3, [sp, #4]
 570:../Src/xl_320.c **** 
 571:../Src/xl_320.c ****   //Envoi de l'instruction
 572:../Src/xl_320.c ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 1448              		.loc 1 572 0
 1449 001a 0122     		movs	r2, #1
ARM GAS  /tmp/ccJWln4X.s 			page 38


 1450 001c 6946     		mov	r1, sp
 1451 001e 4068     		ldr	r0, [r0, #4]
 1452              	.LVL129:
 1453 0020 FFF7FEFF 		bl	XL_Send
 1454              	.LVL130:
 1455 0024 0128     		cmp	r0, #1
 1456 0026 05D0     		beq	.L120
 573:../Src/xl_320.c ****     return 1;
 574:../Src/xl_320.c ****   }
 575:../Src/xl_320.c **** 
 576:../Src/xl_320.c ****   //Attente du redémarrage
 577:../Src/xl_320.c ****   servo->interface->delay(5000);
 1457              		.loc 1 577 0
 1458 0028 6368     		ldr	r3, [r4, #4]
 1459 002a DB68     		ldr	r3, [r3, #12]
 1460 002c 41F28830 		movw	r0, #5000
 1461 0030 9847     		blx	r3
 1462              	.LVL131:
 578:../Src/xl_320.c ****   
 579:../Src/xl_320.c ****   return 0;
 1463              		.loc 1 579 0
 1464 0032 0020     		movs	r0, #0
 1465              	.L120:
 580:../Src/xl_320.c **** }
 1466              		.loc 1 580 0
 1467 0034 02B0     		add	sp, sp, #8
 1468              	.LCFI21:
 1469              		.cfi_def_cfa_offset 8
 1470              		@ sp needed
 1471 0036 10BD     		pop	{r4, pc}
 1472              		.cfi_endproc
 1473              	.LFE24:
 1475              		.section	.text.XL_Configure_Baud_Rate,"ax",%progbits
 1476              		.align	2
 1477              		.global	XL_Configure_Baud_Rate
 1478              		.thumb
 1479              		.thumb_func
 1481              	XL_Configure_Baud_Rate:
 1482              	.LFB27:
 581:../Src/xl_320.c **** 
 582:../Src/xl_320.c **** uint8_t XL_Write(XL *servo, XL_Field field, uint16_t data, uint8_t size, uint8_t now){
 583:../Src/xl_320.c ****   if(servo == 0 || field > (XL_NB_FIELDS-1)){
 584:../Src/xl_320.c ****     return 1;
 585:../Src/xl_320.c ****   }
 586:../Src/xl_320.c **** 
 587:../Src/xl_320.c ****   //Préparation de l'instruction
 588:../Src/xl_320.c ****   static XL_Instruction_Packet packet;
 589:../Src/xl_320.c ****   static uint8_t params[4];
 590:../Src/xl_320.c ****   params[0] = field_addr[field];
 591:../Src/xl_320.c ****   params[1] = 0x00;
 592:../Src/xl_320.c ****   params[2] = data & 0xFF;
 593:../Src/xl_320.c ****   params[3] = data >> 8;
 594:../Src/xl_320.c ****   packet.id = servo->id;
 595:../Src/xl_320.c ****   packet.instruction = now?XL_WRITE:XL_REG_WRITE;
 596:../Src/xl_320.c ****   packet.nb_params = 2 + size;
 597:../Src/xl_320.c ****   packet.params = params;
 598:../Src/xl_320.c **** 
ARM GAS  /tmp/ccJWln4X.s 			page 39


 599:../Src/xl_320.c ****   //Envoi de l'instruction
 600:../Src/xl_320.c ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 601:../Src/xl_320.c ****     return 1;
 602:../Src/xl_320.c ****   }
 603:../Src/xl_320.c **** 
 604:../Src/xl_320.c ****   //Réception de la réponse
 605:../Src/xl_320.c ****   if(XL_Receive(servo->interface, 11, XL_DEFAULT_TIMEOUT) == 1){
 606:../Src/xl_320.c ****     return 1;
 607:../Src/xl_320.c ****   }
 608:../Src/xl_320.c **** 
 609:../Src/xl_320.c ****   //En cas d'erreur matérielle
 610:../Src/xl_320.c ****   if(XL_Check_Alert(servo) == 1){
 611:../Src/xl_320.c ****     return 1;
 612:../Src/xl_320.c ****   }
 613:../Src/xl_320.c **** 
 614:../Src/xl_320.c ****   //Vérification du status
 615:../Src/xl_320.c ****   if(XL_Check_Status(servo) == 1){
 616:../Src/xl_320.c ****     return 1;
 617:../Src/xl_320.c ****   }
 618:../Src/xl_320.c **** 
 619:../Src/xl_320.c ****   //Write OK
 620:../Src/xl_320.c ****   return 0;
 621:../Src/xl_320.c **** }
 622:../Src/xl_320.c **** 
 623:../Src/xl_320.c **** //======================================
 624:../Src/xl_320.c **** //         CONFIGURATION EEPROM       
 625:../Src/xl_320.c **** //======================================
 626:../Src/xl_320.c **** uint8_t XL_Configure_ID(XL *servo, uint8_t id){
 627:../Src/xl_320.c ****   if(id > 252){
 628:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 629:../Src/xl_320.c ****     return 1;
 630:../Src/xl_320.c ****   }
 631:../Src/xl_320.c ****   return XL_Write(servo, XL_ID, id, 1, XL_NOW);
 632:../Src/xl_320.c **** }
 633:../Src/xl_320.c **** 
 634:../Src/xl_320.c **** uint8_t XL_Configure_Baud_Rate(XL *servo, XL_Baud_Rate baud_rate){
 1483              		.loc 1 634 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 0
 1486              		@ frame_needed = 0, uses_anonymous_args = 0
 1487              		@ link register save eliminated.
 1488              	.LVL132:
 635:../Src/xl_320.c ****   if(baud_rate != XL_BAUD_RATE_9600 || baud_rate != XL_BAUD_RATE_57600 || baud_rate != XL_BAUD_RATE
 636:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1489              		.loc 1 636 0
 1490 0000 0022     		movs	r2, #0
 1491 0002 024B     		ldr	r3, .L123
 1492 0004 1A80     		strh	r2, [r3]	@ movhi
 637:../Src/xl_320.c ****     return 1;
 638:../Src/xl_320.c ****   }
 639:../Src/xl_320.c ****   return XL_Write(servo, XL_BAUD_RATE, baud_rate, 1, XL_NOW);
 640:../Src/xl_320.c **** }
 1493              		.loc 1 640 0
 1494 0006 0120     		movs	r0, #1
 1495              	.LVL133:
 1496 0008 7047     		bx	lr
 1497              	.L124:
ARM GAS  /tmp/ccJWln4X.s 			page 40


 1498 000a 00BF     		.align	2
 1499              	.L123:
 1500 000c 00000000 		.word	.LANCHOR1
 1501              		.cfi_endproc
 1502              	.LFE27:
 1504              		.section	.text.XL_Configure_Control_Mode,"ax",%progbits
 1505              		.align	2
 1506              		.global	XL_Configure_Control_Mode
 1507              		.thumb
 1508              		.thumb_func
 1510              	XL_Configure_Control_Mode:
 1511              	.LFB31:
 641:../Src/xl_320.c **** 
 642:../Src/xl_320.c **** uint8_t XL_Configure_Return_Delay_Time(XL *servo, uint8_t delay){
 643:../Src/xl_320.c ****   if(delay > 0xFE){
 644:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 645:../Src/xl_320.c ****     return 1;
 646:../Src/xl_320.c ****   }
 647:../Src/xl_320.c ****   return XL_Write(servo, XL_RETURN_DELAY_TIME, delay, 1, XL_NOW);
 648:../Src/xl_320.c **** }
 649:../Src/xl_320.c **** 
 650:../Src/xl_320.c **** uint8_t XL_Configure_CW_Angle_Limit(XL *servo, uint16_t angle){
 651:../Src/xl_320.c ****   if(angle > 0x3FF){
 652:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 653:../Src/xl_320.c ****     return 1;
 654:../Src/xl_320.c ****   }
 655:../Src/xl_320.c ****   return XL_Write(servo, XL_CW_ANGLE_LIMIT, angle, 2, XL_NOW);
 656:../Src/xl_320.c **** }
 657:../Src/xl_320.c **** 
 658:../Src/xl_320.c **** uint8_t XL_Configure_CCW_Angle_Limit(XL *servo, uint16_t angle){
 659:../Src/xl_320.c ****   if(angle > 0x3FF){
 660:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 661:../Src/xl_320.c ****     return 1;
 662:../Src/xl_320.c ****   }
 663:../Src/xl_320.c ****   return XL_Write(servo, XL_CCW_ANGLE_LIMIT, angle, 2, XL_NOW);
 664:../Src/xl_320.c **** }
 665:../Src/xl_320.c ****   
 666:../Src/xl_320.c **** uint8_t XL_Configure_Control_Mode(XL *servo, XL_Mode mode){
 1512              		.loc 1 666 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516              		@ link register save eliminated.
 1517              	.LVL134:
 667:../Src/xl_320.c ****   if(mode != XL_JOIN_MODE || mode != XL_WHEEL_MODE){
 668:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1518              		.loc 1 668 0
 1519 0000 0022     		movs	r2, #0
 1520 0002 024B     		ldr	r3, .L126
 1521 0004 1A80     		strh	r2, [r3]	@ movhi
 669:../Src/xl_320.c ****     return 1;
 670:../Src/xl_320.c ****   }
 671:../Src/xl_320.c ****   return XL_Write(servo, XL_CONTROL_MODE, mode, 1, XL_NOW);
 672:../Src/xl_320.c **** }
 1522              		.loc 1 672 0
 1523 0006 0120     		movs	r0, #1
 1524              	.LVL135:
ARM GAS  /tmp/ccJWln4X.s 			page 41


 1525 0008 7047     		bx	lr
 1526              	.L127:
 1527 000a 00BF     		.align	2
 1528              	.L126:
 1529 000c 00000000 		.word	.LANCHOR1
 1530              		.cfi_endproc
 1531              	.LFE31:
 1533              		.section	.text.XL_Configure_Return_Level,"ax",%progbits
 1534              		.align	2
 1535              		.global	XL_Configure_Return_Level
 1536              		.thumb
 1537              		.thumb_func
 1539              	XL_Configure_Return_Level:
 1540              	.LFB36:
 673:../Src/xl_320.c **** 
 674:../Src/xl_320.c **** uint8_t XL_Configure_Limit_Temperature(XL *servo, uint8_t temp){
 675:../Src/xl_320.c ****   if(temp > 150){
 676:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 677:../Src/xl_320.c ****     return 1;
 678:../Src/xl_320.c ****   }
 679:../Src/xl_320.c ****   return XL_Write(servo, XL_LIMIT_TEMPERATURE, temp, 1, XL_NOW);
 680:../Src/xl_320.c **** }
 681:../Src/xl_320.c **** 
 682:../Src/xl_320.c **** uint8_t XL_Configure_Lower_Limit_Voltage(XL *servo, uint8_t voltage){
 683:../Src/xl_320.c ****   if(voltage < 50 || voltage > 250){
 684:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 685:../Src/xl_320.c ****     return 1;
 686:../Src/xl_320.c ****   }
 687:../Src/xl_320.c ****   return XL_Write(servo, XL_LOWER_LIMIT_VOLTAGE, voltage, 1, XL_NOW);
 688:../Src/xl_320.c **** }
 689:../Src/xl_320.c **** 
 690:../Src/xl_320.c **** uint8_t XL_Configure_Upper_Limit_Voltage(XL *servo, uint8_t voltage){
 691:../Src/xl_320.c ****   if(voltage < 50 || voltage > 250){
 692:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 693:../Src/xl_320.c ****     return 1;
 694:../Src/xl_320.c ****   }
 695:../Src/xl_320.c ****   return XL_Write(servo, XL_UPPER_LIMIT_VOLTAGE, voltage, 1, XL_NOW);
 696:../Src/xl_320.c **** }
 697:../Src/xl_320.c **** 
 698:../Src/xl_320.c **** uint8_t XL_Configure_Max_Torque(XL *servo, uint16_t max_torque){
 699:../Src/xl_320.c ****   if(max_torque > 1023){
 700:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 701:../Src/xl_320.c ****     return 1;
 702:../Src/xl_320.c ****   }
 703:../Src/xl_320.c ****   return XL_Write(servo, XL_MAX_TORQUE, max_torque, 2, XL_NOW);
 704:../Src/xl_320.c **** }
 705:../Src/xl_320.c **** 
 706:../Src/xl_320.c **** uint8_t XL_Configure_Return_Level(XL *servo, XL_Return_Level level){
 1541              		.loc 1 706 0
 1542              		.cfi_startproc
 1543              		@ args = 0, pretend = 0, frame = 0
 1544              		@ frame_needed = 0, uses_anonymous_args = 0
 1545              		@ link register save eliminated.
 1546              	.LVL136:
 707:../Src/xl_320.c ****   if(level != XL_PING_RETURN || level != XL_READ_RETURN || level != XL_ALL_RETURN){
 708:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1547              		.loc 1 708 0
ARM GAS  /tmp/ccJWln4X.s 			page 42


 1548 0000 0022     		movs	r2, #0
 1549 0002 024B     		ldr	r3, .L129
 1550 0004 1A80     		strh	r2, [r3]	@ movhi
 709:../Src/xl_320.c ****     return 1;
 710:../Src/xl_320.c ****   }
 711:../Src/xl_320.c ****   return XL_Write(servo, XL_RETURN_LEVEL, level, 1, XL_NOW);
 712:../Src/xl_320.c **** }
 1551              		.loc 1 712 0
 1552 0006 0120     		movs	r0, #1
 1553              	.LVL137:
 1554 0008 7047     		bx	lr
 1555              	.L130:
 1556 000a 00BF     		.align	2
 1557              	.L129:
 1558 000c 00000000 		.word	.LANCHOR1
 1559              		.cfi_endproc
 1560              	.LFE36:
 1562              		.section	.text.XL_Get_Current_Position,"ax",%progbits
 1563              		.align	2
 1564              		.global	XL_Get_Current_Position
 1565              		.thumb
 1566              		.thumb_func
 1568              	XL_Get_Current_Position:
 1569              	.LFB49:
 713:../Src/xl_320.c **** 
 714:../Src/xl_320.c **** uint8_t XL_Configure_Alarm_Shutdown(XL *servo, XL_Alarm_Shutdown alarm){
 715:../Src/xl_320.c ****   if(alarm > XL_ERROR_OVER_9000){
 716:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 717:../Src/xl_320.c ****     return 1;
 718:../Src/xl_320.c ****   }
 719:../Src/xl_320.c ****   return XL_Write(servo, XL_ALARM_SHUTDOWN, alarm, 1, XL_NOW);
 720:../Src/xl_320.c **** }
 721:../Src/xl_320.c **** 
 722:../Src/xl_320.c **** 
 723:../Src/xl_320.c **** //======================================
 724:../Src/xl_320.c **** //       COMMANDES SERVOMOTEUR       
 725:../Src/xl_320.c **** //======================================
 726:../Src/xl_320.c **** 
 727:../Src/xl_320.c **** uint8_t XL_Power_On(XL *servo, uint8_t now){
 728:../Src/xl_320.c ****   return XL_Write(servo, XL_TORQUE_ENABLE, 1, 1, now);
 729:../Src/xl_320.c **** }
 730:../Src/xl_320.c **** 
 731:../Src/xl_320.c **** uint8_t XL_Power_Off(XL *servo, uint8_t now){
 732:../Src/xl_320.c ****   return XL_Write(servo, XL_TORQUE_ENABLE, 0, 1, now);
 733:../Src/xl_320.c **** }
 734:../Src/xl_320.c **** 
 735:../Src/xl_320.c **** uint8_t XL_Set_LED(XL *servo, XL_LED_Color color, uint8_t now){
 736:../Src/xl_320.c ****   if((uint8_t) color > 7){
 737:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 738:../Src/xl_320.c ****     return 1;
 739:../Src/xl_320.c ****   }
 740:../Src/xl_320.c ****   return XL_Write(servo, XL_LED, color, 1, now);
 741:../Src/xl_320.c **** }
 742:../Src/xl_320.c **** 
 743:../Src/xl_320.c **** uint8_t XL_Set_D_Gain(XL *servo, uint8_t d_gain, uint8_t now){
 744:../Src/xl_320.c ****   if(d_gain > 254){
 745:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
ARM GAS  /tmp/ccJWln4X.s 			page 43


 746:../Src/xl_320.c ****     return 1;
 747:../Src/xl_320.c ****   }
 748:../Src/xl_320.c ****   return XL_Write(servo, XL_D_GAIN, d_gain, 1, now);
 749:../Src/xl_320.c **** }
 750:../Src/xl_320.c **** 
 751:../Src/xl_320.c **** uint8_t XL_Set_I_Gain(XL *servo, uint8_t i_gain, uint8_t now){
 752:../Src/xl_320.c ****   if(i_gain > 254){
 753:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 754:../Src/xl_320.c ****     return 1;
 755:../Src/xl_320.c ****   }
 756:../Src/xl_320.c ****   return XL_Write(servo, XL_I_GAIN, i_gain, 1, now);
 757:../Src/xl_320.c **** }
 758:../Src/xl_320.c **** 
 759:../Src/xl_320.c **** uint8_t XL_Set_P_Gain(XL *servo, uint8_t p_gain, uint8_t now){
 760:../Src/xl_320.c ****   if(p_gain > 254){
 761:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 762:../Src/xl_320.c ****     return 1;
 763:../Src/xl_320.c ****   }
 764:../Src/xl_320.c ****   return XL_Write(servo, XL_P_GAIN, p_gain, 1, now);
 765:../Src/xl_320.c **** }
 766:../Src/xl_320.c **** 
 767:../Src/xl_320.c **** uint8_t XL_Set_Goal_Position(XL *servo, uint16_t position, uint8_t now){
 768:../Src/xl_320.c ****   if(position > 1023){
 769:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 770:../Src/xl_320.c ****     return 1;
 771:../Src/xl_320.c ****   }
 772:../Src/xl_320.c ****   return XL_Write(servo, XL_GOAL_POSITION, position, 2, now);
 773:../Src/xl_320.c **** }
 774:../Src/xl_320.c **** 
 775:../Src/xl_320.c **** uint8_t XL_Set_Goal_Speed_Join(XL *servo, uint16_t speed, uint8_t now){
 776:../Src/xl_320.c ****   if(speed > 1023){
 777:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 778:../Src/xl_320.c ****     return 1;
 779:../Src/xl_320.c ****   }
 780:../Src/xl_320.c ****   return XL_Write(servo, XL_MOVING_SPEED, speed, 2, now); 
 781:../Src/xl_320.c **** }
 782:../Src/xl_320.c **** 
 783:../Src/xl_320.c **** uint8_t XL_Set_Goal_Speed_Wheel(XL *servo, uint16_t speed, XL_Wheel_Direction dir, uint8_t now){
 784:../Src/xl_320.c ****   if(speed > 1023){
 785:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 786:../Src/xl_320.c ****     return 1;
 787:../Src/xl_320.c ****   }
 788:../Src/xl_320.c ****   switch(dir){
 789:../Src/xl_320.c ****   case XL_CLOCKWISE:
 790:../Src/xl_320.c ****     speed += 1024;
 791:../Src/xl_320.c ****     break;
 792:../Src/xl_320.c ****   case XL_COUNTERCLOCKWISE:
 793:../Src/xl_320.c ****   break;
 794:../Src/xl_320.c ****   default:
 795:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 796:../Src/xl_320.c ****     return 1;
 797:../Src/xl_320.c ****     break;
 798:../Src/xl_320.c ****   }
 799:../Src/xl_320.c ****   return XL_Write(servo, XL_MOVING_SPEED, speed, 2, now);
 800:../Src/xl_320.c **** }
 801:../Src/xl_320.c **** 
 802:../Src/xl_320.c **** uint8_t XL_Set_Torque_Limit(XL *servo, uint16_t torque_limit, uint8_t now){
ARM GAS  /tmp/ccJWln4X.s 			page 44


 803:../Src/xl_320.c ****   if(torque_limit > 1023){
 804:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 805:../Src/xl_320.c ****     return 1;
 806:../Src/xl_320.c ****   }
 807:../Src/xl_320.c ****   return XL_Write(servo, XL_TORQUE_LIMIT, torque_limit, 2, now);
 808:../Src/xl_320.c **** }
 809:../Src/xl_320.c **** 
 810:../Src/xl_320.c **** uint8_t XL_Set_Punch(XL *servo, uint16_t punch, uint8_t now){
 811:../Src/xl_320.c ****   if(punch < 0x20 || punch > 0x3FF){
 812:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 813:../Src/xl_320.c ****     return 1;
 814:../Src/xl_320.c ****   }
 815:../Src/xl_320.c ****   return XL_Write(servo, XL_PUNCH, punch, 2, now);
 816:../Src/xl_320.c **** }
 817:../Src/xl_320.c **** 
 818:../Src/xl_320.c **** //======================================
 819:../Src/xl_320.c **** //       LECTURE D'INFORMATIONS
 820:../Src/xl_320.c **** //======================================
 821:../Src/xl_320.c **** uint8_t XL_Get_Current_Position(XL *servo, uint16_t *position){
 1570              		.loc 1 821 0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 0
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 1574              	.LVL138:
 1575 0000 08B5     		push	{r3, lr}
 1576              	.LCFI22:
 1577              		.cfi_def_cfa_offset 8
 1578              		.cfi_offset 3, -8
 1579              		.cfi_offset 14, -4
 822:../Src/xl_320.c ****   return XL_Read(servo, XL_CURRENT_POSITION, position);
 1580              		.loc 1 822 0
 1581 0002 0A46     		mov	r2, r1
 1582 0004 1721     		movs	r1, #23
 1583              	.LVL139:
 1584 0006 FFF7FEFF 		bl	XL_Read
 1585              	.LVL140:
 823:../Src/xl_320.c **** }
 1586              		.loc 1 823 0
 1587 000a 08BD     		pop	{r3, pc}
 1588              		.cfi_endproc
 1589              	.LFE49:
 1591              		.section	.text.XL_Get_Current_Speed,"ax",%progbits
 1592              		.align	2
 1593              		.global	XL_Get_Current_Speed
 1594              		.thumb
 1595              		.thumb_func
 1597              	XL_Get_Current_Speed:
 1598              	.LFB50:
 824:../Src/xl_320.c **** 
 825:../Src/xl_320.c **** uint8_t XL_Get_Current_Speed(XL *servo, XL_Wheel_Direction *direction, uint16_t *speed){
 1599              		.loc 1 825 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603              	.LVL141:
 1604 0000 38B5     		push	{r3, r4, r5, lr}
 1605              	.LCFI23:
ARM GAS  /tmp/ccJWln4X.s 			page 45


 1606              		.cfi_def_cfa_offset 16
 1607              		.cfi_offset 3, -16
 1608              		.cfi_offset 4, -12
 1609              		.cfi_offset 5, -8
 1610              		.cfi_offset 14, -4
 1611 0002 0D46     		mov	r5, r1
 1612 0004 1446     		mov	r4, r2
 826:../Src/xl_320.c ****   if(XL_Read(servo, XL_CURRENT_SPEED, speed) == 1){
 1613              		.loc 1 826 0
 1614 0006 1821     		movs	r1, #24
 1615              	.LVL142:
 1616 0008 FFF7FEFF 		bl	XL_Read
 1617              	.LVL143:
 1618 000c 0128     		cmp	r0, #1
 1619 000e 09D0     		beq	.L134
 827:../Src/xl_320.c ****     return 1;
 828:../Src/xl_320.c ****   }
 829:../Src/xl_320.c ****   *direction = (*speed > 1023)?XL_CLOCKWISE:XL_COUNTERCLOCKWISE;
 1620              		.loc 1 829 0
 1621 0010 2388     		ldrh	r3, [r4]
 1622 0012 B3F5806F 		cmp	r3, #1024
 1623 0016 2CBF     		ite	cs
 1624 0018 0023     		movcs	r3, #0
 1625 001a 0123     		movcc	r3, #1
 1626 001c 2B70     		strb	r3, [r5]
 830:../Src/xl_320.c ****   *speed &= 0xFF;
 1627              		.loc 1 830 0
 1628 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1629 0020 2380     		strh	r3, [r4]	@ movhi
 831:../Src/xl_320.c ****   return 0;
 1630              		.loc 1 831 0
 1631 0022 0020     		movs	r0, #0
 1632              	.L134:
 832:../Src/xl_320.c **** }
 1633              		.loc 1 832 0
 1634 0024 38BD     		pop	{r3, r4, r5, pc}
 1635              		.cfi_endproc
 1636              	.LFE50:
 1638 0026 00BF     		.section	.text.XL_Get_Current_Load,"ax",%progbits
 1639              		.align	2
 1640              		.global	XL_Get_Current_Load
 1641              		.thumb
 1642              		.thumb_func
 1644              	XL_Get_Current_Load:
 1645              	.LFB51:
 833:../Src/xl_320.c **** 
 834:../Src/xl_320.c **** uint8_t XL_Get_Current_Load(XL *servo, XL_Wheel_Direction *direction, uint16_t *load){
 1646              		.loc 1 834 0
 1647              		.cfi_startproc
 1648              		@ args = 0, pretend = 0, frame = 0
 1649              		@ frame_needed = 0, uses_anonymous_args = 0
 1650              	.LVL144:
 1651 0000 38B5     		push	{r3, r4, r5, lr}
 1652              	.LCFI24:
 1653              		.cfi_def_cfa_offset 16
 1654              		.cfi_offset 3, -16
 1655              		.cfi_offset 4, -12
ARM GAS  /tmp/ccJWln4X.s 			page 46


 1656              		.cfi_offset 5, -8
 1657              		.cfi_offset 14, -4
 1658 0002 0D46     		mov	r5, r1
 1659 0004 1446     		mov	r4, r2
 835:../Src/xl_320.c ****   if(XL_Read(servo, XL_CURRENT_LOAD, load) == 1){
 1660              		.loc 1 835 0
 1661 0006 1921     		movs	r1, #25
 1662              	.LVL145:
 1663 0008 FFF7FEFF 		bl	XL_Read
 1664              	.LVL146:
 1665 000c 0128     		cmp	r0, #1
 1666 000e 09D0     		beq	.L137
 836:../Src/xl_320.c ****     return 1;
 837:../Src/xl_320.c ****   }
 838:../Src/xl_320.c ****   *direction = (*load > 1023)?XL_CLOCKWISE:XL_COUNTERCLOCKWISE;
 1667              		.loc 1 838 0
 1668 0010 2388     		ldrh	r3, [r4]
 1669 0012 B3F5806F 		cmp	r3, #1024
 1670 0016 2CBF     		ite	cs
 1671 0018 0023     		movcs	r3, #0
 1672 001a 0123     		movcc	r3, #1
 1673 001c 2B70     		strb	r3, [r5]
 839:../Src/xl_320.c ****   *load &= 0xFF;
 1674              		.loc 1 839 0
 1675 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1676 0020 2380     		strh	r3, [r4]	@ movhi
 840:../Src/xl_320.c ****   return 0;
 1677              		.loc 1 840 0
 1678 0022 0020     		movs	r0, #0
 1679              	.L137:
 841:../Src/xl_320.c **** }
 1680              		.loc 1 841 0
 1681 0024 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE51:
 1685 0026 00BF     		.section	.text.XL_Get_Current_Voltage,"ax",%progbits
 1686              		.align	2
 1687              		.global	XL_Get_Current_Voltage
 1688              		.thumb
 1689              		.thumb_func
 1691              	XL_Get_Current_Voltage:
 1692              	.LFB52:
 842:../Src/xl_320.c **** 
 843:../Src/xl_320.c **** uint8_t XL_Get_Current_Voltage(XL *servo, uint16_t *voltage){
 1693              		.loc 1 843 0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 0
 1696              		@ frame_needed = 0, uses_anonymous_args = 0
 1697              	.LVL147:
 1698 0000 08B5     		push	{r3, lr}
 1699              	.LCFI25:
 1700              		.cfi_def_cfa_offset 8
 1701              		.cfi_offset 3, -8
 1702              		.cfi_offset 14, -4
 844:../Src/xl_320.c ****   return XL_Read(servo, XL_CURRENT_VOLTAGE, voltage);
 1703              		.loc 1 844 0
 1704 0002 0A46     		mov	r2, r1
ARM GAS  /tmp/ccJWln4X.s 			page 47


 1705 0004 1A21     		movs	r1, #26
 1706              	.LVL148:
 1707 0006 FFF7FEFF 		bl	XL_Read
 1708              	.LVL149:
 845:../Src/xl_320.c **** }
 1709              		.loc 1 845 0
 1710 000a 08BD     		pop	{r3, pc}
 1711              		.cfi_endproc
 1712              	.LFE52:
 1714              		.section	.text.XL_Get_Current_Temperature,"ax",%progbits
 1715              		.align	2
 1716              		.global	XL_Get_Current_Temperature
 1717              		.thumb
 1718              		.thumb_func
 1720              	XL_Get_Current_Temperature:
 1721              	.LFB53:
 846:../Src/xl_320.c **** 
 847:../Src/xl_320.c **** uint8_t XL_Get_Current_Temperature(XL *servo, uint16_t *temperature){
 1722              		.loc 1 847 0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 0
 1725              		@ frame_needed = 0, uses_anonymous_args = 0
 1726              	.LVL150:
 1727 0000 08B5     		push	{r3, lr}
 1728              	.LCFI26:
 1729              		.cfi_def_cfa_offset 8
 1730              		.cfi_offset 3, -8
 1731              		.cfi_offset 14, -4
 848:../Src/xl_320.c ****   return XL_Read(servo, XL_CURRENT_TEMPERATURE, temperature);
 1732              		.loc 1 848 0
 1733 0002 0A46     		mov	r2, r1
 1734 0004 1B21     		movs	r1, #27
 1735              	.LVL151:
 1736 0006 FFF7FEFF 		bl	XL_Read
 1737              	.LVL152:
 849:../Src/xl_320.c **** }
 1738              		.loc 1 849 0
 1739 000a 08BD     		pop	{r3, pc}
 1740              		.cfi_endproc
 1741              	.LFE53:
 1743              		.section	.text.XL_Is_Working,"ax",%progbits
 1744              		.align	2
 1745              		.global	XL_Is_Working
 1746              		.thumb
 1747              		.thumb_func
 1749              	XL_Is_Working:
 1750              	.LFB54:
 850:../Src/xl_320.c **** 
 851:../Src/xl_320.c **** uint8_t XL_Is_Working(XL *servo, uint16_t *working){
 1751              		.loc 1 851 0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755              	.LVL153:
 1756 0000 08B5     		push	{r3, lr}
 1757              	.LCFI27:
 1758              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJWln4X.s 			page 48


 1759              		.cfi_offset 3, -8
 1760              		.cfi_offset 14, -4
 852:../Src/xl_320.c ****   return XL_Read(servo, XL_TORQUE_ENABLE, working);
 1761              		.loc 1 852 0
 1762 0002 0A46     		mov	r2, r1
 1763 0004 0E21     		movs	r1, #14
 1764              	.LVL154:
 1765 0006 FFF7FEFF 		bl	XL_Read
 1766              	.LVL155:
 853:../Src/xl_320.c **** }
 1767              		.loc 1 853 0
 1768 000a 08BD     		pop	{r3, pc}
 1769              		.cfi_endproc
 1770              	.LFE54:
 1772              		.section	.text.XL_Is_Moving,"ax",%progbits
 1773              		.align	2
 1774              		.global	XL_Is_Moving
 1775              		.thumb
 1776              		.thumb_func
 1778              	XL_Is_Moving:
 1779              	.LFB55:
 854:../Src/xl_320.c **** 
 855:../Src/xl_320.c **** uint8_t XL_Is_Moving(XL *servo, uint16_t *moving){
 1780              		.loc 1 855 0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 1784              	.LVL156:
 1785 0000 08B5     		push	{r3, lr}
 1786              	.LCFI28:
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 3, -8
 1789              		.cfi_offset 14, -4
 856:../Src/xl_320.c ****   return XL_Read(servo, XL_MOVING, moving);
 1790              		.loc 1 856 0
 1791 0002 0A46     		mov	r2, r1
 1792 0004 1D21     		movs	r1, #29
 1793              	.LVL157:
 1794 0006 FFF7FEFF 		bl	XL_Read
 1795              	.LVL158:
 857:../Src/xl_320.c **** }
 1796              		.loc 1 857 0
 1797 000a 08BD     		pop	{r3, pc}
 1798              		.cfi_endproc
 1799              	.LFE55:
 1801              		.section	.text.XL_Get_Hardware_Error,"ax",%progbits
 1802              		.align	2
 1803              		.global	XL_Get_Hardware_Error
 1804              		.thumb
 1805              		.thumb_func
 1807              	XL_Get_Hardware_Error:
 1808              	.LFB56:
 858:../Src/xl_320.c **** 
 859:../Src/xl_320.c **** uint8_t XL_Get_Hardware_Error(XL *servo, uint16_t *hw_error){
 1809              		.loc 1 859 0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccJWln4X.s 			page 49


 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 1813              	.LVL159:
 1814 0000 08B5     		push	{r3, lr}
 1815              	.LCFI29:
 1816              		.cfi_def_cfa_offset 8
 1817              		.cfi_offset 3, -8
 1818              		.cfi_offset 14, -4
 860:../Src/xl_320.c ****   return XL_Read(servo, XL_HARDWARE_ERROR_STATUS, hw_error);
 1819              		.loc 1 860 0
 1820 0002 0A46     		mov	r2, r1
 1821 0004 1E21     		movs	r1, #30
 1822              	.LVL160:
 1823 0006 FFF7FEFF 		bl	XL_Read
 1824              	.LVL161:
 861:../Src/xl_320.c **** }
 1825              		.loc 1 861 0
 1826 000a 08BD     		pop	{r3, pc}
 1827              		.cfi_endproc
 1828              	.LFE56:
 1830              		.section	.text.XL_Check_Alert,"ax",%progbits
 1831              		.align	2
 1832              		.global	XL_Check_Alert
 1833              		.thumb
 1834              		.thumb_func
 1836              	XL_Check_Alert:
 1837              	.LFB17:
 403:../Src/xl_320.c ****   if(XL_STATUS_ALERT(servo->interface->status.err) == 1){
 1838              		.loc 1 403 0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 8
 1841              		@ frame_needed = 0, uses_anonymous_args = 0
 1842              	.LVL162:
 1843 0000 10B5     		push	{r4, lr}
 1844              	.LCFI30:
 1845              		.cfi_def_cfa_offset 8
 1846              		.cfi_offset 4, -8
 1847              		.cfi_offset 14, -4
 1848 0002 82B0     		sub	sp, sp, #8
 1849              	.LCFI31:
 1850              		.cfi_def_cfa_offset 16
 404:../Src/xl_320.c ****     uint16_t hw_error;
 1851              		.loc 1 404 0
 1852 0004 4368     		ldr	r3, [r0, #4]
 1853 0006 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1854 000a DC09     		lsrs	r4, r3, #7
 1855 000c 0CD0     		beq	.L152
 1856              	.LBB2:
 406:../Src/xl_320.c ****       return 1;
 1857              		.loc 1 406 0
 1858 000e 0DF10601 		add	r1, sp, #6
 1859 0012 FFF7FEFF 		bl	XL_Get_Hardware_Error
 1860              	.LVL163:
 1861 0016 0128     		cmp	r0, #1
 1862 0018 07D0     		beq	.L150
 409:../Src/xl_320.c ****     return 1;
 1863              		.loc 1 409 0
 1864 001a BDF80630 		ldrh	r3, [sp, #6]
ARM GAS  /tmp/ccJWln4X.s 			page 50


 1865 001e 43F48063 		orr	r3, r3, #1024
 1866 0022 034A     		ldr	r2, .L154
 1867 0024 1380     		strh	r3, [r2]	@ movhi
 410:../Src/xl_320.c ****   }
 1868              		.loc 1 410 0
 1869 0026 00E0     		b	.L150
 1870              	.LVL164:
 1871              	.L152:
 1872              	.LBE2:
 412:../Src/xl_320.c **** }
 1873              		.loc 1 412 0
 1874 0028 0024     		movs	r4, #0
 1875              	.LVL165:
 1876              	.L150:
 413:../Src/xl_320.c **** 
 1877              		.loc 1 413 0 discriminator 1
 1878 002a 2046     		mov	r0, r4
 1879 002c 02B0     		add	sp, sp, #8
 1880              	.LCFI32:
 1881              		.cfi_def_cfa_offset 8
 1882              		@ sp needed
 1883 002e 10BD     		pop	{r4, pc}
 1884              	.L155:
 1885              		.align	2
 1886              	.L154:
 1887 0030 00000000 		.word	.LANCHOR1
 1888              		.cfi_endproc
 1889              	.LFE17:
 1891              		.section	.text.XL_Action,"ax",%progbits
 1892              		.align	2
 1893              		.global	XL_Action
 1894              		.thumb
 1895              		.thumb_func
 1897              	XL_Action:
 1898              	.LFB22:
 513:../Src/xl_320.c ****   //Préparation de l'instruction
 1899              		.loc 1 513 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 8
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              	.LVL166:
 1904 0000 10B5     		push	{r4, lr}
 1905              	.LCFI33:
 1906              		.cfi_def_cfa_offset 8
 1907              		.cfi_offset 4, -8
 1908              		.cfi_offset 14, -4
 1909 0002 82B0     		sub	sp, sp, #8
 1910              	.LCFI34:
 1911              		.cfi_def_cfa_offset 16
 1912 0004 0446     		mov	r4, r0
 516:../Src/xl_320.c ****   packet.instruction = XL_ACTION;
 1913              		.loc 1 516 0
 1914 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1915 0008 8DF80030 		strb	r3, [sp]
 517:../Src/xl_320.c ****   packet.nb_params = 0;
 1916              		.loc 1 517 0
 1917 000c 0523     		movs	r3, #5
ARM GAS  /tmp/ccJWln4X.s 			page 51


 1918 000e 8DF80130 		strb	r3, [sp, #1]
 518:../Src/xl_320.c ****   packet.params = 0;
 1919              		.loc 1 518 0
 1920 0012 0023     		movs	r3, #0
 1921 0014 8DF80230 		strb	r3, [sp, #2]
 519:../Src/xl_320.c **** 
 1922              		.loc 1 519 0
 1923 0018 0193     		str	r3, [sp, #4]
 522:../Src/xl_320.c ****     return 1;
 1924              		.loc 1 522 0
 1925 001a 0122     		movs	r2, #1
 1926 001c 6946     		mov	r1, sp
 1927 001e 4068     		ldr	r0, [r0, #4]
 1928              	.LVL167:
 1929 0020 FFF7FEFF 		bl	XL_Send
 1930              	.LVL168:
 1931 0024 0128     		cmp	r0, #1
 1932 0026 11D0     		beq	.L157
 527:../Src/xl_320.c ****     return 1;
 1933              		.loc 1 527 0
 1934 0028 0122     		movs	r2, #1
 1935 002a 0B21     		movs	r1, #11
 1936 002c 6068     		ldr	r0, [r4, #4]
 1937 002e FFF7FEFF 		bl	XL_Receive
 1938              	.LVL169:
 1939 0032 0128     		cmp	r0, #1
 1940 0034 0AD0     		beq	.L157
 532:../Src/xl_320.c ****     return 1;
 1941              		.loc 1 532 0
 1942 0036 2046     		mov	r0, r4
 1943 0038 FFF7FEFF 		bl	XL_Check_Alert
 1944              	.LVL170:
 1945 003c 0128     		cmp	r0, #1
 1946 003e 05D0     		beq	.L157
 537:../Src/xl_320.c ****     return 1;
 1947              		.loc 1 537 0
 1948 0040 2046     		mov	r0, r4
 1949 0042 FFF7FEFF 		bl	XL_Check_Status
 1950              	.LVL171:
 1951 0046 0128     		cmp	r0, #1
 1952 0048 00D0     		beq	.L157
 542:../Src/xl_320.c **** }
 1953              		.loc 1 542 0
 1954 004a 0020     		movs	r0, #0
 1955              	.L157:
 543:../Src/xl_320.c **** 
 1956              		.loc 1 543 0
 1957 004c 02B0     		add	sp, sp, #8
 1958              	.LCFI35:
 1959              		.cfi_def_cfa_offset 8
 1960              		@ sp needed
 1961 004e 10BD     		pop	{r4, pc}
 1962              		.cfi_endproc
 1963              	.LFE22:
 1965              		.section	.text.XL_Write,"ax",%progbits
 1966              		.align	2
 1967              		.global	XL_Write
ARM GAS  /tmp/ccJWln4X.s 			page 52


 1968              		.thumb
 1969              		.thumb_func
 1971              	XL_Write:
 1972              	.LFB25:
 582:../Src/xl_320.c ****   if(servo == 0 || field > (XL_NB_FIELDS-1)){
 1973              		.loc 1 582 0
 1974              		.cfi_startproc
 1975              		@ args = 4, pretend = 0, frame = 0
 1976              		@ frame_needed = 0, uses_anonymous_args = 0
 1977              	.LVL172:
 1978 0000 38B5     		push	{r3, r4, r5, lr}
 1979              	.LCFI36:
 1980              		.cfi_def_cfa_offset 16
 1981              		.cfi_offset 3, -16
 1982              		.cfi_offset 4, -12
 1983              		.cfi_offset 5, -8
 1984              		.cfi_offset 14, -4
 1985 0002 9DF81050 		ldrb	r5, [sp, #16]	@ zero_extendqisi2
 583:../Src/xl_320.c ****     return 1;
 1986              		.loc 1 583 0
 1987 0006 80B3     		cbz	r0, .L163
 1988 0008 0446     		mov	r4, r0
 583:../Src/xl_320.c ****     return 1;
 1989              		.loc 1 583 0 is_stmt 0 discriminator 1
 1990 000a 1E29     		cmp	r1, #30
 1991 000c 2FD8     		bhi	.L164
 590:../Src/xl_320.c ****   params[1] = 0x00;
 1992              		.loc 1 590 0 is_stmt 1
 1993 000e 1A48     		ldr	r0, .L168
 1994              	.LVL173:
 1995 0010 405C     		ldrb	r0, [r0, r1]	@ zero_extendqisi2
 1996 0012 1A49     		ldr	r1, .L168+4
 1997              	.LVL174:
 1998 0014 0870     		strb	r0, [r1]
 591:../Src/xl_320.c ****   params[2] = data & 0xFF;
 1999              		.loc 1 591 0
 2000 0016 0020     		movs	r0, #0
 2001 0018 4870     		strb	r0, [r1, #1]
 592:../Src/xl_320.c ****   params[3] = data >> 8;
 2002              		.loc 1 592 0
 2003 001a 8A70     		strb	r2, [r1, #2]
 593:../Src/xl_320.c ****   packet.id = servo->id;
 2004              		.loc 1 593 0
 2005 001c 120A     		lsrs	r2, r2, #8
 2006              	.LVL175:
 2007 001e CA70     		strb	r2, [r1, #3]
 594:../Src/xl_320.c ****   packet.instruction = now?XL_WRITE:XL_REG_WRITE;
 2008              		.loc 1 594 0
 2009 0020 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 2010 0022 174A     		ldr	r2, .L168+8
 2011 0024 1170     		strb	r1, [r2]
 595:../Src/xl_320.c ****   packet.nb_params = 2 + size;
 2012              		.loc 1 595 0
 2013 0026 0DB1     		cbz	r5, .L165
 2014 0028 0322     		movs	r2, #3
 2015 002a 00E0     		b	.L162
 2016              	.L165:
ARM GAS  /tmp/ccJWln4X.s 			page 53


 2017 002c 0422     		movs	r2, #4
 2018              	.L162:
 595:../Src/xl_320.c ****   packet.nb_params = 2 + size;
 2019              		.loc 1 595 0 is_stmt 0 discriminator 4
 2020 002e 1449     		ldr	r1, .L168+8
 2021 0030 4A70     		strb	r2, [r1, #1]
 596:../Src/xl_320.c ****   packet.params = params;
 2022              		.loc 1 596 0 is_stmt 1 discriminator 4
 2023 0032 0233     		adds	r3, r3, #2
 2024              	.LVL176:
 2025 0034 8B70     		strb	r3, [r1, #2]
 597:../Src/xl_320.c **** 
 2026              		.loc 1 597 0 discriminator 4
 2027 0036 114B     		ldr	r3, .L168+4
 2028 0038 4B60     		str	r3, [r1, #4]
 600:../Src/xl_320.c ****     return 1;
 2029              		.loc 1 600 0 discriminator 4
 2030 003a 0122     		movs	r2, #1
 2031 003c 6068     		ldr	r0, [r4, #4]
 2032 003e FFF7FEFF 		bl	XL_Send
 2033              	.LVL177:
 2034 0042 0128     		cmp	r0, #1
 2035 0044 16D0     		beq	.L161
 605:../Src/xl_320.c ****     return 1;
 2036              		.loc 1 605 0
 2037 0046 0122     		movs	r2, #1
 2038 0048 0B21     		movs	r1, #11
 2039 004a 6068     		ldr	r0, [r4, #4]
 2040 004c FFF7FEFF 		bl	XL_Receive
 2041              	.LVL178:
 2042 0050 0128     		cmp	r0, #1
 2043 0052 0FD0     		beq	.L161
 610:../Src/xl_320.c ****     return 1;
 2044              		.loc 1 610 0
 2045 0054 2046     		mov	r0, r4
 2046 0056 FFF7FEFF 		bl	XL_Check_Alert
 2047              	.LVL179:
 2048 005a 0128     		cmp	r0, #1
 2049 005c 0AD0     		beq	.L161
 615:../Src/xl_320.c ****     return 1;
 2050              		.loc 1 615 0
 2051 005e 2046     		mov	r0, r4
 2052 0060 FFF7FEFF 		bl	XL_Check_Status
 2053              	.LVL180:
 2054 0064 0128     		cmp	r0, #1
 2055 0066 04D1     		bne	.L166
 2056 0068 38BD     		pop	{r3, r4, r5, pc}
 2057              	.LVL181:
 2058              	.L163:
 584:../Src/xl_320.c ****   }
 2059              		.loc 1 584 0
 2060 006a 0120     		movs	r0, #1
 2061              	.LVL182:
 2062 006c 38BD     		pop	{r3, r4, r5, pc}
 2063              	.LVL183:
 2064              	.L164:
 2065 006e 0120     		movs	r0, #1
ARM GAS  /tmp/ccJWln4X.s 			page 54


 2066              	.LVL184:
 2067 0070 38BD     		pop	{r3, r4, r5, pc}
 2068              	.LVL185:
 2069              	.L166:
 620:../Src/xl_320.c **** }
 2070              		.loc 1 620 0
 2071 0072 0020     		movs	r0, #0
 2072              	.L161:
 621:../Src/xl_320.c **** 
 2073              		.loc 1 621 0
 2074 0074 38BD     		pop	{r3, r4, r5, pc}
 2075              	.LVL186:
 2076              	.L169:
 2077 0076 00BF     		.align	2
 2078              	.L168:
 2079 0078 00000000 		.word	.LANCHOR2
 2080 007c 00000000 		.word	.LANCHOR4
 2081 0080 00000000 		.word	.LANCHOR5
 2082              		.cfi_endproc
 2083              	.LFE25:
 2085              		.section	.text.XL_Configure_ID,"ax",%progbits
 2086              		.align	2
 2087              		.global	XL_Configure_ID
 2088              		.thumb
 2089              		.thumb_func
 2091              	XL_Configure_ID:
 2092              	.LFB26:
 626:../Src/xl_320.c ****   if(id > 252){
 2093              		.loc 1 626 0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 0
 2096              		@ frame_needed = 0, uses_anonymous_args = 0
 2097              	.LVL187:
 627:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2098              		.loc 1 627 0
 2099 0000 FC29     		cmp	r1, #252
 2100 0002 04D9     		bls	.L171
 628:../Src/xl_320.c ****     return 1;
 2101              		.loc 1 628 0
 2102 0004 0022     		movs	r2, #0
 2103 0006 074B     		ldr	r3, .L174
 2104 0008 1A80     		strh	r2, [r3]	@ movhi
 629:../Src/xl_320.c ****   }
 2105              		.loc 1 629 0
 2106 000a 0120     		movs	r0, #1
 2107              	.LVL188:
 632:../Src/xl_320.c **** 
 2108              		.loc 1 632 0
 2109 000c 7047     		bx	lr
 2110              	.LVL189:
 2111              	.L171:
 626:../Src/xl_320.c ****   if(id > 252){
 2112              		.loc 1 626 0
 2113 000e 00B5     		push	{lr}
 2114              	.LCFI37:
 2115              		.cfi_def_cfa_offset 4
 2116              		.cfi_offset 14, -4
ARM GAS  /tmp/ccJWln4X.s 			page 55


 2117 0010 83B0     		sub	sp, sp, #12
 2118              	.LCFI38:
 2119              		.cfi_def_cfa_offset 16
 2120 0012 0A46     		mov	r2, r1
 631:../Src/xl_320.c **** }
 2121              		.loc 1 631 0
 2122 0014 0123     		movs	r3, #1
 2123 0016 0093     		str	r3, [sp]
 2124 0018 0021     		movs	r1, #0
 2125              	.LVL190:
 2126 001a FFF7FEFF 		bl	XL_Write
 2127              	.LVL191:
 632:../Src/xl_320.c **** 
 2128              		.loc 1 632 0
 2129 001e 03B0     		add	sp, sp, #12
 2130              	.LCFI39:
 2131              		.cfi_def_cfa_offset 4
 2132              		@ sp needed
 2133 0020 5DF804FB 		ldr	pc, [sp], #4
 2134              	.L175:
 2135              		.align	2
 2136              	.L174:
 2137 0024 00000000 		.word	.LANCHOR1
 2138              		.cfi_endproc
 2139              	.LFE26:
 2141              		.section	.text.XL_Configure_Return_Delay_Time,"ax",%progbits
 2142              		.align	2
 2143              		.global	XL_Configure_Return_Delay_Time
 2144              		.thumb
 2145              		.thumb_func
 2147              	XL_Configure_Return_Delay_Time:
 2148              	.LFB28:
 642:../Src/xl_320.c ****   if(delay > 0xFE){
 2149              		.loc 1 642 0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 0
 2152              		@ frame_needed = 0, uses_anonymous_args = 0
 2153              	.LVL192:
 643:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2154              		.loc 1 643 0
 2155 0000 FF29     		cmp	r1, #255
 2156 0002 04D1     		bne	.L177
 644:../Src/xl_320.c ****     return 1;
 2157              		.loc 1 644 0
 2158 0004 0022     		movs	r2, #0
 2159 0006 074B     		ldr	r3, .L180
 2160 0008 1A80     		strh	r2, [r3]	@ movhi
 645:../Src/xl_320.c ****   }
 2161              		.loc 1 645 0
 2162 000a 0120     		movs	r0, #1
 2163              	.LVL193:
 648:../Src/xl_320.c **** 
 2164              		.loc 1 648 0
 2165 000c 7047     		bx	lr
 2166              	.LVL194:
 2167              	.L177:
 642:../Src/xl_320.c ****   if(delay > 0xFE){
ARM GAS  /tmp/ccJWln4X.s 			page 56


 2168              		.loc 1 642 0
 2169 000e 00B5     		push	{lr}
 2170              	.LCFI40:
 2171              		.cfi_def_cfa_offset 4
 2172              		.cfi_offset 14, -4
 2173 0010 83B0     		sub	sp, sp, #12
 2174              	.LCFI41:
 2175              		.cfi_def_cfa_offset 16
 2176 0012 0A46     		mov	r2, r1
 647:../Src/xl_320.c **** }
 2177              		.loc 1 647 0
 2178 0014 0123     		movs	r3, #1
 2179 0016 0093     		str	r3, [sp]
 2180 0018 0221     		movs	r1, #2
 2181              	.LVL195:
 2182 001a FFF7FEFF 		bl	XL_Write
 2183              	.LVL196:
 648:../Src/xl_320.c **** 
 2184              		.loc 1 648 0
 2185 001e 03B0     		add	sp, sp, #12
 2186              	.LCFI42:
 2187              		.cfi_def_cfa_offset 4
 2188              		@ sp needed
 2189 0020 5DF804FB 		ldr	pc, [sp], #4
 2190              	.L181:
 2191              		.align	2
 2192              	.L180:
 2193 0024 00000000 		.word	.LANCHOR1
 2194              		.cfi_endproc
 2195              	.LFE28:
 2197              		.section	.text.XL_Configure_CW_Angle_Limit,"ax",%progbits
 2198              		.align	2
 2199              		.global	XL_Configure_CW_Angle_Limit
 2200              		.thumb
 2201              		.thumb_func
 2203              	XL_Configure_CW_Angle_Limit:
 2204              	.LFB29:
 650:../Src/xl_320.c ****   if(angle > 0x3FF){
 2205              		.loc 1 650 0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 2209              	.LVL197:
 651:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2210              		.loc 1 651 0
 2211 0000 B1F5806F 		cmp	r1, #1024
 2212 0004 04D3     		bcc	.L183
 652:../Src/xl_320.c ****     return 1;
 2213              		.loc 1 652 0
 2214 0006 0022     		movs	r2, #0
 2215 0008 074B     		ldr	r3, .L186
 2216 000a 1A80     		strh	r2, [r3]	@ movhi
 653:../Src/xl_320.c ****   }
 2217              		.loc 1 653 0
 2218 000c 0120     		movs	r0, #1
 2219              	.LVL198:
 656:../Src/xl_320.c **** 
ARM GAS  /tmp/ccJWln4X.s 			page 57


 2220              		.loc 1 656 0
 2221 000e 7047     		bx	lr
 2222              	.LVL199:
 2223              	.L183:
 650:../Src/xl_320.c ****   if(angle > 0x3FF){
 2224              		.loc 1 650 0
 2225 0010 00B5     		push	{lr}
 2226              	.LCFI43:
 2227              		.cfi_def_cfa_offset 4
 2228              		.cfi_offset 14, -4
 2229 0012 83B0     		sub	sp, sp, #12
 2230              	.LCFI44:
 2231              		.cfi_def_cfa_offset 16
 2232 0014 0A46     		mov	r2, r1
 655:../Src/xl_320.c **** }
 2233              		.loc 1 655 0
 2234 0016 0123     		movs	r3, #1
 2235 0018 0093     		str	r3, [sp]
 2236 001a 0223     		movs	r3, #2
 2237 001c 0321     		movs	r1, #3
 2238              	.LVL200:
 2239 001e FFF7FEFF 		bl	XL_Write
 2240              	.LVL201:
 656:../Src/xl_320.c **** 
 2241              		.loc 1 656 0
 2242 0022 03B0     		add	sp, sp, #12
 2243              	.LCFI45:
 2244              		.cfi_def_cfa_offset 4
 2245              		@ sp needed
 2246 0024 5DF804FB 		ldr	pc, [sp], #4
 2247              	.L187:
 2248              		.align	2
 2249              	.L186:
 2250 0028 00000000 		.word	.LANCHOR1
 2251              		.cfi_endproc
 2252              	.LFE29:
 2254              		.section	.text.XL_Configure_CCW_Angle_Limit,"ax",%progbits
 2255              		.align	2
 2256              		.global	XL_Configure_CCW_Angle_Limit
 2257              		.thumb
 2258              		.thumb_func
 2260              	XL_Configure_CCW_Angle_Limit:
 2261              	.LFB30:
 658:../Src/xl_320.c ****   if(angle > 0x3FF){
 2262              		.loc 1 658 0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 0
 2265              		@ frame_needed = 0, uses_anonymous_args = 0
 2266              	.LVL202:
 659:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2267              		.loc 1 659 0
 2268 0000 B1F5806F 		cmp	r1, #1024
 2269 0004 04D3     		bcc	.L189
 660:../Src/xl_320.c ****     return 1;
 2270              		.loc 1 660 0
 2271 0006 0022     		movs	r2, #0
 2272 0008 074B     		ldr	r3, .L192
ARM GAS  /tmp/ccJWln4X.s 			page 58


 2273 000a 1A80     		strh	r2, [r3]	@ movhi
 661:../Src/xl_320.c ****   }
 2274              		.loc 1 661 0
 2275 000c 0120     		movs	r0, #1
 2276              	.LVL203:
 664:../Src/xl_320.c ****   
 2277              		.loc 1 664 0
 2278 000e 7047     		bx	lr
 2279              	.LVL204:
 2280              	.L189:
 658:../Src/xl_320.c ****   if(angle > 0x3FF){
 2281              		.loc 1 658 0
 2282 0010 00B5     		push	{lr}
 2283              	.LCFI46:
 2284              		.cfi_def_cfa_offset 4
 2285              		.cfi_offset 14, -4
 2286 0012 83B0     		sub	sp, sp, #12
 2287              	.LCFI47:
 2288              		.cfi_def_cfa_offset 16
 2289 0014 0A46     		mov	r2, r1
 663:../Src/xl_320.c **** }
 2290              		.loc 1 663 0
 2291 0016 0123     		movs	r3, #1
 2292 0018 0093     		str	r3, [sp]
 2293 001a 0223     		movs	r3, #2
 2294 001c 0421     		movs	r1, #4
 2295              	.LVL205:
 2296 001e FFF7FEFF 		bl	XL_Write
 2297              	.LVL206:
 664:../Src/xl_320.c ****   
 2298              		.loc 1 664 0
 2299 0022 03B0     		add	sp, sp, #12
 2300              	.LCFI48:
 2301              		.cfi_def_cfa_offset 4
 2302              		@ sp needed
 2303 0024 5DF804FB 		ldr	pc, [sp], #4
 2304              	.L193:
 2305              		.align	2
 2306              	.L192:
 2307 0028 00000000 		.word	.LANCHOR1
 2308              		.cfi_endproc
 2309              	.LFE30:
 2311              		.section	.text.XL_Configure_Limit_Temperature,"ax",%progbits
 2312              		.align	2
 2313              		.global	XL_Configure_Limit_Temperature
 2314              		.thumb
 2315              		.thumb_func
 2317              	XL_Configure_Limit_Temperature:
 2318              	.LFB32:
 674:../Src/xl_320.c ****   if(temp > 150){
 2319              		.loc 1 674 0
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 0
 2322              		@ frame_needed = 0, uses_anonymous_args = 0
 2323              	.LVL207:
 675:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2324              		.loc 1 675 0
ARM GAS  /tmp/ccJWln4X.s 			page 59


 2325 0000 9629     		cmp	r1, #150
 2326 0002 04D9     		bls	.L195
 676:../Src/xl_320.c ****     return 1;
 2327              		.loc 1 676 0
 2328 0004 0022     		movs	r2, #0
 2329 0006 074B     		ldr	r3, .L198
 2330 0008 1A80     		strh	r2, [r3]	@ movhi
 677:../Src/xl_320.c ****   }
 2331              		.loc 1 677 0
 2332 000a 0120     		movs	r0, #1
 2333              	.LVL208:
 680:../Src/xl_320.c **** 
 2334              		.loc 1 680 0
 2335 000c 7047     		bx	lr
 2336              	.LVL209:
 2337              	.L195:
 674:../Src/xl_320.c ****   if(temp > 150){
 2338              		.loc 1 674 0
 2339 000e 00B5     		push	{lr}
 2340              	.LCFI49:
 2341              		.cfi_def_cfa_offset 4
 2342              		.cfi_offset 14, -4
 2343 0010 83B0     		sub	sp, sp, #12
 2344              	.LCFI50:
 2345              		.cfi_def_cfa_offset 16
 2346 0012 0A46     		mov	r2, r1
 679:../Src/xl_320.c **** }
 2347              		.loc 1 679 0
 2348 0014 0123     		movs	r3, #1
 2349 0016 0093     		str	r3, [sp]
 2350 0018 0621     		movs	r1, #6
 2351              	.LVL210:
 2352 001a FFF7FEFF 		bl	XL_Write
 2353              	.LVL211:
 680:../Src/xl_320.c **** 
 2354              		.loc 1 680 0
 2355 001e 03B0     		add	sp, sp, #12
 2356              	.LCFI51:
 2357              		.cfi_def_cfa_offset 4
 2358              		@ sp needed
 2359 0020 5DF804FB 		ldr	pc, [sp], #4
 2360              	.L199:
 2361              		.align	2
 2362              	.L198:
 2363 0024 00000000 		.word	.LANCHOR1
 2364              		.cfi_endproc
 2365              	.LFE32:
 2367              		.section	.text.XL_Configure_Lower_Limit_Voltage,"ax",%progbits
 2368              		.align	2
 2369              		.global	XL_Configure_Lower_Limit_Voltage
 2370              		.thumb
 2371              		.thumb_func
 2373              	XL_Configure_Lower_Limit_Voltage:
 2374              	.LFB33:
 682:../Src/xl_320.c ****   if(voltage < 50 || voltage > 250){
 2375              		.loc 1 682 0
 2376              		.cfi_startproc
ARM GAS  /tmp/ccJWln4X.s 			page 60


 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 0, uses_anonymous_args = 0
 2379              	.LVL212:
 683:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2380              		.loc 1 683 0
 2381 0000 A1F13203 		sub	r3, r1, #50
 2382 0004 DBB2     		uxtb	r3, r3
 2383 0006 C82B     		cmp	r3, #200
 2384 0008 04D9     		bls	.L201
 684:../Src/xl_320.c ****     return 1;
 2385              		.loc 1 684 0
 2386 000a 0022     		movs	r2, #0
 2387 000c 074B     		ldr	r3, .L204
 2388 000e 1A80     		strh	r2, [r3]	@ movhi
 685:../Src/xl_320.c ****   }
 2389              		.loc 1 685 0
 2390 0010 0120     		movs	r0, #1
 2391              	.LVL213:
 688:../Src/xl_320.c **** 
 2392              		.loc 1 688 0
 2393 0012 7047     		bx	lr
 2394              	.LVL214:
 2395              	.L201:
 682:../Src/xl_320.c ****   if(voltage < 50 || voltage > 250){
 2396              		.loc 1 682 0
 2397 0014 00B5     		push	{lr}
 2398              	.LCFI52:
 2399              		.cfi_def_cfa_offset 4
 2400              		.cfi_offset 14, -4
 2401 0016 83B0     		sub	sp, sp, #12
 2402              	.LCFI53:
 2403              		.cfi_def_cfa_offset 16
 2404 0018 0A46     		mov	r2, r1
 687:../Src/xl_320.c **** }
 2405              		.loc 1 687 0
 2406 001a 0123     		movs	r3, #1
 2407 001c 0093     		str	r3, [sp]
 2408 001e 0721     		movs	r1, #7
 2409              	.LVL215:
 2410 0020 FFF7FEFF 		bl	XL_Write
 2411              	.LVL216:
 688:../Src/xl_320.c **** 
 2412              		.loc 1 688 0
 2413 0024 03B0     		add	sp, sp, #12
 2414              	.LCFI54:
 2415              		.cfi_def_cfa_offset 4
 2416              		@ sp needed
 2417 0026 5DF804FB 		ldr	pc, [sp], #4
 2418              	.L205:
 2419 002a 00BF     		.align	2
 2420              	.L204:
 2421 002c 00000000 		.word	.LANCHOR1
 2422              		.cfi_endproc
 2423              	.LFE33:
 2425              		.section	.text.XL_Configure_Upper_Limit_Voltage,"ax",%progbits
 2426              		.align	2
 2427              		.global	XL_Configure_Upper_Limit_Voltage
ARM GAS  /tmp/ccJWln4X.s 			page 61


 2428              		.thumb
 2429              		.thumb_func
 2431              	XL_Configure_Upper_Limit_Voltage:
 2432              	.LFB34:
 690:../Src/xl_320.c ****   if(voltage < 50 || voltage > 250){
 2433              		.loc 1 690 0
 2434              		.cfi_startproc
 2435              		@ args = 0, pretend = 0, frame = 0
 2436              		@ frame_needed = 0, uses_anonymous_args = 0
 2437              	.LVL217:
 691:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2438              		.loc 1 691 0
 2439 0000 A1F13203 		sub	r3, r1, #50
 2440 0004 DBB2     		uxtb	r3, r3
 2441 0006 C82B     		cmp	r3, #200
 2442 0008 04D9     		bls	.L207
 692:../Src/xl_320.c ****     return 1;
 2443              		.loc 1 692 0
 2444 000a 0022     		movs	r2, #0
 2445 000c 074B     		ldr	r3, .L210
 2446 000e 1A80     		strh	r2, [r3]	@ movhi
 693:../Src/xl_320.c ****   }
 2447              		.loc 1 693 0
 2448 0010 0120     		movs	r0, #1
 2449              	.LVL218:
 696:../Src/xl_320.c **** 
 2450              		.loc 1 696 0
 2451 0012 7047     		bx	lr
 2452              	.LVL219:
 2453              	.L207:
 690:../Src/xl_320.c ****   if(voltage < 50 || voltage > 250){
 2454              		.loc 1 690 0
 2455 0014 00B5     		push	{lr}
 2456              	.LCFI55:
 2457              		.cfi_def_cfa_offset 4
 2458              		.cfi_offset 14, -4
 2459 0016 83B0     		sub	sp, sp, #12
 2460              	.LCFI56:
 2461              		.cfi_def_cfa_offset 16
 2462 0018 0A46     		mov	r2, r1
 695:../Src/xl_320.c **** }
 2463              		.loc 1 695 0
 2464 001a 0123     		movs	r3, #1
 2465 001c 0093     		str	r3, [sp]
 2466 001e 0821     		movs	r1, #8
 2467              	.LVL220:
 2468 0020 FFF7FEFF 		bl	XL_Write
 2469              	.LVL221:
 696:../Src/xl_320.c **** 
 2470              		.loc 1 696 0
 2471 0024 03B0     		add	sp, sp, #12
 2472              	.LCFI57:
 2473              		.cfi_def_cfa_offset 4
 2474              		@ sp needed
 2475 0026 5DF804FB 		ldr	pc, [sp], #4
 2476              	.L211:
 2477 002a 00BF     		.align	2
ARM GAS  /tmp/ccJWln4X.s 			page 62


 2478              	.L210:
 2479 002c 00000000 		.word	.LANCHOR1
 2480              		.cfi_endproc
 2481              	.LFE34:
 2483              		.section	.text.XL_Configure_Max_Torque,"ax",%progbits
 2484              		.align	2
 2485              		.global	XL_Configure_Max_Torque
 2486              		.thumb
 2487              		.thumb_func
 2489              	XL_Configure_Max_Torque:
 2490              	.LFB35:
 698:../Src/xl_320.c ****   if(max_torque > 1023){
 2491              		.loc 1 698 0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 0
 2494              		@ frame_needed = 0, uses_anonymous_args = 0
 2495              	.LVL222:
 699:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2496              		.loc 1 699 0
 2497 0000 B1F5806F 		cmp	r1, #1024
 2498 0004 04D3     		bcc	.L213
 700:../Src/xl_320.c ****     return 1;
 2499              		.loc 1 700 0
 2500 0006 0022     		movs	r2, #0
 2501 0008 074B     		ldr	r3, .L216
 2502 000a 1A80     		strh	r2, [r3]	@ movhi
 701:../Src/xl_320.c ****   }
 2503              		.loc 1 701 0
 2504 000c 0120     		movs	r0, #1
 2505              	.LVL223:
 704:../Src/xl_320.c **** 
 2506              		.loc 1 704 0
 2507 000e 7047     		bx	lr
 2508              	.LVL224:
 2509              	.L213:
 698:../Src/xl_320.c ****   if(max_torque > 1023){
 2510              		.loc 1 698 0
 2511 0010 00B5     		push	{lr}
 2512              	.LCFI58:
 2513              		.cfi_def_cfa_offset 4
 2514              		.cfi_offset 14, -4
 2515 0012 83B0     		sub	sp, sp, #12
 2516              	.LCFI59:
 2517              		.cfi_def_cfa_offset 16
 2518 0014 0A46     		mov	r2, r1
 703:../Src/xl_320.c **** }
 2519              		.loc 1 703 0
 2520 0016 0123     		movs	r3, #1
 2521 0018 0093     		str	r3, [sp]
 2522 001a 0223     		movs	r3, #2
 2523 001c 0921     		movs	r1, #9
 2524              	.LVL225:
 2525 001e FFF7FEFF 		bl	XL_Write
 2526              	.LVL226:
 704:../Src/xl_320.c **** 
 2527              		.loc 1 704 0
 2528 0022 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccJWln4X.s 			page 63


 2529              	.LCFI60:
 2530              		.cfi_def_cfa_offset 4
 2531              		@ sp needed
 2532 0024 5DF804FB 		ldr	pc, [sp], #4
 2533              	.L217:
 2534              		.align	2
 2535              	.L216:
 2536 0028 00000000 		.word	.LANCHOR1
 2537              		.cfi_endproc
 2538              	.LFE35:
 2540              		.section	.text.XL_Configure_Alarm_Shutdown,"ax",%progbits
 2541              		.align	2
 2542              		.global	XL_Configure_Alarm_Shutdown
 2543              		.thumb
 2544              		.thumb_func
 2546              	XL_Configure_Alarm_Shutdown:
 2547              	.LFB37:
 714:../Src/xl_320.c ****   if(alarm > XL_ERROR_OVER_9000){
 2548              		.loc 1 714 0
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 0, uses_anonymous_args = 0
 2552              	.LVL227:
 715:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2553              		.loc 1 715 0
 2554 0000 0729     		cmp	r1, #7
 2555 0002 04D9     		bls	.L219
 716:../Src/xl_320.c ****     return 1;
 2556              		.loc 1 716 0
 2557 0004 0022     		movs	r2, #0
 2558 0006 074B     		ldr	r3, .L222
 2559 0008 1A80     		strh	r2, [r3]	@ movhi
 717:../Src/xl_320.c ****   }
 2560              		.loc 1 717 0
 2561 000a 0120     		movs	r0, #1
 2562              	.LVL228:
 720:../Src/xl_320.c **** 
 2563              		.loc 1 720 0
 2564 000c 7047     		bx	lr
 2565              	.LVL229:
 2566              	.L219:
 714:../Src/xl_320.c ****   if(alarm > XL_ERROR_OVER_9000){
 2567              		.loc 1 714 0
 2568 000e 00B5     		push	{lr}
 2569              	.LCFI61:
 2570              		.cfi_def_cfa_offset 4
 2571              		.cfi_offset 14, -4
 2572 0010 83B0     		sub	sp, sp, #12
 2573              	.LCFI62:
 2574              		.cfi_def_cfa_offset 16
 2575 0012 0A46     		mov	r2, r1
 719:../Src/xl_320.c **** }
 2576              		.loc 1 719 0
 2577 0014 0123     		movs	r3, #1
 2578 0016 0093     		str	r3, [sp]
 2579 0018 0B21     		movs	r1, #11
 2580              	.LVL230:
ARM GAS  /tmp/ccJWln4X.s 			page 64


 2581 001a FFF7FEFF 		bl	XL_Write
 2582              	.LVL231:
 720:../Src/xl_320.c **** 
 2583              		.loc 1 720 0
 2584 001e 03B0     		add	sp, sp, #12
 2585              	.LCFI63:
 2586              		.cfi_def_cfa_offset 4
 2587              		@ sp needed
 2588 0020 5DF804FB 		ldr	pc, [sp], #4
 2589              	.L223:
 2590              		.align	2
 2591              	.L222:
 2592 0024 00000000 		.word	.LANCHOR1
 2593              		.cfi_endproc
 2594              	.LFE37:
 2596              		.section	.text.XL_Power_On,"ax",%progbits
 2597              		.align	2
 2598              		.global	XL_Power_On
 2599              		.thumb
 2600              		.thumb_func
 2602              	XL_Power_On:
 2603              	.LFB38:
 727:../Src/xl_320.c ****   return XL_Write(servo, XL_TORQUE_ENABLE, 1, 1, now);
 2604              		.loc 1 727 0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 0
 2607              		@ frame_needed = 0, uses_anonymous_args = 0
 2608              	.LVL232:
 2609 0000 00B5     		push	{lr}
 2610              	.LCFI64:
 2611              		.cfi_def_cfa_offset 4
 2612              		.cfi_offset 14, -4
 2613 0002 83B0     		sub	sp, sp, #12
 2614              	.LCFI65:
 2615              		.cfi_def_cfa_offset 16
 728:../Src/xl_320.c **** }
 2616              		.loc 1 728 0
 2617 0004 0091     		str	r1, [sp]
 2618 0006 0123     		movs	r3, #1
 2619 0008 1A46     		mov	r2, r3
 2620 000a 0E21     		movs	r1, #14
 2621              	.LVL233:
 2622 000c FFF7FEFF 		bl	XL_Write
 2623              	.LVL234:
 729:../Src/xl_320.c **** 
 2624              		.loc 1 729 0
 2625 0010 03B0     		add	sp, sp, #12
 2626              	.LCFI66:
 2627              		.cfi_def_cfa_offset 4
 2628              		@ sp needed
 2629 0012 5DF804FB 		ldr	pc, [sp], #4
 2630              		.cfi_endproc
 2631              	.LFE38:
 2633 0016 00BF     		.section	.text.XL_Power_Off,"ax",%progbits
 2634              		.align	2
 2635              		.global	XL_Power_Off
 2636              		.thumb
ARM GAS  /tmp/ccJWln4X.s 			page 65


 2637              		.thumb_func
 2639              	XL_Power_Off:
 2640              	.LFB39:
 731:../Src/xl_320.c ****   return XL_Write(servo, XL_TORQUE_ENABLE, 0, 1, now);
 2641              		.loc 1 731 0
 2642              		.cfi_startproc
 2643              		@ args = 0, pretend = 0, frame = 0
 2644              		@ frame_needed = 0, uses_anonymous_args = 0
 2645              	.LVL235:
 2646 0000 00B5     		push	{lr}
 2647              	.LCFI67:
 2648              		.cfi_def_cfa_offset 4
 2649              		.cfi_offset 14, -4
 2650 0002 83B0     		sub	sp, sp, #12
 2651              	.LCFI68:
 2652              		.cfi_def_cfa_offset 16
 732:../Src/xl_320.c **** }
 2653              		.loc 1 732 0
 2654 0004 0091     		str	r1, [sp]
 2655 0006 0123     		movs	r3, #1
 2656 0008 0022     		movs	r2, #0
 2657 000a 0E21     		movs	r1, #14
 2658              	.LVL236:
 2659 000c FFF7FEFF 		bl	XL_Write
 2660              	.LVL237:
 733:../Src/xl_320.c **** 
 2661              		.loc 1 733 0
 2662 0010 03B0     		add	sp, sp, #12
 2663              	.LCFI69:
 2664              		.cfi_def_cfa_offset 4
 2665              		@ sp needed
 2666 0012 5DF804FB 		ldr	pc, [sp], #4
 2667              		.cfi_endproc
 2668              	.LFE39:
 2670 0016 00BF     		.section	.text.XL_Set_LED,"ax",%progbits
 2671              		.align	2
 2672              		.global	XL_Set_LED
 2673              		.thumb
 2674              		.thumb_func
 2676              	XL_Set_LED:
 2677              	.LFB40:
 735:../Src/xl_320.c ****   if((uint8_t) color > 7){
 2678              		.loc 1 735 0
 2679              		.cfi_startproc
 2680              		@ args = 0, pretend = 0, frame = 0
 2681              		@ frame_needed = 0, uses_anonymous_args = 0
 2682              	.LVL238:
 736:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2683              		.loc 1 736 0
 2684 0000 0729     		cmp	r1, #7
 2685 0002 04D9     		bls	.L229
 737:../Src/xl_320.c ****     return 1;
 2686              		.loc 1 737 0
 2687 0004 0022     		movs	r2, #0
 2688              	.LVL239:
 2689 0006 084B     		ldr	r3, .L232
 2690 0008 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/ccJWln4X.s 			page 66


 738:../Src/xl_320.c ****   }
 2691              		.loc 1 738 0
 2692 000a 0120     		movs	r0, #1
 2693              	.LVL240:
 741:../Src/xl_320.c **** 
 2694              		.loc 1 741 0
 2695 000c 7047     		bx	lr
 2696              	.LVL241:
 2697              	.L229:
 735:../Src/xl_320.c ****   if((uint8_t) color > 7){
 2698              		.loc 1 735 0
 2699 000e 00B5     		push	{lr}
 2700              	.LCFI70:
 2701              		.cfi_def_cfa_offset 4
 2702              		.cfi_offset 14, -4
 2703 0010 83B0     		sub	sp, sp, #12
 2704              	.LCFI71:
 2705              		.cfi_def_cfa_offset 16
 2706 0012 1346     		mov	r3, r2
 2707 0014 0A46     		mov	r2, r1
 2708              	.LVL242:
 740:../Src/xl_320.c **** }
 2709              		.loc 1 740 0
 2710 0016 0093     		str	r3, [sp]
 2711 0018 0123     		movs	r3, #1
 2712 001a 0F21     		movs	r1, #15
 2713              	.LVL243:
 2714 001c FFF7FEFF 		bl	XL_Write
 2715              	.LVL244:
 741:../Src/xl_320.c **** 
 2716              		.loc 1 741 0
 2717 0020 03B0     		add	sp, sp, #12
 2718              	.LCFI72:
 2719              		.cfi_def_cfa_offset 4
 2720              		@ sp needed
 2721 0022 5DF804FB 		ldr	pc, [sp], #4
 2722              	.L233:
 2723 0026 00BF     		.align	2
 2724              	.L232:
 2725 0028 00000000 		.word	.LANCHOR1
 2726              		.cfi_endproc
 2727              	.LFE40:
 2729              		.section	.text.XL_Say_Hello,"ax",%progbits
 2730              		.align	2
 2731              		.global	XL_Say_Hello
 2732              		.thumb
 2733              		.thumb_func
 2735              	XL_Say_Hello:
 2736              	.LFB20:
 459:../Src/xl_320.c ****   if(XL_Ping(servo) == 1){
 2737              		.loc 1 459 0
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 0
 2740              		@ frame_needed = 0, uses_anonymous_args = 0
 2741              	.LVL245:
 2742 0000 70B5     		push	{r4, r5, r6, lr}
 2743              	.LCFI73:
ARM GAS  /tmp/ccJWln4X.s 			page 67


 2744              		.cfi_def_cfa_offset 16
 2745              		.cfi_offset 4, -16
 2746              		.cfi_offset 5, -12
 2747              		.cfi_offset 6, -8
 2748              		.cfi_offset 14, -4
 2749 0002 0446     		mov	r4, r0
 460:../Src/xl_320.c ****     return 1;
 2750              		.loc 1 460 0
 2751 0004 FFF7FEFF 		bl	XL_Ping
 2752              	.LVL246:
 2753 0008 0128     		cmp	r0, #1
 2754 000a 22D0     		beq	.L235
 464:../Src/xl_320.c ****   uint8_t i;
 2755              		.loc 1 464 0
 2756 000c 6368     		ldr	r3, [r4, #4]
 2757 000e 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 2758 0012 0BB9     		cbnz	r3, .L239
 2759 0014 0226     		movs	r6, #2
 2760 0016 00E0     		b	.L236
 2761              	.L239:
 2762 0018 0126     		movs	r6, #1
 2763              	.L236:
 2764              	.LVL247:
 466:../Src/xl_320.c ****     XL_Set_LED(servo, color, XL_NOW);
 2765              		.loc 1 466 0 discriminator 4
 2766 001a 0025     		movs	r5, #0
 2767 001c 15E0     		b	.L237
 2768              	.LVL248:
 2769              	.L238:
 467:../Src/xl_320.c ****     servo->interface->delay(500);
 2770              		.loc 1 467 0 discriminator 3
 2771 001e 0122     		movs	r2, #1
 2772 0020 3146     		mov	r1, r6
 2773 0022 2046     		mov	r0, r4
 2774 0024 FFF7FEFF 		bl	XL_Set_LED
 2775              	.LVL249:
 468:../Src/xl_320.c ****     XL_Set_LED(servo, XL_LED_OFF, XL_NOW);
 2776              		.loc 1 468 0 discriminator 3
 2777 0028 6368     		ldr	r3, [r4, #4]
 2778 002a DB68     		ldr	r3, [r3, #12]
 2779 002c 4FF4FA70 		mov	r0, #500
 2780 0030 9847     		blx	r3
 2781              	.LVL250:
 469:../Src/xl_320.c ****     servo->interface->delay(500);
 2782              		.loc 1 469 0 discriminator 3
 2783 0032 0122     		movs	r2, #1
 2784 0034 0021     		movs	r1, #0
 2785 0036 2046     		mov	r0, r4
 2786 0038 FFF7FEFF 		bl	XL_Set_LED
 2787              	.LVL251:
 470:../Src/xl_320.c ****   }
 2788              		.loc 1 470 0 discriminator 3
 2789 003c 6368     		ldr	r3, [r4, #4]
 2790 003e DB68     		ldr	r3, [r3, #12]
 2791 0040 4FF4FA70 		mov	r0, #500
 2792 0044 9847     		blx	r3
 2793              	.LVL252:
ARM GAS  /tmp/ccJWln4X.s 			page 68


 466:../Src/xl_320.c ****     XL_Set_LED(servo, color, XL_NOW);
 2794              		.loc 1 466 0 discriminator 3
 2795 0046 0135     		adds	r5, r5, #1
 2796              	.LVL253:
 2797 0048 EDB2     		uxtb	r5, r5
 2798              	.LVL254:
 2799              	.L237:
 466:../Src/xl_320.c ****     XL_Set_LED(servo, color, XL_NOW);
 2800              		.loc 1 466 0 is_stmt 0 discriminator 1
 2801 004a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2802 004c 9D42     		cmp	r5, r3
 2803 004e E6D3     		bcc	.L238
 473:../Src/xl_320.c **** }
 2804              		.loc 1 473 0 is_stmt 1
 2805 0050 0020     		movs	r0, #0
 2806              	.LVL255:
 2807              	.L235:
 474:../Src/xl_320.c **** 
 2808              		.loc 1 474 0
 2809 0052 70BD     		pop	{r4, r5, r6, pc}
 2810              		.cfi_endproc
 2811              	.LFE20:
 2813              		.section	.text.XL_Set_D_Gain,"ax",%progbits
 2814              		.align	2
 2815              		.global	XL_Set_D_Gain
 2816              		.thumb
 2817              		.thumb_func
 2819              	XL_Set_D_Gain:
 2820              	.LFB41:
 743:../Src/xl_320.c ****   if(d_gain > 254){
 2821              		.loc 1 743 0
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 0
 2824              		@ frame_needed = 0, uses_anonymous_args = 0
 2825              	.LVL256:
 744:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2826              		.loc 1 744 0
 2827 0000 FF29     		cmp	r1, #255
 2828 0002 04D1     		bne	.L242
 745:../Src/xl_320.c ****     return 1;
 2829              		.loc 1 745 0
 2830 0004 0022     		movs	r2, #0
 2831              	.LVL257:
 2832 0006 084B     		ldr	r3, .L245
 2833 0008 1A80     		strh	r2, [r3]	@ movhi
 746:../Src/xl_320.c ****   }
 2834              		.loc 1 746 0
 2835 000a 0120     		movs	r0, #1
 2836              	.LVL258:
 749:../Src/xl_320.c **** 
 2837              		.loc 1 749 0
 2838 000c 7047     		bx	lr
 2839              	.LVL259:
 2840              	.L242:
 743:../Src/xl_320.c ****   if(d_gain > 254){
 2841              		.loc 1 743 0
 2842 000e 00B5     		push	{lr}
ARM GAS  /tmp/ccJWln4X.s 			page 69


 2843              	.LCFI74:
 2844              		.cfi_def_cfa_offset 4
 2845              		.cfi_offset 14, -4
 2846 0010 83B0     		sub	sp, sp, #12
 2847              	.LCFI75:
 2848              		.cfi_def_cfa_offset 16
 2849 0012 1346     		mov	r3, r2
 2850 0014 0A46     		mov	r2, r1
 2851              	.LVL260:
 748:../Src/xl_320.c **** }
 2852              		.loc 1 748 0
 2853 0016 0093     		str	r3, [sp]
 2854 0018 0123     		movs	r3, #1
 2855 001a 1021     		movs	r1, #16
 2856              	.LVL261:
 2857 001c FFF7FEFF 		bl	XL_Write
 2858              	.LVL262:
 749:../Src/xl_320.c **** 
 2859              		.loc 1 749 0
 2860 0020 03B0     		add	sp, sp, #12
 2861              	.LCFI76:
 2862              		.cfi_def_cfa_offset 4
 2863              		@ sp needed
 2864 0022 5DF804FB 		ldr	pc, [sp], #4
 2865              	.L246:
 2866 0026 00BF     		.align	2
 2867              	.L245:
 2868 0028 00000000 		.word	.LANCHOR1
 2869              		.cfi_endproc
 2870              	.LFE41:
 2872              		.section	.text.XL_Set_I_Gain,"ax",%progbits
 2873              		.align	2
 2874              		.global	XL_Set_I_Gain
 2875              		.thumb
 2876              		.thumb_func
 2878              	XL_Set_I_Gain:
 2879              	.LFB42:
 751:../Src/xl_320.c ****   if(i_gain > 254){
 2880              		.loc 1 751 0
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 0
 2883              		@ frame_needed = 0, uses_anonymous_args = 0
 2884              	.LVL263:
 752:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2885              		.loc 1 752 0
 2886 0000 FF29     		cmp	r1, #255
 2887 0002 04D1     		bne	.L248
 753:../Src/xl_320.c ****     return 1;
 2888              		.loc 1 753 0
 2889 0004 0022     		movs	r2, #0
 2890              	.LVL264:
 2891 0006 084B     		ldr	r3, .L251
 2892 0008 1A80     		strh	r2, [r3]	@ movhi
 754:../Src/xl_320.c ****   }
 2893              		.loc 1 754 0
 2894 000a 0120     		movs	r0, #1
 2895              	.LVL265:
ARM GAS  /tmp/ccJWln4X.s 			page 70


 757:../Src/xl_320.c **** 
 2896              		.loc 1 757 0
 2897 000c 7047     		bx	lr
 2898              	.LVL266:
 2899              	.L248:
 751:../Src/xl_320.c ****   if(i_gain > 254){
 2900              		.loc 1 751 0
 2901 000e 00B5     		push	{lr}
 2902              	.LCFI77:
 2903              		.cfi_def_cfa_offset 4
 2904              		.cfi_offset 14, -4
 2905 0010 83B0     		sub	sp, sp, #12
 2906              	.LCFI78:
 2907              		.cfi_def_cfa_offset 16
 2908 0012 1346     		mov	r3, r2
 2909 0014 0A46     		mov	r2, r1
 2910              	.LVL267:
 756:../Src/xl_320.c **** }
 2911              		.loc 1 756 0
 2912 0016 0093     		str	r3, [sp]
 2913 0018 0123     		movs	r3, #1
 2914 001a 1121     		movs	r1, #17
 2915              	.LVL268:
 2916 001c FFF7FEFF 		bl	XL_Write
 2917              	.LVL269:
 757:../Src/xl_320.c **** 
 2918              		.loc 1 757 0
 2919 0020 03B0     		add	sp, sp, #12
 2920              	.LCFI79:
 2921              		.cfi_def_cfa_offset 4
 2922              		@ sp needed
 2923 0022 5DF804FB 		ldr	pc, [sp], #4
 2924              	.L252:
 2925 0026 00BF     		.align	2
 2926              	.L251:
 2927 0028 00000000 		.word	.LANCHOR1
 2928              		.cfi_endproc
 2929              	.LFE42:
 2931              		.section	.text.XL_Set_P_Gain,"ax",%progbits
 2932              		.align	2
 2933              		.global	XL_Set_P_Gain
 2934              		.thumb
 2935              		.thumb_func
 2937              	XL_Set_P_Gain:
 2938              	.LFB43:
 759:../Src/xl_320.c ****   if(p_gain > 254){
 2939              		.loc 1 759 0
 2940              		.cfi_startproc
 2941              		@ args = 0, pretend = 0, frame = 0
 2942              		@ frame_needed = 0, uses_anonymous_args = 0
 2943              	.LVL270:
 760:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2944              		.loc 1 760 0
 2945 0000 FF29     		cmp	r1, #255
 2946 0002 04D1     		bne	.L254
 761:../Src/xl_320.c ****     return 1;
 2947              		.loc 1 761 0
ARM GAS  /tmp/ccJWln4X.s 			page 71


 2948 0004 0022     		movs	r2, #0
 2949              	.LVL271:
 2950 0006 084B     		ldr	r3, .L257
 2951 0008 1A80     		strh	r2, [r3]	@ movhi
 762:../Src/xl_320.c ****   }
 2952              		.loc 1 762 0
 2953 000a 0120     		movs	r0, #1
 2954              	.LVL272:
 765:../Src/xl_320.c **** 
 2955              		.loc 1 765 0
 2956 000c 7047     		bx	lr
 2957              	.LVL273:
 2958              	.L254:
 759:../Src/xl_320.c ****   if(p_gain > 254){
 2959              		.loc 1 759 0
 2960 000e 00B5     		push	{lr}
 2961              	.LCFI80:
 2962              		.cfi_def_cfa_offset 4
 2963              		.cfi_offset 14, -4
 2964 0010 83B0     		sub	sp, sp, #12
 2965              	.LCFI81:
 2966              		.cfi_def_cfa_offset 16
 2967 0012 1346     		mov	r3, r2
 2968 0014 0A46     		mov	r2, r1
 2969              	.LVL274:
 764:../Src/xl_320.c **** }
 2970              		.loc 1 764 0
 2971 0016 0093     		str	r3, [sp]
 2972 0018 0123     		movs	r3, #1
 2973 001a 1221     		movs	r1, #18
 2974              	.LVL275:
 2975 001c FFF7FEFF 		bl	XL_Write
 2976              	.LVL276:
 765:../Src/xl_320.c **** 
 2977              		.loc 1 765 0
 2978 0020 03B0     		add	sp, sp, #12
 2979              	.LCFI82:
 2980              		.cfi_def_cfa_offset 4
 2981              		@ sp needed
 2982 0022 5DF804FB 		ldr	pc, [sp], #4
 2983              	.L258:
 2984 0026 00BF     		.align	2
 2985              	.L257:
 2986 0028 00000000 		.word	.LANCHOR1
 2987              		.cfi_endproc
 2988              	.LFE43:
 2990              		.section	.text.XL_Set_Goal_Position,"ax",%progbits
 2991              		.align	2
 2992              		.global	XL_Set_Goal_Position
 2993              		.thumb
 2994              		.thumb_func
 2996              	XL_Set_Goal_Position:
 2997              	.LFB44:
 767:../Src/xl_320.c ****   if(position > 1023){
 2998              		.loc 1 767 0
 2999              		.cfi_startproc
 3000              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccJWln4X.s 			page 72


 3001              		@ frame_needed = 0, uses_anonymous_args = 0
 3002              	.LVL277:
 768:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3003              		.loc 1 768 0
 3004 0000 B1F5806F 		cmp	r1, #1024
 3005 0004 04D3     		bcc	.L260
 769:../Src/xl_320.c ****     return 1;
 3006              		.loc 1 769 0
 3007 0006 0022     		movs	r2, #0
 3008              	.LVL278:
 3009 0008 074B     		ldr	r3, .L263
 3010 000a 1A80     		strh	r2, [r3]	@ movhi
 770:../Src/xl_320.c ****   }
 3011              		.loc 1 770 0
 3012 000c 0120     		movs	r0, #1
 3013              	.LVL279:
 773:../Src/xl_320.c **** 
 3014              		.loc 1 773 0
 3015 000e 7047     		bx	lr
 3016              	.LVL280:
 3017              	.L260:
 767:../Src/xl_320.c ****   if(position > 1023){
 3018              		.loc 1 767 0
 3019 0010 00B5     		push	{lr}
 3020              	.LCFI83:
 3021              		.cfi_def_cfa_offset 4
 3022              		.cfi_offset 14, -4
 3023 0012 83B0     		sub	sp, sp, #12
 3024              	.LCFI84:
 3025              		.cfi_def_cfa_offset 16
 3026 0014 1346     		mov	r3, r2
 3027 0016 0A46     		mov	r2, r1
 3028              	.LVL281:
 772:../Src/xl_320.c **** }
 3029              		.loc 1 772 0
 3030 0018 0093     		str	r3, [sp]
 3031 001a 0223     		movs	r3, #2
 3032 001c 1321     		movs	r1, #19
 3033              	.LVL282:
 3034 001e FFF7FEFF 		bl	XL_Write
 3035              	.LVL283:
 773:../Src/xl_320.c **** 
 3036              		.loc 1 773 0
 3037 0022 03B0     		add	sp, sp, #12
 3038              	.LCFI85:
 3039              		.cfi_def_cfa_offset 4
 3040              		@ sp needed
 3041 0024 5DF804FB 		ldr	pc, [sp], #4
 3042              	.L264:
 3043              		.align	2
 3044              	.L263:
 3045 0028 00000000 		.word	.LANCHOR1
 3046              		.cfi_endproc
 3047              	.LFE44:
 3049              		.section	.text.XL_Set_Goal_Speed_Join,"ax",%progbits
 3050              		.align	2
 3051              		.global	XL_Set_Goal_Speed_Join
ARM GAS  /tmp/ccJWln4X.s 			page 73


 3052              		.thumb
 3053              		.thumb_func
 3055              	XL_Set_Goal_Speed_Join:
 3056              	.LFB45:
 775:../Src/xl_320.c ****   if(speed > 1023){
 3057              		.loc 1 775 0
 3058              		.cfi_startproc
 3059              		@ args = 0, pretend = 0, frame = 0
 3060              		@ frame_needed = 0, uses_anonymous_args = 0
 3061              	.LVL284:
 776:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3062              		.loc 1 776 0
 3063 0000 B1F5806F 		cmp	r1, #1024
 3064 0004 04D3     		bcc	.L266
 777:../Src/xl_320.c ****     return 1;
 3065              		.loc 1 777 0
 3066 0006 0022     		movs	r2, #0
 3067              	.LVL285:
 3068 0008 074B     		ldr	r3, .L269
 3069 000a 1A80     		strh	r2, [r3]	@ movhi
 778:../Src/xl_320.c ****   }
 3070              		.loc 1 778 0
 3071 000c 0120     		movs	r0, #1
 3072              	.LVL286:
 781:../Src/xl_320.c **** 
 3073              		.loc 1 781 0
 3074 000e 7047     		bx	lr
 3075              	.LVL287:
 3076              	.L266:
 775:../Src/xl_320.c ****   if(speed > 1023){
 3077              		.loc 1 775 0
 3078 0010 00B5     		push	{lr}
 3079              	.LCFI86:
 3080              		.cfi_def_cfa_offset 4
 3081              		.cfi_offset 14, -4
 3082 0012 83B0     		sub	sp, sp, #12
 3083              	.LCFI87:
 3084              		.cfi_def_cfa_offset 16
 3085 0014 1346     		mov	r3, r2
 3086 0016 0A46     		mov	r2, r1
 3087              	.LVL288:
 780:../Src/xl_320.c **** }
 3088              		.loc 1 780 0
 3089 0018 0093     		str	r3, [sp]
 3090 001a 0223     		movs	r3, #2
 3091 001c 1421     		movs	r1, #20
 3092              	.LVL289:
 3093 001e FFF7FEFF 		bl	XL_Write
 3094              	.LVL290:
 781:../Src/xl_320.c **** 
 3095              		.loc 1 781 0
 3096 0022 03B0     		add	sp, sp, #12
 3097              	.LCFI88:
 3098              		.cfi_def_cfa_offset 4
 3099              		@ sp needed
 3100 0024 5DF804FB 		ldr	pc, [sp], #4
 3101              	.L270:
ARM GAS  /tmp/ccJWln4X.s 			page 74


 3102              		.align	2
 3103              	.L269:
 3104 0028 00000000 		.word	.LANCHOR1
 3105              		.cfi_endproc
 3106              	.LFE45:
 3108              		.section	.text.XL_Set_Goal_Speed_Wheel,"ax",%progbits
 3109              		.align	2
 3110              		.global	XL_Set_Goal_Speed_Wheel
 3111              		.thumb
 3112              		.thumb_func
 3114              	XL_Set_Goal_Speed_Wheel:
 3115              	.LFB46:
 783:../Src/xl_320.c ****   if(speed > 1023){
 3116              		.loc 1 783 0
 3117              		.cfi_startproc
 3118              		@ args = 0, pretend = 0, frame = 0
 3119              		@ frame_needed = 0, uses_anonymous_args = 0
 3120              	.LVL291:
 3121 0000 00B5     		push	{lr}
 3122              	.LCFI89:
 3123              		.cfi_def_cfa_offset 4
 3124              		.cfi_offset 14, -4
 3125 0002 83B0     		sub	sp, sp, #12
 3126              	.LCFI90:
 3127              		.cfi_def_cfa_offset 16
 784:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3128              		.loc 1 784 0
 3129 0004 B1F5806F 		cmp	r1, #1024
 3130 0008 04D3     		bcc	.L272
 785:../Src/xl_320.c ****     return 1;
 3131              		.loc 1 785 0
 3132 000a 0022     		movs	r2, #0
 3133              	.LVL292:
 3134 000c 0C4B     		ldr	r3, .L279
 3135              	.LVL293:
 3136 000e 1A80     		strh	r2, [r3]	@ movhi
 786:../Src/xl_320.c ****   }
 3137              		.loc 1 786 0
 3138 0010 0120     		movs	r0, #1
 3139              	.LVL294:
 3140 0012 12E0     		b	.L273
 3141              	.LVL295:
 3142              	.L272:
 788:../Src/xl_320.c ****   case XL_CLOCKWISE:
 3143              		.loc 1 788 0
 3144 0014 12B1     		cbz	r2, .L275
 3145 0016 012A     		cmp	r2, #1
 3146 0018 09D0     		beq	.L276
 3147 001a 03E0     		b	.L277
 3148              	.L275:
 790:../Src/xl_320.c ****     break;
 3149              		.loc 1 790 0
 3150 001c 01F58061 		add	r1, r1, #1024
 3151              	.LVL296:
 3152 0020 89B2     		uxth	r1, r1
 3153              	.LVL297:
 791:../Src/xl_320.c ****   case XL_COUNTERCLOCKWISE:
ARM GAS  /tmp/ccJWln4X.s 			page 75


 3154              		.loc 1 791 0
 3155 0022 04E0     		b	.L276
 3156              	.L277:
 795:../Src/xl_320.c ****     return 1;
 3157              		.loc 1 795 0
 3158 0024 0022     		movs	r2, #0
 3159              	.LVL298:
 3160 0026 064B     		ldr	r3, .L279
 3161              	.LVL299:
 3162 0028 1A80     		strh	r2, [r3]	@ movhi
 796:../Src/xl_320.c ****     break;
 3163              		.loc 1 796 0
 3164 002a 0120     		movs	r0, #1
 3165              	.LVL300:
 3166 002c 05E0     		b	.L273
 3167              	.LVL301:
 3168              	.L276:
 799:../Src/xl_320.c **** }
 3169              		.loc 1 799 0
 3170 002e 0093     		str	r3, [sp]
 3171 0030 0223     		movs	r3, #2
 3172              	.LVL302:
 3173 0032 0A46     		mov	r2, r1
 3174              	.LVL303:
 3175 0034 1421     		movs	r1, #20
 3176              	.LVL304:
 3177 0036 FFF7FEFF 		bl	XL_Write
 3178              	.LVL305:
 3179              	.L273:
 800:../Src/xl_320.c **** 
 3180              		.loc 1 800 0
 3181 003a 03B0     		add	sp, sp, #12
 3182              	.LCFI91:
 3183              		.cfi_def_cfa_offset 4
 3184              		@ sp needed
 3185 003c 5DF804FB 		ldr	pc, [sp], #4
 3186              	.L280:
 3187              		.align	2
 3188              	.L279:
 3189 0040 00000000 		.word	.LANCHOR1
 3190              		.cfi_endproc
 3191              	.LFE46:
 3193              		.section	.text.XL_Set_Torque_Limit,"ax",%progbits
 3194              		.align	2
 3195              		.global	XL_Set_Torque_Limit
 3196              		.thumb
 3197              		.thumb_func
 3199              	XL_Set_Torque_Limit:
 3200              	.LFB47:
 802:../Src/xl_320.c ****   if(torque_limit > 1023){
 3201              		.loc 1 802 0
 3202              		.cfi_startproc
 3203              		@ args = 0, pretend = 0, frame = 0
 3204              		@ frame_needed = 0, uses_anonymous_args = 0
 3205              	.LVL306:
 803:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3206              		.loc 1 803 0
ARM GAS  /tmp/ccJWln4X.s 			page 76


 3207 0000 B1F5806F 		cmp	r1, #1024
 3208 0004 04D3     		bcc	.L282
 804:../Src/xl_320.c ****     return 1;
 3209              		.loc 1 804 0
 3210 0006 0022     		movs	r2, #0
 3211              	.LVL307:
 3212 0008 074B     		ldr	r3, .L285
 3213 000a 1A80     		strh	r2, [r3]	@ movhi
 805:../Src/xl_320.c ****   }
 3214              		.loc 1 805 0
 3215 000c 0120     		movs	r0, #1
 3216              	.LVL308:
 808:../Src/xl_320.c **** 
 3217              		.loc 1 808 0
 3218 000e 7047     		bx	lr
 3219              	.LVL309:
 3220              	.L282:
 802:../Src/xl_320.c ****   if(torque_limit > 1023){
 3221              		.loc 1 802 0
 3222 0010 00B5     		push	{lr}
 3223              	.LCFI92:
 3224              		.cfi_def_cfa_offset 4
 3225              		.cfi_offset 14, -4
 3226 0012 83B0     		sub	sp, sp, #12
 3227              	.LCFI93:
 3228              		.cfi_def_cfa_offset 16
 3229 0014 1346     		mov	r3, r2
 3230 0016 0A46     		mov	r2, r1
 3231              	.LVL310:
 807:../Src/xl_320.c **** }
 3232              		.loc 1 807 0
 3233 0018 0093     		str	r3, [sp]
 3234 001a 0223     		movs	r3, #2
 3235 001c 1521     		movs	r1, #21
 3236              	.LVL311:
 3237 001e FFF7FEFF 		bl	XL_Write
 3238              	.LVL312:
 808:../Src/xl_320.c **** 
 3239              		.loc 1 808 0
 3240 0022 03B0     		add	sp, sp, #12
 3241              	.LCFI94:
 3242              		.cfi_def_cfa_offset 4
 3243              		@ sp needed
 3244 0024 5DF804FB 		ldr	pc, [sp], #4
 3245              	.L286:
 3246              		.align	2
 3247              	.L285:
 3248 0028 00000000 		.word	.LANCHOR1
 3249              		.cfi_endproc
 3250              	.LFE47:
 3252              		.section	.text.XL_Set_Punch,"ax",%progbits
 3253              		.align	2
 3254              		.global	XL_Set_Punch
 3255              		.thumb
 3256              		.thumb_func
 3258              	XL_Set_Punch:
 3259              	.LFB48:
ARM GAS  /tmp/ccJWln4X.s 			page 77


 810:../Src/xl_320.c ****   if(punch < 0x20 || punch > 0x3FF){
 3260              		.loc 1 810 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 0
 3263              		@ frame_needed = 0, uses_anonymous_args = 0
 3264              	.LVL313:
 811:../Src/xl_320.c ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3265              		.loc 1 811 0
 3266 0000 A1F12003 		sub	r3, r1, #32
 3267 0004 9BB2     		uxth	r3, r3
 3268 0006 B3F5787F 		cmp	r3, #992
 3269 000a 04D3     		bcc	.L288
 812:../Src/xl_320.c ****     return 1;
 3270              		.loc 1 812 0
 3271 000c 0022     		movs	r2, #0
 3272              	.LVL314:
 3273 000e 084B     		ldr	r3, .L291
 3274 0010 1A80     		strh	r2, [r3]	@ movhi
 813:../Src/xl_320.c ****   }
 3275              		.loc 1 813 0
 3276 0012 0120     		movs	r0, #1
 3277              	.LVL315:
 816:../Src/xl_320.c **** 
 3278              		.loc 1 816 0
 3279 0014 7047     		bx	lr
 3280              	.LVL316:
 3281              	.L288:
 810:../Src/xl_320.c ****   if(punch < 0x20 || punch > 0x3FF){
 3282              		.loc 1 810 0
 3283 0016 00B5     		push	{lr}
 3284              	.LCFI95:
 3285              		.cfi_def_cfa_offset 4
 3286              		.cfi_offset 14, -4
 3287 0018 83B0     		sub	sp, sp, #12
 3288              	.LCFI96:
 3289              		.cfi_def_cfa_offset 16
 3290 001a 1346     		mov	r3, r2
 3291 001c 0A46     		mov	r2, r1
 3292              	.LVL317:
 815:../Src/xl_320.c **** }
 3293              		.loc 1 815 0
 3294 001e 0093     		str	r3, [sp]
 3295 0020 0223     		movs	r3, #2
 3296 0022 1621     		movs	r1, #22
 3297              	.LVL318:
 3298 0024 FFF7FEFF 		bl	XL_Write
 3299              	.LVL319:
 816:../Src/xl_320.c **** 
 3300              		.loc 1 816 0
 3301 0028 03B0     		add	sp, sp, #12
 3302              	.LCFI97:
 3303              		.cfi_def_cfa_offset 4
 3304              		@ sp needed
 3305 002a 5DF804FB 		ldr	pc, [sp], #4
 3306              	.L292:
 3307 002e 00BF     		.align	2
 3308              	.L291:
ARM GAS  /tmp/ccJWln4X.s 			page 78


 3309 0030 00000000 		.word	.LANCHOR1
 3310              		.cfi_endproc
 3311              	.LFE48:
 3313              		.section	.rodata
 3314              		.align	2
 3315              		.set	.LANCHOR0,. + 0
 3316              	.LC0:
 3317 0000 0000     		.short	0
 3318 0002 0580     		.short	-32763
 3319 0004 0F80     		.short	-32753
 3320 0006 0A00     		.short	10
 3321 0008 1B80     		.short	-32741
 3322 000a 1E00     		.short	30
 3323 000c 1400     		.short	20
 3324 000e 1180     		.short	-32751
 3325 0010 3380     		.short	-32717
 3326 0012 3600     		.short	54
 3327 0014 3C00     		.short	60
 3328 0016 3980     		.short	-32711
 3329 0018 2800     		.short	40
 3330 001a 2D80     		.short	-32723
 3331 001c 2780     		.short	-32729
 3332 001e 2200     		.short	34
 3333 0020 6380     		.short	-32669
 3334 0022 6600     		.short	102
 3335 0024 6C00     		.short	108
 3336 0026 6980     		.short	-32663
 3337 0028 7800     		.short	120
 3338 002a 7D80     		.short	-32643
 3339 002c 7780     		.short	-32649
 3340 002e 7200     		.short	114
 3341 0030 5000     		.short	80
 3342 0032 5580     		.short	-32683
 3343 0034 5F80     		.short	-32673
 3344 0036 5A00     		.short	90
 3345 0038 4B80     		.short	-32693
 3346 003a 4E00     		.short	78
 3347 003c 4400     		.short	68
 3348 003e 4180     		.short	-32703
 3349 0040 C380     		.short	-32573
 3350 0042 C600     		.short	198
 3351 0044 CC00     		.short	204
 3352 0046 C980     		.short	-32567
 3353 0048 D800     		.short	216
 3354 004a DD80     		.short	-32547
 3355 004c D780     		.short	-32553
 3356 004e D200     		.short	210
 3357 0050 F000     		.short	240
 3358 0052 F580     		.short	-32523
 3359 0054 FF80     		.short	-32513
 3360 0056 FA00     		.short	250
 3361 0058 EB80     		.short	-32533
 3362 005a EE00     		.short	238
 3363 005c E400     		.short	228
 3364 005e E180     		.short	-32543
 3365 0060 A000     		.short	160
 3366 0062 A580     		.short	-32603
ARM GAS  /tmp/ccJWln4X.s 			page 79


 3367 0064 AF80     		.short	-32593
 3368 0066 AA00     		.short	170
 3369 0068 BB80     		.short	-32581
 3370 006a BE00     		.short	190
 3371 006c B400     		.short	180
 3372 006e B180     		.short	-32591
 3373 0070 9380     		.short	-32621
 3374 0072 9600     		.short	150
 3375 0074 9C00     		.short	156
 3376 0076 9980     		.short	-32615
 3377 0078 8800     		.short	136
 3378 007a 8D80     		.short	-32627
 3379 007c 8780     		.short	-32633
 3380 007e 8200     		.short	130
 3381 0080 8381     		.short	-32381
 3382 0082 8601     		.short	390
 3383 0084 8C01     		.short	396
 3384 0086 8981     		.short	-32375
 3385 0088 9801     		.short	408
 3386 008a 9D81     		.short	-32355
 3387 008c 9781     		.short	-32361
 3388 008e 9201     		.short	402
 3389 0090 B001     		.short	432
 3390 0092 B581     		.short	-32331
 3391 0094 BF81     		.short	-32321
 3392 0096 BA01     		.short	442
 3393 0098 AB81     		.short	-32341
 3394 009a AE01     		.short	430
 3395 009c A401     		.short	420
 3396 009e A181     		.short	-32351
 3397 00a0 E001     		.short	480
 3398 00a2 E581     		.short	-32283
 3399 00a4 EF81     		.short	-32273
 3400 00a6 EA01     		.short	490
 3401 00a8 FB81     		.short	-32261
 3402 00aa FE01     		.short	510
 3403 00ac F401     		.short	500
 3404 00ae F181     		.short	-32271
 3405 00b0 D381     		.short	-32301
 3406 00b2 D601     		.short	470
 3407 00b4 DC01     		.short	476
 3408 00b6 D981     		.short	-32295
 3409 00b8 C801     		.short	456
 3410 00ba CD81     		.short	-32307
 3411 00bc C781     		.short	-32313
 3412 00be C201     		.short	450
 3413 00c0 4001     		.short	320
 3414 00c2 4581     		.short	-32443
 3415 00c4 4F81     		.short	-32433
 3416 00c6 4A01     		.short	330
 3417 00c8 5B81     		.short	-32421
 3418 00ca 5E01     		.short	350
 3419 00cc 5401     		.short	340
 3420 00ce 5181     		.short	-32431
 3421 00d0 7381     		.short	-32397
 3422 00d2 7601     		.short	374
 3423 00d4 7C01     		.short	380
ARM GAS  /tmp/ccJWln4X.s 			page 80


 3424 00d6 7981     		.short	-32391
 3425 00d8 6801     		.short	360
 3426 00da 6D81     		.short	-32403
 3427 00dc 6781     		.short	-32409
 3428 00de 6201     		.short	354
 3429 00e0 2381     		.short	-32477
 3430 00e2 2601     		.short	294
 3431 00e4 2C01     		.short	300
 3432 00e6 2981     		.short	-32471
 3433 00e8 3801     		.short	312
 3434 00ea 3D81     		.short	-32451
 3435 00ec 3781     		.short	-32457
 3436 00ee 3201     		.short	306
 3437 00f0 1001     		.short	272
 3438 00f2 1581     		.short	-32491
 3439 00f4 1F81     		.short	-32481
 3440 00f6 1A01     		.short	282
 3441 00f8 0B81     		.short	-32501
 3442 00fa 0E01     		.short	270
 3443 00fc 0401     		.short	260
 3444 00fe 0181     		.short	-32511
 3445 0100 0383     		.short	-31997
 3446 0102 0603     		.short	774
 3447 0104 0C03     		.short	780
 3448 0106 0983     		.short	-31991
 3449 0108 1803     		.short	792
 3450 010a 1D83     		.short	-31971
 3451 010c 1783     		.short	-31977
 3452 010e 1203     		.short	786
 3453 0110 3003     		.short	816
 3454 0112 3583     		.short	-31947
 3455 0114 3F83     		.short	-31937
 3456 0116 3A03     		.short	826
 3457 0118 2B83     		.short	-31957
 3458 011a 2E03     		.short	814
 3459 011c 2403     		.short	804
 3460 011e 2183     		.short	-31967
 3461 0120 6003     		.short	864
 3462 0122 6583     		.short	-31899
 3463 0124 6F83     		.short	-31889
 3464 0126 6A03     		.short	874
 3465 0128 7B83     		.short	-31877
 3466 012a 7E03     		.short	894
 3467 012c 7403     		.short	884
 3468 012e 7183     		.short	-31887
 3469 0130 5383     		.short	-31917
 3470 0132 5603     		.short	854
 3471 0134 5C03     		.short	860
 3472 0136 5983     		.short	-31911
 3473 0138 4803     		.short	840
 3474 013a 4D83     		.short	-31923
 3475 013c 4783     		.short	-31929
 3476 013e 4203     		.short	834
 3477 0140 C003     		.short	960
 3478 0142 C583     		.short	-31803
 3479 0144 CF83     		.short	-31793
 3480 0146 CA03     		.short	970
ARM GAS  /tmp/ccJWln4X.s 			page 81


 3481 0148 DB83     		.short	-31781
 3482 014a DE03     		.short	990
 3483 014c D403     		.short	980
 3484 014e D183     		.short	-31791
 3485 0150 F383     		.short	-31757
 3486 0152 F603     		.short	1014
 3487 0154 FC03     		.short	1020
 3488 0156 F983     		.short	-31751
 3489 0158 E803     		.short	1000
 3490 015a ED83     		.short	-31763
 3491 015c E783     		.short	-31769
 3492 015e E203     		.short	994
 3493 0160 A383     		.short	-31837
 3494 0162 A603     		.short	934
 3495 0164 AC03     		.short	940
 3496 0166 A983     		.short	-31831
 3497 0168 B803     		.short	952
 3498 016a BD83     		.short	-31811
 3499 016c B783     		.short	-31817
 3500 016e B203     		.short	946
 3501 0170 9003     		.short	912
 3502 0172 9583     		.short	-31851
 3503 0174 9F83     		.short	-31841
 3504 0176 9A03     		.short	922
 3505 0178 8B83     		.short	-31861
 3506 017a 8E03     		.short	910
 3507 017c 8403     		.short	900
 3508 017e 8183     		.short	-31871
 3509 0180 8002     		.short	640
 3510 0182 8582     		.short	-32123
 3511 0184 8F82     		.short	-32113
 3512 0186 8A02     		.short	650
 3513 0188 9B82     		.short	-32101
 3514 018a 9E02     		.short	670
 3515 018c 9402     		.short	660
 3516 018e 9182     		.short	-32111
 3517 0190 B382     		.short	-32077
 3518 0192 B602     		.short	694
 3519 0194 BC02     		.short	700
 3520 0196 B982     		.short	-32071
 3521 0198 A802     		.short	680
 3522 019a AD82     		.short	-32083
 3523 019c A782     		.short	-32089
 3524 019e A202     		.short	674
 3525 01a0 E382     		.short	-32029
 3526 01a2 E602     		.short	742
 3527 01a4 EC02     		.short	748
 3528 01a6 E982     		.short	-32023
 3529 01a8 F802     		.short	760
 3530 01aa FD82     		.short	-32003
 3531 01ac F782     		.short	-32009
 3532 01ae F202     		.short	754
 3533 01b0 D002     		.short	720
 3534 01b2 D582     		.short	-32043
 3535 01b4 DF82     		.short	-32033
 3536 01b6 DA02     		.short	730
 3537 01b8 CB82     		.short	-32053
ARM GAS  /tmp/ccJWln4X.s 			page 82


 3538 01ba CE02     		.short	718
 3539 01bc C402     		.short	708
 3540 01be C182     		.short	-32063
 3541 01c0 4382     		.short	-32189
 3542 01c2 4602     		.short	582
 3543 01c4 4C02     		.short	588
 3544 01c6 4982     		.short	-32183
 3545 01c8 5802     		.short	600
 3546 01ca 5D82     		.short	-32163
 3547 01cc 5782     		.short	-32169
 3548 01ce 5202     		.short	594
 3549 01d0 7002     		.short	624
 3550 01d2 7582     		.short	-32139
 3551 01d4 7F82     		.short	-32129
 3552 01d6 7A02     		.short	634
 3553 01d8 6B82     		.short	-32149
 3554 01da 6E02     		.short	622
 3555 01dc 6402     		.short	612
 3556 01de 6182     		.short	-32159
 3557 01e0 2002     		.short	544
 3558 01e2 2582     		.short	-32219
 3559 01e4 2F82     		.short	-32209
 3560 01e6 2A02     		.short	554
 3561 01e8 3B82     		.short	-32197
 3562 01ea 3E02     		.short	574
 3563 01ec 3402     		.short	564
 3564 01ee 3182     		.short	-32207
 3565 01f0 1382     		.short	-32237
 3566 01f2 1602     		.short	534
 3567 01f4 1C02     		.short	540
 3568 01f6 1982     		.short	-32231
 3569 01f8 0802     		.short	520
 3570 01fa 0D82     		.short	-32243
 3571 01fc 0782     		.short	-32249
 3572 01fe 0202     		.short	514
 3573              		.section	.bss.err,"aw",%nobits
 3574              		.align	1
 3575              		.set	.LANCHOR1,. + 0
 3578              	err:
 3579 0000 0000     		.space	2
 3580              		.section	.rodata.field_addr,"a",%progbits
 3581              		.align	2
 3582              		.set	.LANCHOR2,. + 0
 3585              	field_addr:
 3586 0000 03       		.byte	3
 3587 0001 04       		.byte	4
 3588 0002 05       		.byte	5
 3589 0003 06       		.byte	6
 3590 0004 08       		.byte	8
 3591 0005 0B       		.byte	11
 3592 0006 0C       		.byte	12
 3593 0007 0D       		.byte	13
 3594 0008 0E       		.byte	14
 3595 0009 0F       		.byte	15
 3596 000a 11       		.byte	17
 3597 000b 12       		.byte	18
 3598 000c 00       		.byte	0
ARM GAS  /tmp/ccJWln4X.s 			page 83


 3599 000d 02       		.byte	2
 3600 000e 18       		.byte	24
 3601 000f 19       		.byte	25
 3602 0010 1B       		.byte	27
 3603 0011 1C       		.byte	28
 3604 0012 1D       		.byte	29
 3605 0013 1E       		.byte	30
 3606 0014 20       		.byte	32
 3607 0015 23       		.byte	35
 3608 0016 33       		.byte	51
 3609 0017 25       		.byte	37
 3610 0018 27       		.byte	39
 3611 0019 29       		.byte	41
 3612 001a 2D       		.byte	45
 3613 001b 2E       		.byte	46
 3614 001c 2F       		.byte	47
 3615 001d 31       		.byte	49
 3616 001e 32       		.byte	50
 3617              		.section	.bss.params.5643,"aw",%nobits
 3618              		.align	2
 3619              		.set	.LANCHOR4,. + 0
 3622              	params.5643:
 3623 0000 00000000 		.space	4
 3624              		.section	.rodata.field_length,"a",%progbits
 3625              		.align	2
 3626              		.set	.LANCHOR3,. + 0
 3629              	field_length:
 3630 0000 01       		.byte	1
 3631 0001 01       		.byte	1
 3632 0002 01       		.byte	1
 3633 0003 02       		.byte	2
 3634 0004 02       		.byte	2
 3635 0005 01       		.byte	1
 3636 0006 01       		.byte	1
 3637 0007 01       		.byte	1
 3638 0008 01       		.byte	1
 3639 0009 02       		.byte	2
 3640 000a 01       		.byte	1
 3641 000b 01       		.byte	1
 3642 000c 02       		.byte	2
 3643 000d 01       		.byte	1
 3644 000e 01       		.byte	1
 3645 000f 01       		.byte	1
 3646 0010 01       		.byte	1
 3647 0011 01       		.byte	1
 3648 0012 01       		.byte	1
 3649 0013 02       		.byte	2
 3650 0014 02       		.byte	2
 3651 0015 02       		.byte	2
 3652 0016 02       		.byte	2
 3653 0017 02       		.byte	2
 3654 0018 02       		.byte	2
 3655 0019 02       		.byte	2
 3656 001a 01       		.byte	1
 3657 001b 01       		.byte	1
 3658 001c 01       		.byte	1
 3659 001d 01       		.byte	1
ARM GAS  /tmp/ccJWln4X.s 			page 84


 3660 001e 01       		.byte	1
 3661              		.section	.bss.packet.5642,"aw",%nobits
 3662              		.align	2
 3663              		.set	.LANCHOR5,. + 0
 3666              	packet.5642:
 3667 0000 00000000 		.space	8
 3667      00000000 
 3668              		.text
 3669              	.Letext0:
 3670              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3671              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3672              		.file 4 "../Inc/xl_320.h"
ARM GAS  /tmp/ccJWln4X.s 			page 85


DEFINED SYMBOLS
                            *ABS*:00000000 xl_320.c
     /tmp/ccJWln4X.s:22     .text.XL_FSM_HEADER_0:00000000 $t
     /tmp/ccJWln4X.s:27     .text.XL_FSM_HEADER_0:00000000 XL_FSM_HEADER_0
     /tmp/ccJWln4X.s:52     .text.XL_FSM_HEADER_0:00000014 $d
     /tmp/ccJWln4X.s:62     .text.XL_FSM_HEADER_1:00000000 XL_FSM_HEADER_1
     /tmp/ccJWln4X.s:57     .text.XL_FSM_HEADER_1:00000000 $t
     /tmp/ccJWln4X.s:92     .text.XL_FSM_HEADER_1:0000001c $d
     /tmp/ccJWln4X.s:103    .text.XL_FSM_HEADER_2:00000000 XL_FSM_HEADER_2
     /tmp/ccJWln4X.s:98     .text.XL_FSM_HEADER_2:00000000 $t
     /tmp/ccJWln4X.s:133    .text.XL_FSM_HEADER_2:0000001c $d
     /tmp/ccJWln4X.s:144    .text.XL_FSM_HEADER_3:00000000 XL_FSM_HEADER_3
     /tmp/ccJWln4X.s:139    .text.XL_FSM_HEADER_3:00000000 $t
     /tmp/ccJWln4X.s:174    .text.XL_FSM_HEADER_3:0000001c $d
     /tmp/ccJWln4X.s:185    .text.XL_FSM_ID:00000000 XL_FSM_ID
     /tmp/ccJWln4X.s:180    .text.XL_FSM_ID:00000000 $t
     /tmp/ccJWln4X.s:218    .text.XL_FSM_ID:00000020 $d
     /tmp/ccJWln4X.s:229    .text.XL_FSM_LENGTH_LOW:00000000 XL_FSM_LENGTH_LOW
     /tmp/ccJWln4X.s:224    .text.XL_FSM_LENGTH_LOW:00000000 $t
     /tmp/ccJWln4X.s:250    .text.XL_FSM_LENGTH_LOW:00000010 $d
     /tmp/ccJWln4X.s:260    .text.XL_FSM_LENGTH_HIGH:00000000 XL_FSM_LENGTH_HIGH
     /tmp/ccJWln4X.s:255    .text.XL_FSM_LENGTH_HIGH:00000000 $t
     /tmp/ccJWln4X.s:301    .text.XL_FSM_LENGTH_HIGH:0000002c $d
     /tmp/ccJWln4X.s:312    .text.XL_FSM_INSTRUCTION:00000000 XL_FSM_INSTRUCTION
     /tmp/ccJWln4X.s:307    .text.XL_FSM_INSTRUCTION:00000000 $t
     /tmp/ccJWln4X.s:346    .text.XL_FSM_INSTRUCTION:00000024 $d
     /tmp/ccJWln4X.s:357    .text.XL_FSM_RECEIVING:00000000 XL_FSM_RECEIVING
     /tmp/ccJWln4X.s:352    .text.XL_FSM_RECEIVING:00000000 $t
     /tmp/ccJWln4X.s:385    .text.XL_Update_CRC:00000000 $t
     /tmp/ccJWln4X.s:390    .text.XL_Update_CRC:00000000 XL_Update_CRC
     /tmp/ccJWln4X.s:455    .text.XL_Update_CRC:0000003c $d
     /tmp/ccJWln4X.s:460    .text.XL_Extract_Status_Packet:00000000 $t
     /tmp/ccJWln4X.s:465    .text.XL_Extract_Status_Packet:00000000 XL_Extract_Status_Packet
     /tmp/ccJWln4X.s:595    .text.XL_Extract_Status_Packet:0000008c $d
     /tmp/ccJWln4X.s:600    .text.XL_Receive:00000000 $t
     /tmp/ccJWln4X.s:605    .text.XL_Receive:00000000 XL_Receive
     /tmp/ccJWln4X.s:728    .text.XL_Receive:00000094 $d
     /tmp/ccJWln4X.s:734    .text.XL_Build_Frame:00000000 $t
     /tmp/ccJWln4X.s:739    .text.XL_Build_Frame:00000000 XL_Build_Frame
     /tmp/ccJWln4X.s:928    .text.XL_Build_Frame:000000c4 $d
     /tmp/ccJWln4X.s:934    .text.XL_Send:00000000 $t
     /tmp/ccJWln4X.s:939    .text.XL_Send:00000000 XL_Send
     /tmp/ccJWln4X.s:1005   .text.XL_Send:0000003c $d
     /tmp/ccJWln4X.s:1010   .text.XL_Get_Error:00000000 $t
     /tmp/ccJWln4X.s:1015   .text.XL_Get_Error:00000000 XL_Get_Error
     /tmp/ccJWln4X.s:1029   .text.XL_Get_Error:00000008 $d
     /tmp/ccJWln4X.s:1034   .text.XL_Check_Status:00000000 $t
     /tmp/ccJWln4X.s:1039   .text.XL_Check_Status:00000000 XL_Check_Status
     /tmp/ccJWln4X.s:1065   .text.XL_Check_Status:00000018 $d
     /tmp/ccJWln4X.s:1070   .text.XL_Ping:00000000 $t
     /tmp/ccJWln4X.s:1075   .text.XL_Ping:00000000 XL_Ping
     /tmp/ccJWln4X.s:1147   .text.XL_Ping:0000004c $d
     /tmp/ccJWln4X.s:1152   .text.XL_Discover:00000000 $t
     /tmp/ccJWln4X.s:1157   .text.XL_Discover:00000000 XL_Discover
     /tmp/ccJWln4X.s:1231   .text.XL_Read:00000000 $t
     /tmp/ccJWln4X.s:1236   .text.XL_Read:00000000 XL_Read
     /tmp/ccJWln4X.s:1346   .text.XL_Read:00000090 $d
ARM GAS  /tmp/ccJWln4X.s 			page 86


     /tmp/ccJWln4X.s:1353   .text.XL_Factory_Reset:00000000 $t
     /tmp/ccJWln4X.s:1358   .text.XL_Factory_Reset:00000000 XL_Factory_Reset
     /tmp/ccJWln4X.s:1416   .text.XL_Reboot:00000000 $t
     /tmp/ccJWln4X.s:1421   .text.XL_Reboot:00000000 XL_Reboot
     /tmp/ccJWln4X.s:1476   .text.XL_Configure_Baud_Rate:00000000 $t
     /tmp/ccJWln4X.s:1481   .text.XL_Configure_Baud_Rate:00000000 XL_Configure_Baud_Rate
     /tmp/ccJWln4X.s:1500   .text.XL_Configure_Baud_Rate:0000000c $d
     /tmp/ccJWln4X.s:1505   .text.XL_Configure_Control_Mode:00000000 $t
     /tmp/ccJWln4X.s:1510   .text.XL_Configure_Control_Mode:00000000 XL_Configure_Control_Mode
     /tmp/ccJWln4X.s:1529   .text.XL_Configure_Control_Mode:0000000c $d
     /tmp/ccJWln4X.s:1534   .text.XL_Configure_Return_Level:00000000 $t
     /tmp/ccJWln4X.s:1539   .text.XL_Configure_Return_Level:00000000 XL_Configure_Return_Level
     /tmp/ccJWln4X.s:1558   .text.XL_Configure_Return_Level:0000000c $d
     /tmp/ccJWln4X.s:1563   .text.XL_Get_Current_Position:00000000 $t
     /tmp/ccJWln4X.s:1568   .text.XL_Get_Current_Position:00000000 XL_Get_Current_Position
     /tmp/ccJWln4X.s:1592   .text.XL_Get_Current_Speed:00000000 $t
     /tmp/ccJWln4X.s:1597   .text.XL_Get_Current_Speed:00000000 XL_Get_Current_Speed
     /tmp/ccJWln4X.s:1639   .text.XL_Get_Current_Load:00000000 $t
     /tmp/ccJWln4X.s:1644   .text.XL_Get_Current_Load:00000000 XL_Get_Current_Load
     /tmp/ccJWln4X.s:1686   .text.XL_Get_Current_Voltage:00000000 $t
     /tmp/ccJWln4X.s:1691   .text.XL_Get_Current_Voltage:00000000 XL_Get_Current_Voltage
     /tmp/ccJWln4X.s:1715   .text.XL_Get_Current_Temperature:00000000 $t
     /tmp/ccJWln4X.s:1720   .text.XL_Get_Current_Temperature:00000000 XL_Get_Current_Temperature
     /tmp/ccJWln4X.s:1744   .text.XL_Is_Working:00000000 $t
     /tmp/ccJWln4X.s:1749   .text.XL_Is_Working:00000000 XL_Is_Working
     /tmp/ccJWln4X.s:1773   .text.XL_Is_Moving:00000000 $t
     /tmp/ccJWln4X.s:1778   .text.XL_Is_Moving:00000000 XL_Is_Moving
     /tmp/ccJWln4X.s:1802   .text.XL_Get_Hardware_Error:00000000 $t
     /tmp/ccJWln4X.s:1807   .text.XL_Get_Hardware_Error:00000000 XL_Get_Hardware_Error
     /tmp/ccJWln4X.s:1831   .text.XL_Check_Alert:00000000 $t
     /tmp/ccJWln4X.s:1836   .text.XL_Check_Alert:00000000 XL_Check_Alert
     /tmp/ccJWln4X.s:1887   .text.XL_Check_Alert:00000030 $d
     /tmp/ccJWln4X.s:1892   .text.XL_Action:00000000 $t
     /tmp/ccJWln4X.s:1897   .text.XL_Action:00000000 XL_Action
     /tmp/ccJWln4X.s:1966   .text.XL_Write:00000000 $t
     /tmp/ccJWln4X.s:1971   .text.XL_Write:00000000 XL_Write
     /tmp/ccJWln4X.s:2079   .text.XL_Write:00000078 $d
     /tmp/ccJWln4X.s:2086   .text.XL_Configure_ID:00000000 $t
     /tmp/ccJWln4X.s:2091   .text.XL_Configure_ID:00000000 XL_Configure_ID
     /tmp/ccJWln4X.s:2137   .text.XL_Configure_ID:00000024 $d
     /tmp/ccJWln4X.s:2142   .text.XL_Configure_Return_Delay_Time:00000000 $t
     /tmp/ccJWln4X.s:2147   .text.XL_Configure_Return_Delay_Time:00000000 XL_Configure_Return_Delay_Time
     /tmp/ccJWln4X.s:2193   .text.XL_Configure_Return_Delay_Time:00000024 $d
     /tmp/ccJWln4X.s:2198   .text.XL_Configure_CW_Angle_Limit:00000000 $t
     /tmp/ccJWln4X.s:2203   .text.XL_Configure_CW_Angle_Limit:00000000 XL_Configure_CW_Angle_Limit
     /tmp/ccJWln4X.s:2250   .text.XL_Configure_CW_Angle_Limit:00000028 $d
     /tmp/ccJWln4X.s:2255   .text.XL_Configure_CCW_Angle_Limit:00000000 $t
     /tmp/ccJWln4X.s:2260   .text.XL_Configure_CCW_Angle_Limit:00000000 XL_Configure_CCW_Angle_Limit
     /tmp/ccJWln4X.s:2307   .text.XL_Configure_CCW_Angle_Limit:00000028 $d
     /tmp/ccJWln4X.s:2312   .text.XL_Configure_Limit_Temperature:00000000 $t
     /tmp/ccJWln4X.s:2317   .text.XL_Configure_Limit_Temperature:00000000 XL_Configure_Limit_Temperature
     /tmp/ccJWln4X.s:2363   .text.XL_Configure_Limit_Temperature:00000024 $d
     /tmp/ccJWln4X.s:2368   .text.XL_Configure_Lower_Limit_Voltage:00000000 $t
     /tmp/ccJWln4X.s:2373   .text.XL_Configure_Lower_Limit_Voltage:00000000 XL_Configure_Lower_Limit_Voltage
     /tmp/ccJWln4X.s:2421   .text.XL_Configure_Lower_Limit_Voltage:0000002c $d
     /tmp/ccJWln4X.s:2426   .text.XL_Configure_Upper_Limit_Voltage:00000000 $t
     /tmp/ccJWln4X.s:2431   .text.XL_Configure_Upper_Limit_Voltage:00000000 XL_Configure_Upper_Limit_Voltage
ARM GAS  /tmp/ccJWln4X.s 			page 87


     /tmp/ccJWln4X.s:2479   .text.XL_Configure_Upper_Limit_Voltage:0000002c $d
     /tmp/ccJWln4X.s:2484   .text.XL_Configure_Max_Torque:00000000 $t
     /tmp/ccJWln4X.s:2489   .text.XL_Configure_Max_Torque:00000000 XL_Configure_Max_Torque
     /tmp/ccJWln4X.s:2536   .text.XL_Configure_Max_Torque:00000028 $d
     /tmp/ccJWln4X.s:2541   .text.XL_Configure_Alarm_Shutdown:00000000 $t
     /tmp/ccJWln4X.s:2546   .text.XL_Configure_Alarm_Shutdown:00000000 XL_Configure_Alarm_Shutdown
     /tmp/ccJWln4X.s:2592   .text.XL_Configure_Alarm_Shutdown:00000024 $d
     /tmp/ccJWln4X.s:2597   .text.XL_Power_On:00000000 $t
     /tmp/ccJWln4X.s:2602   .text.XL_Power_On:00000000 XL_Power_On
     /tmp/ccJWln4X.s:2634   .text.XL_Power_Off:00000000 $t
     /tmp/ccJWln4X.s:2639   .text.XL_Power_Off:00000000 XL_Power_Off
     /tmp/ccJWln4X.s:2671   .text.XL_Set_LED:00000000 $t
     /tmp/ccJWln4X.s:2676   .text.XL_Set_LED:00000000 XL_Set_LED
     /tmp/ccJWln4X.s:2725   .text.XL_Set_LED:00000028 $d
     /tmp/ccJWln4X.s:2730   .text.XL_Say_Hello:00000000 $t
     /tmp/ccJWln4X.s:2735   .text.XL_Say_Hello:00000000 XL_Say_Hello
     /tmp/ccJWln4X.s:2814   .text.XL_Set_D_Gain:00000000 $t
     /tmp/ccJWln4X.s:2819   .text.XL_Set_D_Gain:00000000 XL_Set_D_Gain
     /tmp/ccJWln4X.s:2868   .text.XL_Set_D_Gain:00000028 $d
     /tmp/ccJWln4X.s:2873   .text.XL_Set_I_Gain:00000000 $t
     /tmp/ccJWln4X.s:2878   .text.XL_Set_I_Gain:00000000 XL_Set_I_Gain
     /tmp/ccJWln4X.s:2927   .text.XL_Set_I_Gain:00000028 $d
     /tmp/ccJWln4X.s:2932   .text.XL_Set_P_Gain:00000000 $t
     /tmp/ccJWln4X.s:2937   .text.XL_Set_P_Gain:00000000 XL_Set_P_Gain
     /tmp/ccJWln4X.s:2986   .text.XL_Set_P_Gain:00000028 $d
     /tmp/ccJWln4X.s:2991   .text.XL_Set_Goal_Position:00000000 $t
     /tmp/ccJWln4X.s:2996   .text.XL_Set_Goal_Position:00000000 XL_Set_Goal_Position
     /tmp/ccJWln4X.s:3045   .text.XL_Set_Goal_Position:00000028 $d
     /tmp/ccJWln4X.s:3050   .text.XL_Set_Goal_Speed_Join:00000000 $t
     /tmp/ccJWln4X.s:3055   .text.XL_Set_Goal_Speed_Join:00000000 XL_Set_Goal_Speed_Join
     /tmp/ccJWln4X.s:3104   .text.XL_Set_Goal_Speed_Join:00000028 $d
     /tmp/ccJWln4X.s:3109   .text.XL_Set_Goal_Speed_Wheel:00000000 $t
     /tmp/ccJWln4X.s:3114   .text.XL_Set_Goal_Speed_Wheel:00000000 XL_Set_Goal_Speed_Wheel
     /tmp/ccJWln4X.s:3189   .text.XL_Set_Goal_Speed_Wheel:00000040 $d
     /tmp/ccJWln4X.s:3194   .text.XL_Set_Torque_Limit:00000000 $t
     /tmp/ccJWln4X.s:3199   .text.XL_Set_Torque_Limit:00000000 XL_Set_Torque_Limit
     /tmp/ccJWln4X.s:3248   .text.XL_Set_Torque_Limit:00000028 $d
     /tmp/ccJWln4X.s:3253   .text.XL_Set_Punch:00000000 $t
     /tmp/ccJWln4X.s:3258   .text.XL_Set_Punch:00000000 XL_Set_Punch
     /tmp/ccJWln4X.s:3309   .text.XL_Set_Punch:00000030 $d
     /tmp/ccJWln4X.s:3314   .rodata:00000000 $d
     /tmp/ccJWln4X.s:3574   .bss.err:00000000 $d
     /tmp/ccJWln4X.s:3578   .bss.err:00000000 err
     /tmp/ccJWln4X.s:3581   .rodata.field_addr:00000000 $d
     /tmp/ccJWln4X.s:3585   .rodata.field_addr:00000000 field_addr
     /tmp/ccJWln4X.s:3618   .bss.params.5643:00000000 $d
     /tmp/ccJWln4X.s:3622   .bss.params.5643:00000000 params.5643
     /tmp/ccJWln4X.s:3625   .rodata.field_length:00000000 $d
     /tmp/ccJWln4X.s:3629   .rodata.field_length:00000000 field_length
     /tmp/ccJWln4X.s:3662   .bss.packet.5642:00000000 $d
     /tmp/ccJWln4X.s:3666   .bss.packet.5642:00000000 packet.5642
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
