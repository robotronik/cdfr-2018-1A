ARM GAS  /tmp/ccWHtB6g.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.XL_320_Delay_HAL,"ax",%progbits
  21              		.align	2
  22              		.global	XL_320_Delay_HAL
  23              		.thumb
  24              		.thumb_func
  26              	XL_320_Delay_HAL:
  27              	.LFB131:
  28              		.file 1 "../Src/main.c"
   1:../Src/main.c **** /*!!!!!WARNING : ALIMENTATION!!!!!
   2:../Src/main.c **** ~> Nucleo : 5V ?(ordi)
   3:../Src/main.c **** -> Servo : 7.40V / 500mA ?
   4:../Src/main.c **** */
   5:../Src/main.c **** 
   6:../Src/main.c **** 
   7:../Src/main.c **** /**
   8:../Src/main.c ****   ******************************************************************************
   9:../Src/main.c ****   * File Name          : main.c
  10:../Src/main.c ****   * Date               : 01/03/2018 16:55:48
  11:../Src/main.c ****   * Description        : Main program body
  12:../Src/main.c ****   ******************************************************************************
  13:../Src/main.c ****   *
  14:../Src/main.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
  15:../Src/main.c ****   *
  16:../Src/main.c ****   * Redistribution and use in source and binary forms, with or without modification,
  17:../Src/main.c ****   * are permitted provided that the following conditions are met:
  18:../Src/main.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  19:../Src/main.c ****   *      this list of conditions and the following disclaimer.
  20:../Src/main.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  21:../Src/main.c ****   *      this list of conditions and the following disclaimer in the documentation
  22:../Src/main.c ****   *      and/or other materials provided with the distribution.
  23:../Src/main.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  24:../Src/main.c ****   *      may be used to endorse or promote products derived from this software
  25:../Src/main.c ****   *      without specific prior written permission.
  26:../Src/main.c ****   *
  27:../Src/main.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  28:../Src/main.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  29:../Src/main.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  30:../Src/main.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /tmp/ccWHtB6g.s 			page 2


  31:../Src/main.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  32:../Src/main.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  33:../Src/main.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  34:../Src/main.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  35:../Src/main.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:../Src/main.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:../Src/main.c ****   *
  38:../Src/main.c ****   ******************************************************************************
  39:../Src/main.c ****   */
  40:../Src/main.c **** 
  41:../Src/main.c **** /* Includes ------------------------------------------------------------------*/
  42:../Src/main.c **** #include "stm32f4xx_hal.h"
  43:../Src/main.c **** 
  44:../Src/main.c **** /* USER CODE BEGIN Includes */
  45:../Src/main.c **** #include <string.h>
  46:../Src/main.c **** #include "X-NUCLEO-53L0A1.h"
  47:../Src/main.c **** #include "vl53l0x_api.h"
  48:../Src/main.c **** #include <limits.h>
  49:../Src/main.c **** #include <stdio.h>
  50:../Src/main.c **** #include <stdlib.h>
  51:../Src/main.c **** #include "xl_320.h"
  52:../Src/main.c **** 
  53:../Src/main.c **** /**
  54:../Src/main.c ****  * @defgroup Configuration Static configuration
  55:../Src/main.c ****  * @{
  56:../Src/main.c ****  */
  57:../Src/main.c **** #define HAVE_ALARM_DEMO 0
  58:../Src/main.c **** 
  59:../Src/main.c **** /** Time the initial 53L0 message is shown at power up */
  60:../Src/main.c **** #define WelcomeTime 660
  61:../Src/main.c **** 
  62:../Src/main.c **** /** Time the initial 53L0 message is shown at power up */
  63:../Src/main.c **** #define ModeChangeDispTime  500
  64:../Src/main.c **** 
  65:../Src/main.c **** /**
  66:../Src/main.c ****  * Time considered as  a "long push" on push button
  67:../Src/main.c ****  */
  68:../Src/main.c **** #define PressBPSwicthTime   1000
  69:../Src/main.c **** 
  70:../Src/main.c **** /** @}  */ /* config group */
  71:../Src/main.c **** 
  72:../Src/main.c **** #ifndef MIN
  73:../Src/main.c **** #   define MIN(a,b) ((a) < (b) ? (a) : (b))
  74:../Src/main.c **** #endif
  75:../Src/main.c **** 
  76:../Src/main.c **** #define B1_Pin GPIO_PIN_13
  77:../Src/main.c **** #define B1_GPIO_Port GPIOC
  78:../Src/main.c **** #define LD2_Pin GPIO_PIN_5
  79:../Src/main.c **** #define LD2_GPIO_Port GPIOA
  80:../Src/main.c **** #define USART1_DIR_Pin GPIO_PIN_9
  81:../Src/main.c **** #define USART1_DIR_GPIO_Port GPIOC
  82:../Src/main.c **** 
  83:../Src/main.c **** 
  84:../Src/main.c **** #ifndef ARRAY_SIZE
  85:../Src/main.c **** #   define ARRAY_SIZE(x) (sizeof((x))/sizeof((x)[0]))
  86:../Src/main.c **** #endif
  87:../Src/main.c **** 
ARM GAS  /tmp/ccWHtB6g.s 			page 3


  88:../Src/main.c **** /**
  89:../Src/main.c ****  * @defgroup ErrCode Errors code shown on display
  90:../Src/main.c ****  * @{
  91:../Src/main.c ****  */
  92:../Src/main.c **** #define ERR_DETECT             -1
  93:../Src/main.c **** #define ERR_DEMO_RANGE_ONE     1
  94:../Src/main.c **** #define ERR_DEMO_RANGE_MULTI   2
  95:../Src/main.c **** 
  96:../Src/main.c **** 
  97:../Src/main.c **** /** }@} */ /* defgroup ErrCode */
  98:../Src/main.c **** 
  99:../Src/main.c **** 
 100:../Src/main.c **** /* USER CODE END Includes */
 101:../Src/main.c **** 
 102:../Src/main.c **** /* Private variables ---------------------------------------------------------*/
 103:../Src/main.c **** I2C_HandleTypeDef hi2c1;
 104:../Src/main.c **** 
 105:../Src/main.c **** TIM_HandleTypeDef htim3;
 106:../Src/main.c **** 
 107:../Src/main.c **** UART_HandleTypeDef huart1;
 108:../Src/main.c **** UART_HandleTypeDef huart2;
 109:../Src/main.c **** 
 110:../Src/main.c **** /* USER CODE BEGIN PV */
 111:../Src/main.c **** /* Private variables ---------------------------------------------------------*/
 112:../Src/main.c **** 
 113:../Src/main.c **** const char TxtRangeValue[]  = "rng";
 114:../Src/main.c **** const char TxtBarGraph[]    = "bar";
 115:../Src/main.c **** #if HAVE_ALARM_DEMO
 116:../Src/main.c **** const char TxtAlarm[]       = "Alr";
 117:../Src/main.c **** #endif
 118:../Src/main.c **** 
 119:../Src/main.c **** 
 120:../Src/main.c **** typedef enum {
 121:../Src/main.c **** 	LONG_RANGE 		= 0, /*!< Long range mode */
 122:../Src/main.c **** 	HIGH_SPEED 		= 1, /*!< High speed mode */
 123:../Src/main.c **** 	HIGH_ACCURACY	= 2, /*!< High accuracy mode */
 124:../Src/main.c **** } RangingConfig_e;
 125:../Src/main.c **** char *RangingConfigTxt[3] = {"LR", "HS", "HA"};
 126:../Src/main.c **** 
 127:../Src/main.c **** typedef enum {
 128:../Src/main.c **** 	RANGE_VALUE 	= 0, /*!< Range displayed in cm */
 129:../Src/main.c **** 	BAR_GRAPH 		= 1, /*!< Range displayed as a bar graph : one bar per sensor */
 130:../Src/main.c **** } DemoMode_e;
 131:../Src/main.c **** char *DemoModeTxt[2] = {"rng", "bar"};
 132:../Src/main.c **** 
 133:../Src/main.c **** /**
 134:../Src/main.c ****  * Global ranging struct
 135:../Src/main.c ****  */
 136:../Src/main.c **** VL53L0X_RangingMeasurementData_t RangingMeasurementData;
 137:../Src/main.c **** 
 138:../Src/main.c **** 
 139:../Src/main.c **** /** leaky factor for filtered range
 140:../Src/main.c ****  *
 141:../Src/main.c ****  * r(n) = averaged_r(n-1)*leaky +r(n)(1-leaky)
 142:../Src/main.c ****  *
 143:../Src/main.c ****  * */
 144:../Src/main.c **** int LeakyFactorFix8 = (int)( 0.6 *256);
ARM GAS  /tmp/ccWHtB6g.s 			page 4


 145:../Src/main.c **** /** How many device detect set by @a DetectSensors()*/
 146:../Src/main.c **** int nDevPresent=0;
 147:../Src/main.c **** /** bit is index in VL53L0XDevs that is not necessary the dev id of the BSP */
 148:../Src/main.c **** int nDevMask;
 149:../Src/main.c **** 
 150:../Src/main.c **** 
 151:../Src/main.c **** VL53L0X_Dev_t VL53L0XDevs[]={
 152:../Src/main.c ****         {.Id=XNUCLEO53L0A1_DEV_LEFT, .DevLetter='l', .I2cHandle=&XNUCLEO53L0A1_hi2c, .I2cDevAddr=0x
 153:../Src/main.c ****         {.Id=XNUCLEO53L0A1_DEV_CENTER, .DevLetter='c', .I2cHandle=&XNUCLEO53L0A1_hi2c, .I2cDevAddr=
 154:../Src/main.c ****         {.Id=XNUCLEO53L0A1_DEV_RIGHT, .DevLetter='r', .I2cHandle=&XNUCLEO53L0A1_hi2c, .I2cDevAddr=0
 155:../Src/main.c **** };
 156:../Src/main.c **** 
 157:../Src/main.c **** /** range low (and high) in @a RangeToLetter()
 158:../Src/main.c ****  *
 159:../Src/main.c ****  * used for displaying  multiple sensor as bar graph
 160:../Src/main.c ****  */
 161:../Src/main.c **** int RangeLow=100;
 162:../Src/main.c **** 
 163:../Src/main.c **** /** range medium in @a RangeToLetter()
 164:../Src/main.c ****  *
 165:../Src/main.c ****  * used for displaying  multiple sensor as bar graph
 166:../Src/main.c ****  */
 167:../Src/main.c **** int RangeMedium=300;
 168:../Src/main.c **** 
 169:../Src/main.c **** /** Timer
 170:../Src/main.c ****  *
 171:../Src/main.c ****  * Used to get time stamp for UART logging
 172:../Src/main.c ****  */
 173:../Src/main.c **** TIM_HandleTypeDef htim5;
 174:../Src/main.c **** 
 175:../Src/main.c **** /* TIM5 init function */
 176:../Src/main.c **** void MX_TIM5_Init(void)
 177:../Src/main.c **** {
 178:../Src/main.c **** 
 179:../Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig;
 180:../Src/main.c ****   TIM_OC_InitTypeDef sConfigOC;
 181:../Src/main.c **** 
 182:../Src/main.c ****   htim5.Instance = TIM5;
 183:../Src/main.c ****   htim5.Init.Prescaler = 83;
 184:../Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 185:../Src/main.c ****   htim5.Init.Period = 0xFFFFFFFF;
 186:../Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 187:../Src/main.c ****   HAL_TIM_OC_Init(&htim5);
 188:../Src/main.c **** 
 189:../Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 190:../Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 191:../Src/main.c ****   HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 192:../Src/main.c **** 
 193:../Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 194:../Src/main.c ****   sConfigOC.Pulse = 0;
 195:../Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 196:../Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 197:../Src/main.c ****   HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 198:../Src/main.c **** 
 199:../Src/main.c **** }
 200:../Src/main.c **** 
 201:../Src/main.c **** void TimeStamp_Init(){
ARM GAS  /tmp/ccWHtB6g.s 			page 5


 202:../Src/main.c ****     MX_TIM5_Init();
 203:../Src/main.c **** }
 204:../Src/main.c **** 
 205:../Src/main.c **** void TimeStamp_Reset(){
 206:../Src/main.c ****     HAL_TIM_Base_Start(&htim5);
 207:../Src/main.c ****     htim5.Instance->CNT=0;
 208:../Src/main.c **** }
 209:../Src/main.c **** 
 210:../Src/main.c **** uint32_t TimeStamp_Get(){
 211:../Src/main.c ****     return htim5.Instance->CNT;
 212:../Src/main.c **** }
 213:../Src/main.c **** 
 214:../Src/main.c **** /* USER CODE END PV */
 215:../Src/main.c **** 
 216:../Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 217:../Src/main.c **** static void MX_GPIO_Init(void);
 218:../Src/main.c **** static void SystemClock_Config(void);
 219:../Src/main.c **** static void MX_I2C1_Init(void);
 220:../Src/main.c **** static void MX_TIM3_Init(void);
 221:../Src/main.c **** static void MX_USART2_UART_Init(void);
 222:../Src/main.c **** static void MX_USART1_UART_Init(void);
 223:../Src/main.c **** 
 224:../Src/main.c **** /* USER CODE BEGIN PFP */
 225:../Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 226:../Src/main.c **** void ResetAndDetectSensor(int SetDisplay);
 227:../Src/main.c **** 
 228:../Src/main.c **** /* USER CODE END PFP */
 229:../Src/main.c **** 
 230:../Src/main.c **** /* USER CODE BEGIN 0 */
 231:../Src/main.c **** 
 232:../Src/main.c **** #define debug_printf    trace_printf
 233:../Src/main.c **** char WelcomeMsg[]="Hi I am Ranging VL53L0X mcu " MCU_NAME "\n";
 234:../Src/main.c **** 
 235:../Src/main.c **** #if HAVE_ALARM_DEMO
 236:../Src/main.c **** volatile int IntrCount;
 237:../Src/main.c **** volatile int LastIntrPin;
 238:../Src/main.c **** volatile int LastIntrId;
 239:../Src/main.c **** volatile int IntrCounts[3];
 240:../Src/main.c **** #endif
 241:../Src/main.c **** 
 242:../Src/main.c **** #define BSP_BP_PORT GPIOC
 243:../Src/main.c **** #define BSP_BP_PIN  GPIO_PIN_13
 244:../Src/main.c **** 
 245:../Src/main.c **** int BSP_GetPushButton(void){
 246:../Src/main.c ****     GPIO_PinState state ;
 247:../Src/main.c ****     state = HAL_GPIO_ReadPin(BSP_BP_PORT, BSP_BP_PIN);
 248:../Src/main.c ****     return state;
 249:../Src/main.c **** }
 250:../Src/main.c **** 
 251:../Src/main.c **** /**
 252:../Src/main.c ****  * When button is already pressed it waits for user to release it.
 253:../Src/main.c ****  * if button remains pressed for a given time it returns true.
 254:../Src/main.c ****  * This is used to detect mode switch by long press on blue Push Button
 255:../Src/main.c ****  *
 256:../Src/main.c ****  * As soon as time is elapsed -rb- is displayed to let user know the mode
 257:../Src/main.c ****  * switch is taken into account
 258:../Src/main.c ****  *
ARM GAS  /tmp/ccWHtB6g.s 			page 6


 259:../Src/main.c ****  * @return True if button remains pressed more than specified time
 260:../Src/main.c ****  */
 261:../Src/main.c **** int PusbButton_WaitUnPress(void){
 262:../Src/main.c ****     uint32_t TimeStarted;
 263:../Src/main.c ****     TimeStarted = HAL_GetTick();
 264:../Src/main.c ****     while( !BSP_GetPushButton() ){ ; /* debounce */
 265:../Src/main.c ****         if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 266:../Src/main.c ****             XNUCLEO53L0A1_SetDisplayString (" rb ");
 267:../Src/main.c ****         }
 268:../Src/main.c ****     }
 269:../Src/main.c ****     return  HAL_GetTick() - TimeStarted>PressBPSwicthTime;
 270:../Src/main.c **** 
 271:../Src/main.c **** }
 272:../Src/main.c **** 
 273:../Src/main.c **** #if HAVE_ALARM_DEMO
 274:../Src/main.c **** /**
 275:../Src/main.c ****  * Interrupt handler called each time an interrupt is produced by the ranging sensor (in ALARM mode
 276:../Src/main.c ****  * @param err
 277:../Src/main.c ****  */
 278:../Src/main.c **** void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 279:../Src/main.c ****     IntrCount++;
 280:../Src/main.c ****     LastIntrPin=GPIO_Pin;
 281:../Src/main.c ****     LastIntrId=DevNo;
 282:../Src/main.c **** 
 283:../Src/main.c ****     if( DevNo< ARRAY_SIZE(IntrCounts)  ){
 284:../Src/main.c ****         IntrCounts[DevNo]++;
 285:../Src/main.c ****     }
 286:../Src/main.c **** }
 287:../Src/main.c **** #endif
 288:../Src/main.c **** 
 289:../Src/main.c **** 
 290:../Src/main.c **** /**
 291:../Src/main.c ****  * Handle Error
 292:../Src/main.c ****  *
 293:../Src/main.c ****  * Set err on display and loop forever
 294:../Src/main.c ****  * @param err Error case code
 295:../Src/main.c ****  */
 296:../Src/main.c **** void HandleError(int err){
 297:../Src/main.c ****     char msg[16];
 298:../Src/main.c ****     sprintf(msg,"Er%d", err);
 299:../Src/main.c ****     XNUCLEO53L0A1_SetDisplayString(msg);
 300:../Src/main.c ****     while(1){};
 301:../Src/main.c **** }
 302:../Src/main.c **** 
 303:../Src/main.c **** /**
 304:../Src/main.c ****  * Reset all sensor then do presence detection
 305:../Src/main.c ****  *
 306:../Src/main.c ****  * All present devices are data initiated and assigned to their final I2C address
 307:../Src/main.c ****  * @return
 308:../Src/main.c ****  */
 309:../Src/main.c **** int DetectSensors(int SetDisplay) {
 310:../Src/main.c ****     int i;
 311:../Src/main.c ****     uint16_t Id;
 312:../Src/main.c ****     int status;
 313:../Src/main.c ****     int FinalAddress;
 314:../Src/main.c **** 
 315:../Src/main.c ****     char PresentMsg[5]="    ";
ARM GAS  /tmp/ccWHtB6g.s 			page 7


 316:../Src/main.c ****     /* Reset all */
 317:../Src/main.c ****     nDevPresent = 0;
 318:../Src/main.c ****     for (i = 0; i < 3; i++)
 319:../Src/main.c ****         status = XNUCLEO53L0A1_ResetId(i, 0);
 320:../Src/main.c **** 
 321:../Src/main.c ****     /* detect all sensors (even on-board)*/
 322:../Src/main.c ****     for (i = 0; i < 3; i++) {
 323:../Src/main.c ****         VL53L0X_Dev_t *pDev;
 324:../Src/main.c ****         pDev = &VL53L0XDevs[i];
 325:../Src/main.c ****         pDev->I2cDevAddr = 0x52;
 326:../Src/main.c ****         pDev->Present = 0;
 327:../Src/main.c ****         status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 328:../Src/main.c ****         HAL_Delay(2);
 329:../Src/main.c ****         FinalAddress=0x52+(i+1)*2;
 330:../Src/main.c **** 
 331:../Src/main.c ****         do {
 332:../Src/main.c ****         	/* Set I2C standard mode (400 KHz) before doing the first register access */
 333:../Src/main.c ****         	if (status == VL53L0X_ERROR_NONE)
 334:../Src/main.c ****         		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 335:../Src/main.c **** 
 336:../Src/main.c ****         	/* Try to read one register using default 0x52 address */
 337:../Src/main.c ****             status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 338:../Src/main.c ****             if (status) {
 339:../Src/main.c ****                 debug_printf("#%d Read id fail\n", i);
 340:../Src/main.c ****                 break;
 341:../Src/main.c ****             }
 342:../Src/main.c ****             if (Id == 0xEEAA) {
 343:../Src/main.c **** 				/* Sensor is found => Change its I2C address to final one */
 344:../Src/main.c ****                 status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 345:../Src/main.c ****                 if (status != 0) {
 346:../Src/main.c ****                     debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 347:../Src/main.c ****                     break;
 348:../Src/main.c ****                 }
 349:../Src/main.c ****                 pDev->I2cDevAddr = FinalAddress;
 350:../Src/main.c ****                 /* Check all is OK with the new I2C address and initialize the sensor */
 351:../Src/main.c ****                 status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 352:../Src/main.c ****                 if (status != 0) {
 353:../Src/main.c **** 					debug_printf("#i VL53L0X_RdWord fail\n", i);
 354:../Src/main.c **** 					break;
 355:../Src/main.c **** 				}
 356:../Src/main.c **** 
 357:../Src/main.c ****                 status = VL53L0X_DataInit(pDev);
 358:../Src/main.c ****                 if( status == 0 ){
 359:../Src/main.c ****                     pDev->Present = 1;
 360:../Src/main.c ****                 }
 361:../Src/main.c ****                 else{
 362:../Src/main.c ****                     debug_printf("VL53L0X_DataInit %d fail\n", i);
 363:../Src/main.c ****                     break;
 364:../Src/main.c ****                 }
 365:../Src/main.c ****                 trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2
 366:../Src/main.c ****                 nDevPresent++;
 367:../Src/main.c ****                 nDevMask |= 1 << i;
 368:../Src/main.c ****                 pDev->Present = 1;
 369:../Src/main.c ****             }
 370:../Src/main.c ****             else {
 371:../Src/main.c ****                 debug_printf("#%d unknown ID %x\n", i, Id);
 372:../Src/main.c ****                 status = 1;
ARM GAS  /tmp/ccWHtB6g.s 			page 8


 373:../Src/main.c ****             }
 374:../Src/main.c ****         } while (0);
 375:../Src/main.c ****         /* if fail r can't use for any reason then put the  device back to reset */
 376:../Src/main.c ****         if (status) {
 377:../Src/main.c ****             XNUCLEO53L0A1_ResetId(i, 0);
 378:../Src/main.c ****         }
 379:../Src/main.c ****     }
 380:../Src/main.c ****     /* Display detected sensor(s) */
 381:../Src/main.c ****     if( SetDisplay ){
 382:../Src/main.c ****         for(i=0; i<3; i++){
 383:../Src/main.c ****             if( VL53L0XDevs[i].Present ){
 384:../Src/main.c ****                 PresentMsg[i+1]=VL53L0XDevs[i].DevLetter;
 385:../Src/main.c ****             }
 386:../Src/main.c ****         }
 387:../Src/main.c ****         PresentMsg[0]=' ';
 388:../Src/main.c ****         XNUCLEO53L0A1_SetDisplayString(PresentMsg);
 389:../Src/main.c ****         HAL_Delay(1000);
 390:../Src/main.c ****     }
 391:../Src/main.c **** 
 392:../Src/main.c ****     return nDevPresent;
 393:../Src/main.c **** }
 394:../Src/main.c **** 
 395:../Src/main.c **** /**
 396:../Src/main.c ****  *  Setup all detected sensors for single shot mode and setup ranging configuration
 397:../Src/main.c ****  */
 398:../Src/main.c **** void SetupSingleShot(RangingConfig_e rangingConfig){
 399:../Src/main.c ****     int i;
 400:../Src/main.c ****     int status;
 401:../Src/main.c ****     uint8_t VhvSettings;
 402:../Src/main.c ****     uint8_t PhaseCal;
 403:../Src/main.c ****     uint32_t refSpadCount;
 404:../Src/main.c **** 	uint8_t isApertureSpads;
 405:../Src/main.c **** 	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 406:../Src/main.c **** 	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 407:../Src/main.c **** 	uint32_t timingBudget = 33000;
 408:../Src/main.c **** 	uint8_t preRangeVcselPeriod = 14;
 409:../Src/main.c **** 	uint8_t finalRangeVcselPeriod = 10;
 410:../Src/main.c **** 
 411:../Src/main.c ****     for( i=0; i<3; i++){
 412:../Src/main.c ****         if( VL53L0XDevs[i].Present){
 413:../Src/main.c ****             status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 414:../Src/main.c ****             if( status ){
 415:../Src/main.c ****                 debug_printf("VL53L0X_StaticInit %d failed\n",i);
 416:../Src/main.c ****             }
 417:../Src/main.c **** 
 418:../Src/main.c ****             status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 419:../Src/main.c **** 			if( status ){
 420:../Src/main.c **** 			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 421:../Src/main.c **** 			}
 422:../Src/main.c **** 
 423:../Src/main.c **** 			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 424:../Src/main.c **** 			if( status ){
 425:../Src/main.c **** 			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
 426:../Src/main.c **** 			}
 427:../Src/main.c **** 
 428:../Src/main.c ****             status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // 
 429:../Src/main.c ****             if( status ){
ARM GAS  /tmp/ccWHtB6g.s 			page 9


 430:../Src/main.c ****                debug_printf("VL53L0X_SetDeviceMode failed\n");
 431:../Src/main.c ****             }
 432:../Src/main.c **** 
 433:../Src/main.c ****             status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_R
 434:../Src/main.c **** 			if( status ){
 435:../Src/main.c **** 			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 436:../Src/main.c **** 			}
 437:../Src/main.c **** 
 438:../Src/main.c **** 			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANG
 439:../Src/main.c **** 			if( status ){
 440:../Src/main.c **** 			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 441:../Src/main.c **** 			}
 442:../Src/main.c **** 			/* Ranging configuration */
 443:../Src/main.c ****             switch(rangingConfig) {
 444:../Src/main.c ****             case LONG_RANGE:
 445:../Src/main.c ****             	signalLimit = (FixPoint1616_t)(0.1*65536);
 446:../Src/main.c ****             	sigmaLimit = (FixPoint1616_t)(60*65536);
 447:../Src/main.c ****             	timingBudget = 33000; //33ms
 448:../Src/main.c ****             	preRangeVcselPeriod = 18;
 449:../Src/main.c ****             	finalRangeVcselPeriod = 14;
 450:../Src/main.c ****             	break;
 451:../Src/main.c ****             case HIGH_ACCURACY:
 452:../Src/main.c **** 				signalLimit = (FixPoint1616_t)(0.25*65536); //the return signal rate limit in MCPS
 453:../Src/main.c **** 				sigmaLimit = (FixPoint1616_t)(18*65536);
 454:../Src/main.c **** 				timingBudget = 200000; //200ms
 455:../Src/main.c **** 				preRangeVcselPeriod = 14; //laser pulse periods
 456:../Src/main.c **** 				finalRangeVcselPeriod = 10;
 457:../Src/main.c **** 				break;
 458:../Src/main.c ****             case HIGH_SPEED:
 459:../Src/main.c **** 				signalLimit = (FixPoint1616_t)(0.25*65536);
 460:../Src/main.c **** 				sigmaLimit = (FixPoint1616_t)(32*65536);
 461:../Src/main.c **** 				timingBudget = 20000; //20ms
 462:../Src/main.c **** 				preRangeVcselPeriod = 14;
 463:../Src/main.c **** 				finalRangeVcselPeriod = 10;
 464:../Src/main.c **** 				break;
 465:../Src/main.c ****             default:
 466:../Src/main.c ****             	debug_printf("Not Supported");
 467:../Src/main.c ****             }
 468:../Src/main.c **** 
 469:../Src/main.c ****             status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_F
 470:../Src/main.c **** 			if( status ){
 471:../Src/main.c **** 			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 472:../Src/main.c **** 			}
 473:../Src/main.c **** 
 474:../Src/main.c **** 			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sig
 475:../Src/main.c **** 			if( status ){
 476:../Src/main.c **** 			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 477:../Src/main.c **** 			}
 478:../Src/main.c **** 
 479:../Src/main.c ****             status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget)
 480:../Src/main.c ****             if( status ){
 481:../Src/main.c ****                debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 482:../Src/main.c ****             }
 483:../Src/main.c **** 
 484:../Src/main.c ****             status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, 
 485:../Src/main.c **** 			if( status ){
 486:../Src/main.c **** 			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
ARM GAS  /tmp/ccWHtB6g.s 			page 10


 487:../Src/main.c **** 			}
 488:../Src/main.c **** 
 489:../Src/main.c ****             status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE
 490:../Src/main.c **** 			if( status ){
 491:../Src/main.c **** 			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 492:../Src/main.c **** 			}
 493:../Src/main.c **** 
 494:../Src/main.c **** 			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 495:../Src/main.c **** 			if( status ){
 496:../Src/main.c **** 			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 497:../Src/main.c **** 			}
 498:../Src/main.c **** 
 499:../Src/main.c ****             VL53L0XDevs[i].LeakyFirst=1;
 500:../Src/main.c ****         }
 501:../Src/main.c ****     }
 502:../Src/main.c **** }
 503:../Src/main.c **** 
 504:../Src/main.c **** char RangeToLetter(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 505:../Src/main.c ****     char c;
 506:../Src/main.c ****     if( pRange->RangeStatus == 0 ){
 507:../Src/main.c ****         if( pDev->LeakyRange < RangeLow ){
 508:../Src/main.c ****             c='_';
 509:../Src/main.c ****         }
 510:../Src/main.c ****         else if( pDev->LeakyRange < RangeMedium ){
 511:../Src/main.c ****                 c='=';
 512:../Src/main.c ****         }
 513:../Src/main.c ****         else {
 514:../Src/main.c ****             c = '~';
 515:../Src/main.c ****         }
 516:../Src/main.c **** 
 517:../Src/main.c ****     }
 518:../Src/main.c ****     else{
 519:../Src/main.c ****         c='-';
 520:../Src/main.c ****     }
 521:../Src/main.c ****     return c;
 522:../Src/main.c **** }
 523:../Src/main.c **** 
 524:../Src/main.c **** /* Store new ranging data into the device structure, apply leaky integrator if needed */
 525:../Src/main.c **** void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 526:../Src/main.c ****     if( pRange->RangeStatus == 0 ){
 527:../Src/main.c ****         if( pDev->LeakyFirst ){
 528:../Src/main.c ****             pDev->LeakyFirst = 0;
 529:../Src/main.c ****             pDev->LeakyRange = pRange->RangeMilliMeter;
 530:../Src/main.c ****         }
 531:../Src/main.c ****         else{
 532:../Src/main.c ****             pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->Ra
 533:../Src/main.c ****         }
 534:../Src/main.c ****     }
 535:../Src/main.c ****     else{
 536:../Src/main.c ****         pDev->LeakyFirst = 1;
 537:../Src/main.c ****     }
 538:../Src/main.c **** }
 539:../Src/main.c **** 
 540:../Src/main.c **** void blink_led(int valeur, int* compteur){     /////modification de la led
 541:../Src/main.c ****     if (*compteur == 6){                       /////modification toutes les 6 mesures correctes du 
 542:../Src/main.c ****         HAL_TIM_Base_Stop_IT(&htim3);
 543:../Src/main.c ****         htim3.Instance->ARR = 2*valeur-1+20;   /////modification de la periode du capteur (voir wik
ARM GAS  /tmp/ccWHtB6g.s 			page 11


 544:../Src/main.c ****         HAL_TIM_Base_Start_IT(&htim3);
 545:../Src/main.c ****         htim3.Instance->CNT = 0;               /////remise a zero du timer de la led
 546:../Src/main.c ****         *compteur = 0;                         /////remise a zero du compteur
 547:../Src/main.c ****     }
 548:../Src/main.c **** }
 549:../Src/main.c **** 
 550:../Src/main.c **** #define Maxi_char_transmit 10  /////////
 551:../Src/main.c **** #define Delay 1000  /////////
 552:../Src/main.c **** #define Delay2 10//////
 553:../Src/main.c **** 
 554:../Src/main.c **** /////transmit modifie a retoucher
 555:../Src/main.c **** 
 556:../Src/main.c **** /*void transmit(int* i, char* bufferDistance, char* bufferAngle, int distance, int angle){  /////tr
 557:../Src/main.c ****     char dataDistance[10];                                /////variable stockage de la valeur du ca
 558:../Src/main.c ****     char dataAngle[10];
 559:../Src/main.c ****     char ligne[2];                                /////variable stockage du separateur \n
 560:../Src/main.c ****     int len;                                      /////variable longueur du buffer
 561:../Src/main.c ****     if (*i<Maxi_char_transmit-1){                 /////ajout valeur, dans data
 562:../Src/main.c ****         sprintf(dataDistance, "%d,",distance);
 563:../Src/main.c ****         sprintf(dataAngle, "%d,",angle);
 564:../Src/main.c ****     }
 565:../Src/main.c ****     else if (*i==Maxi_char_transmit-1){           /////ajout valeur dans data -> pour cloturer la s
 566:../Src/main.c ****         sprintf(dataDistance, "%d",distance);
 567:../Src/main.c ****         sprintf(dataAngle, "%d",angle);
 568:../Src/main.c ****     }
 569:../Src/main.c ****     strcat(bufferDistance,dataDistance);                          /////ajout valeur au buffer
 570:../Src/main.c ****     strcat(bufferAngle, dataAngle);
 571:../Src/main.c ****     if (*i==Maxi_char_transmit-1){
 572:../Src/main.c ****         len=strlen(bufferDistance);                       /////longueur du buffer
 573:../Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t*)(strcat(bufferDistance,";")), len, 1000); /////transmi
 574:../Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t*)(bufferAngle), len, 1000);
 575:../Src/main.c ****         sprintf(ligne, "\n");                                     /////ajout \n a ligne
 576:../Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t*)ligne, 1, 1000);     /////transmission pour cloturer l
 577:../Src/main.c ****         (*i)=-1;                                                  /////remise a zero du compteur
 578:../Src/main.c ****         sprintf(bufferDistance, "");                                      /////remise a zero du buf
 579:../Src/main.c ****         sprintf(bufferAngle, "");
 580:../Src/main.c ****         HAL_Delay(Delay);         //////necessaire pour le graphique
 581:../Src/main.c ****     }
 582:../Src/main.c **** }*/
 583:../Src/main.c **** 
 584:../Src/main.c **** void Variation2Angle_maison(XL servo, int* ptr_angle){ ///test fonctionne
 585:../Src/main.c **** 		uint16_t position;
 586:../Src/main.c **** 		char dataAngle[10];
 587:../Src/main.c **** 		int len;
 588:../Src/main.c **** 		if(*ptr_angle<1000 && *ptr_angle>=0){
 589:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 590:../Src/main.c **** 				*ptr_angle+=5;
 591:../Src/main.c **** 		} else {
 592:../Src/main.c **** 				*ptr_angle=50;
 593:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 594:../Src/main.c **** 		}
 595:../Src/main.c **** 		//XL_Set_Goal_Position(&servo, *ptr_angle, 1);   /////test fonctionne Db=115200
 596:../Src/main.c **** 		/*HAL_Delay(1000);
 597:../Src/main.c **** 		XL_Get_Current_Position(&servo, &position);
 598:../Src/main.c **** 		sprintf(dataAngle, "%d,",position);
 599:../Src/main.c **** 		len=strlen(dataAngle);
 600:../Src/main.c **** 		HAL_UART_Transmit(&huart2, (uint8_t*)(dataAngle), len, 1000);*/
ARM GAS  /tmp/ccWHtB6g.s 			page 12


 601:../Src/main.c **** }
 602:../Src/main.c **** 
 603:../Src/main.c **** void Variation3Angle_maison(XL servo, int* ptr_angle, char* buffer, int* i){ ///test fonctionne
 604:../Src/main.c **** 		uint16_t position;
 605:../Src/main.c **** 		char dataAngle[10];
 606:../Src/main.c **** 		char ligne[2];
 607:../Src/main.c **** 		int len;
 608:../Src/main.c **** 		if(*ptr_angle<1000 && *ptr_angle>=0){
 609:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 610:../Src/main.c **** 				*ptr_angle+=5;
 611:../Src/main.c **** 		} else {
 612:../Src/main.c **** 				*ptr_angle=50;
 613:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 614:../Src/main.c **** 		}
 615:../Src/main.c **** 		XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 616:../Src/main.c **** 		/*HAL_Delay(1000);
 617:../Src/main.c **** 		XL_Get_Current_Position(&servo, &position);   /////test fonctionne Db=115200
 618:../Src/main.c **** 		sprintf(dataAngle, "%d,",position);
 619:../Src/main.c **** 		len=strlen(dataAngle);
 620:../Src/main.c **** 		HAL_UART_Transmit(&huart2, (uint8_t*)(dataAngle), len, 1000); */
 621:../Src/main.c **** 		HAL_Delay(Delay2);
 622:../Src/main.c **** 		XL_Get_Current_Position(&servo, &position);
 623:../Src/main.c **** 		HAL_Delay(Delay2);
 624:../Src/main.c ****     if (*i<Maxi_char_transmit-1){                 /////ajout valeur, dans data
 625:../Src/main.c ****         sprintf(dataAngle, "%d,",position);
 626:../Src/main.c **** 				/*len=strlen(dataAngle);
 627:../Src/main.c **** 				HAL_UART_Transmit(&huart2, (uint8_t*)(dataAngle), len, 1000);*/
 628:../Src/main.c ****     }  else if (*i==Maxi_char_transmit-1){           /////ajout valeur dans data -> pour cloturer l
 629:../Src/main.c ****         sprintf(dataAngle, "%d",position);
 630:../Src/main.c **** 				/*len=strlen(dataAngle);
 631:../Src/main.c **** 				HAL_UART_Transmit(&huart2, (uint8_t*)(dataAngle), len, 1000);*/
 632:../Src/main.c ****     }
 633:../Src/main.c ****     strcat(buffer,dataAngle);                          /////ajout valeur au buffer
 634:../Src/main.c ****     if (*i==Maxi_char_transmit-1){
 635:../Src/main.c ****         len=strlen(buffer);                       /////longueur du buffer
 636:../Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t*)(buffer), len, 1000); /////transmission du buffer
 637:../Src/main.c ****         sprintf(ligne, "\n");                                     /////ajout \n a ligne
 638:../Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t*)ligne, 1, 1000);     /////transmission pour cloturer l
 639:../Src/main.c ****         (*i)=-1;                                                  /////remise a zero du compteur
 640:../Src/main.c ****         sprintf(buffer, "");                                      /////remise a zero du buffer
 641:../Src/main.c ****         HAL_Delay(Delay);         //////necessaire pour le graphique
 642:../Src/main.c ****     }
 643:../Src/main.c **** }
 644:../Src/main.c **** 
 645:../Src/main.c **** /**
 646:../Src/main.c ****  * Implement the ranging demo with all modes managed through the blue button (short and long press)
 647:../Src/main.c ****  * This function implements a while loop until the blue button is pressed
 648:../Src/main.c ****  * @param UseSensorsMask Mask of any sensors to use if not only one present
 649:../Src/main.c ****  * @param rangingConfig Ranging configuration to be used (same for all sensors)
 650:../Src/main.c ****  */
 651:../Src/main.c **** 
 652:../Src/main.c **** /*void VariationAngle(XL * servo, int* ptr_compteurAngle){ /////fonction de raph bugge
 653:../Src/main.c ****     *ptr_compteurAngle=60;
 654:../Src/main.c ****     XL_Set_Goal_Position(servo, *ptr_compteurAngle, 1);
 655:../Src/main.c ****     if(*compteurAngle<621 && *compteurAngle>=0){
 656:../Src/main.c ****         XL_Set_Goal_Position(servo, *compteurAngle, 1);
 657:../Src/main.c ****         *compteurAngle++;
ARM GAS  /tmp/ccWHtB6g.s 			page 13


 658:../Src/main.c ****     }
 659:../Src/main.c ****     else if(*compteurAngle == 620){
 660:../Src/main.c ****         *compteurAngle --;
 661:../Src/main.c ****         XL_Set_Goal_Position(servo, *compteurAngle, 1);
 662:../Src/main.c ****     }
 663:../Src/main.c ****     else{
 664:../Src/main.c ****         XL_Set_Goal_Position(servo, *compteurAngle, 1);
 665:../Src/main.c ****         *compteurAngle--;
 666:../Src/main.c ****     }
 667:../Src/main.c **** }*/
 668:../Src/main.c **** 
 669:../Src/main.c **** int RangeDemo(int UseSensorsMask, RangingConfig_e rangingConfig, XL servo){
 670:../Src/main.c ****     int over=0;
 671:../Src/main.c ****     int status;
 672:../Src/main.c ****     char StrDisplay[5];
 673:../Src/main.c ****     char c;
 674:../Src/main.c ****     int i;
 675:../Src/main.c ****     int nSensorToUse;
 676:../Src/main.c ****     int SingleSensorNo=0;
 677:../Src/main.c ****     int distance;     ///creation variable distance
 678:../Src/main.c ****     /*unsigned int angle;        ///creation variable angle*/ //necessaire ?
 679:../Src/main.c ****     int compteur_blink = 0;                ///creation compteur
 680:../Src/main.c ****     int* ptr_compteur_blink = NULL;   ///creation pointeur sur compteur
 681:../Src/main.c ****     ptr_compteur_blink = &compteur_blink;
 682:../Src/main.c ****     int compteur_d = 0;                 ///creation compteur
 683:../Src/main.c ****     int* ptr_compteur = NULL;   ///creation pointeur sur compteur
 684:../Src/main.c ****     ptr_compteur = &compteur_d;
 685:../Src/main.c ****     char buffer[Maxi_char_transmit*4]; /////creation du buffer
 686:../Src/main.c ****     char buffer1[Maxi_char_transmit*5];
 687:../Src/main.c ****     int len;
 688:../Src/main.c ****     sprintf(buffer, "");               /////mise a zero du buffer
 689:../Src/main.c ****     sprintf(buffer1, "");
 690:../Src/main.c **** 		int angle=10;              ////creation
 691:../Src/main.c **** 	  int* ptr_angle = &angle;
 692:../Src/main.c **** 
 693:../Src/main.c ****     /* Setup all sensors in Single Shot mode */
 694:../Src/main.c ****     SetupSingleShot(rangingConfig);
 695:../Src/main.c **** 
 696:../Src/main.c **** 
 697:../Src/main.c ****     /* Which sensor to use ? */
 698:../Src/main.c ****     for(i=0, nSensorToUse=0; i<3; i++){
 699:../Src/main.c ****         if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 700:../Src/main.c ****             nSensorToUse++;
 701:../Src/main.c ****             if( nSensorToUse==1 )
 702:../Src/main.c ****                 SingleSensorNo=i;
 703:../Src/main.c ****         }
 704:../Src/main.c ****     }
 705:../Src/main.c ****     if( nSensorToUse == 0 ){
 706:../Src/main.c ****         return -1;
 707:../Src/main.c ****     }
 708:../Src/main.c **** 
 709:../Src/main.c ****     /* Start ranging until blue button is pressed */
 710:../Src/main.c ****     do{
 711:../Src/main.c **** 				//Variation2Angle_maison(servo, ptr_angle); ////fait bouger le servo
 712:../Src/main.c ****         if( nSensorToUse >1 ){
 713:../Src/main.c ****         	/* Multiple devices */
 714:../Src/main.c ****             strcpy(StrDisplay, "    ");
ARM GAS  /tmp/ccWHtB6g.s 			page 14


 715:../Src/main.c ****             for( i=0; i<3; i++){
 716:../Src/main.c ****                 if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 717:../Src/main.c ****                     continue;
 718:../Src/main.c ****                 /* Call All-In-One blocking API function */
 719:../Src/main.c ****                 status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[i],&RangingMeasuremen
 720:../Src/main.c ****                 if( status ){
 721:../Src/main.c ****                     HandleError(ERR_DEMO_RANGE_MULTI);
 722:../Src/main.c ****                 }
 723:../Src/main.c ****                 /* Push data logging to UART */
 724:../Src/main.c ****                 trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[i].Id, TimeStamp_Get(), RangingMeasure
 725:../Src/main.c ****                 /* Store new ranging distance */
 726:../Src/main.c ****                 Sensor_SetNewRange(&VL53L0XDevs[i],&RangingMeasurementData);
 727:../Src/main.c ****                 /* Translate distance in bar graph (multiple device) */
 728:../Src/main.c ****                 c = RangeToLetter(&VL53L0XDevs[i],&RangingMeasurementData);
 729:../Src/main.c ****                 StrDisplay[i+1]=c;
 730:../Src/main.c ****             }
 731:../Src/main.c ****         }
 732:../Src/main.c ****         else{
 733:../Src/main.c ****             /* only one sensor */
 734:../Src/main.c ****         	/* Call All-In-One blocking API function */
 735:../Src/main.c ****             status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[SingleSensorNo],&RangingM
 736:../Src/main.c ****             if( status ==0 ){
 737:../Src/main.c ****             	/* Push data logging to UART */
 738:../Src/main.c ****             	trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[SingleSensorNo].Id, TimeStamp_Get(), Rang
 739:../Src/main.c ****             	Sensor_SetNewRange(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 740:../Src/main.c ****                 /* Display distance in cm */
 741:../Src/main.c ****             	if( RangingMeasurementData.RangeStatus == 0 ){  /////boucle de mesures correctes
 742:../Src/main.c ****                     *ptr_compteur_blink+=1;                      /////incrementation du compteur
 743:../Src/main.c ****                     sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[SingleSensorNo].LeakyRange/10);  //
 744:../Src/main.c ****                     distance = (int)VL53L0XDevs[SingleSensorNo].LeakyRange/10;   /////distance lue 
 745:../Src/main.c ****                     //XL_Get_Current_Position(servo, &angle); necessaire ?
 746:../Src/main.c ****                     blink_led(distance, ptr_compteur_blink);         /////fonction blink_led
 747:../Src/main.c **** 										Variation3Angle_maison(servo, ptr_angle, buffer1, ptr_compteur);
 748:../Src/main.c ****                     //transmit(compteur2, buffer, buffer1, distance, angle);        /////fonction t
 749:../Src/main.c ****                     *ptr_compteur+=1;                              /////incrementation du compteur
 750:../Src/main.c **** 
 751:../Src/main.c **** 
 752:../Src/main.c **** //////bloc structure (je me comprends)
 753:../Src/main.c **** /*
 754:../Src/main.c ****                     //unsigned int angle;
 755:../Src/main.c ****                     //char dataAngle[10];
 756:../Src/main.c ****                     //XL_Set_Goal_Position(servo, 60, 1);
 757:../Src/main.c ****                     //sprintf(dataAngle, "%d,",angle);
 758:../Src/main.c ****                     //len=strlen(dataAngle);
 759:../Src/main.c ****                     //HAL_UART_Transmit(&huart2, (uint8_t*)(dataAngle), len, 1000);*/
 760:../Src/main.c ****                 }
 761:../Src/main.c ****                 else{                                           /////boucle de mesures incorrectes
 762:../Src/main.c ****                     sprintf(StrDisplay, "----");
 763:../Src/main.c ****                     StrDisplay[0]=VL53L0XDevs[SingleSensorNo].DevLetter;
 764:../Src/main.c ****                     //HAL_TIM_Base_Stop_IT(&htim3);             /////version courante : memoire de 
 765:../Src/main.c ****                     //htim3.Instance->ARR=2000;
 766:../Src/main.c ****                     //HAL_TIM_Base_Start_IT(&htim3);
 767:../Src/main.c ****                 }
 768:../Src/main.c ****             }
 769:../Src/main.c ****             else{
 770:../Src/main.c ****                 HandleError(ERR_DEMO_RANGE_ONE);
 771:../Src/main.c ****             }
ARM GAS  /tmp/ccWHtB6g.s 			page 15


 772:../Src/main.c ****         }
 773:../Src/main.c ****         XNUCLEO53L0A1_SetDisplayString(StrDisplay);
 774:../Src/main.c ****         /* Check blue button */
 775:../Src/main.c ****         if( !BSP_GetPushButton() ){
 776:../Src/main.c ****             over=1;
 777:../Src/main.c ****             break;
 778:../Src/main.c ****         }
 779:../Src/main.c ****     }while( !over);
 780:../Src/main.c ****     /* Wait button to be un-pressed to decide if it is a short or long press */
 781:../Src/main.c ****     status=PusbButton_WaitUnPress();
 782:../Src/main.c ****     htim3.Instance->CNT=0;       /////remise a zero du timer de la led
 783:../Src/main.c ****     return status;
 784:../Src/main.c **** }
 785:../Src/main.c **** 
 786:../Src/main.c **** #if HAVE_ALARM_DEMO
 787:../Src/main.c **** struct AlrmMode_t {
 788:../Src/main.c ****     const int VL53L0X_Mode;
 789:../Src/main.c ****     const char *Name;
 790:../Src/main.c ****     uint32_t ThreshLow;
 791:../Src/main.c ****     uint32_t ThreshHigh;
 792:../Src/main.c **** };
 793:../Src/main.c **** 
 794:../Src/main.c **** struct AlrmMode_t AlarmModes[]={
 795:../Src/main.c ****         { .VL53L0X_Mode = VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW , .Name="Lo" , .ThreshLow
 796:../Src/main.c ****         { .VL53L0X_Mode = VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH, .Name= "hi", .ThreshLow
 797:../Src/main.c ****         { .VL53L0X_Mode = VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT , .Name="out", .ThreshLow
 798:../Src/main.c **** };
 799:../Src/main.c **** 
 800:../Src/main.c **** VL53L0X_Error WaitStopCompleted(VL53L0X_DEV Dev) {
 801:../Src/main.c ****     VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 802:../Src/main.c ****     uint32_t StopCompleted=0;
 803:../Src/main.c ****     uint32_t LoopNb;
 804:../Src/main.c **** 
 805:../Src/main.c ****     // Wait until it finished
 806:../Src/main.c ****     // use timeout to avoid deadlock
 807:../Src/main.c ****     if (Status == VL53L0X_ERROR_NONE) {
 808:../Src/main.c ****         LoopNb = 0;
 809:../Src/main.c ****         do {
 810:../Src/main.c ****             Status = VL53L0X_GetStopCompletedStatus(Dev, &StopCompleted);
 811:../Src/main.c ****             if ((StopCompleted == 0x00) || Status != VL53L0X_ERROR_NONE) {
 812:../Src/main.c ****                 break;
 813:../Src/main.c ****             }
 814:../Src/main.c ****             LoopNb = LoopNb + 1;
 815:../Src/main.c ****             VL53L0X_PollingDelay(Dev);
 816:../Src/main.c ****         } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 817:../Src/main.c **** 
 818:../Src/main.c ****         if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 819:../Src/main.c ****             Status = VL53L0X_ERROR_TIME_OUT;
 820:../Src/main.c ****         }
 821:../Src/main.c **** 
 822:../Src/main.c ****     }
 823:../Src/main.c **** 
 824:../Src/main.c ****     return Status;
 825:../Src/main.c **** }
 826:../Src/main.c **** 
 827:../Src/main.c **** 
 828:../Src/main.c **** void AlarmDemo(void){
ARM GAS  /tmp/ccWHtB6g.s 			page 16


 829:../Src/main.c ****     VL53L0X_Dev_t *pDev;
 830:../Src/main.c ****     uint8_t VhvSettings;
 831:../Src/main.c ****     uint8_t PhaseCal;
 832:../Src/main.c ****     uint32_t refSpadCount;
 833:../Src/main.c **** 	uint8_t isApertureSpads;
 834:../Src/main.c **** 	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
 835:../Src/main.c ****     int status;
 836:../Src/main.c ****     int Over=0;
 837:../Src/main.c ****     int Mode=0;
 838:../Src/main.c ****     char StrDisplay[5]="----";
 839:../Src/main.c **** 
 840:../Src/main.c ****     /* Only center device is used */
 841:../Src/main.c ****     pDev=&VL53L0XDevs[1];
 842:../Src/main.c **** 
 843:../Src/main.c **** 
 844:../Src/main.c ****     /* configure BSP/MCU center sensor interrupt */
 845:../Src/main.c ****     VL53L0A1_EXTI_IOConfigure(XNUCLEO53L0A1_DEV_CENTER, 0, 0);
 846:../Src/main.c ****     XNUCLEO53L0A1_SetIntrStateId(1, XNUCLEO53L0A1_DEV_CENTER);
 847:../Src/main.c **** 
 848:../Src/main.c ****     /* Initialize the device in continuous ranging mode */
 849:../Src/main.c **** 	VL53L0X_StaticInit(pDev);
 850:../Src/main.c **** 	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 851:../Src/main.c **** 	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 852:../Src/main.c **** 	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250);
 853:../Src/main.c **** 	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 854:../Src/main.c **** 
 855:../Src/main.c ****     do{
 856:../Src/main.c ****        /* set sensor interrupt mode */
 857:../Src/main.c ****        VL53L0X_StopMeasurement(pDev);           // it is safer to do this while sensor is stopped
 858:../Src/main.c ****        VL53L0X_SetInterruptThresholds(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING ,  AlarmModes[Mod
 859:../Src/main.c ****        status = VL53L0X_SetGpioConfig(pDev, 0, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, AlarmModes[Mo
 860:../Src/main.c ****        status = VL53L0X_ClearInterruptMask(pDev, -1); // clear interrupt pending if any
 861:../Src/main.c **** 
 862:../Src/main.c ****        /* Start continuous ranging */
 863:../Src/main.c ****        VL53L0X_StartMeasurement(pDev);
 864:../Src/main.c ****        IntrCounts[1]=0;
 865:../Src/main.c **** 
 866:../Src/main.c ****        /* Check for interrupt */
 867:../Src/main.c ****        do{
 868:../Src/main.c ****            __WFI();
 869:../Src/main.c ****            /* Interrupt received */
 870:../Src/main.c ****            if( IntrCounts[1] !=0 ){
 871:../Src/main.c ****         	   /* Reset interrupt counter */
 872:../Src/main.c ****                IntrCounts[1]=0;
 873:../Src/main.c ****                /* Get ranging data and display distance*/
 874:../Src/main.c ****                VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 875:../Src/main.c ****                sprintf(StrDisplay, "%3dc",(int)RangingMeasurementData.RangeMilliMeter/10);
 876:../Src/main.c ****                /* Clear interrupt */
 877:../Src/main.c ****                status = VL53L0X_ClearInterruptMask(pDev, -1);
 878:../Src/main.c ****                /* keep display for at least 100ms otherwise user may never see it on display*/
 879:../Src/main.c ****                XNUCLEO53L0A1_SetDisplayString(StrDisplay);
 880:../Src/main.c ****                HAL_Delay(100);
 881:../Src/main.c ****            }
 882:../Src/main.c ****            else{
 883:../Src/main.c ****         	   /* No interrupt received => Display alarm mode */
 884:../Src/main.c ****                XNUCLEO53L0A1_SetDisplayString(AlarmModes[Mode].Name);
 885:../Src/main.c ****            }
ARM GAS  /tmp/ccWHtB6g.s 			page 17


 886:../Src/main.c ****            /* Check blue button */
 887:../Src/main.c ****            if( !BSP_GetPushButton() ){
 888:../Src/main.c ****                break;
 889:../Src/main.c ****            }
 890:../Src/main.c ****        }while(1);
 891:../Src/main.c ****        /* Wait button to be released to decide if it is a short or long press */
 892:../Src/main.c ****        status=PusbButton_WaitUnPress();
 893:../Src/main.c ****        /* Long press => stop this demo */
 894:../Src/main.c ****        if( status )
 895:../Src/main.c ****            Over =1;
 896:../Src/main.c ****        /* Short press => change alarm mode */
 897:../Src/main.c ****        Mode=(Mode+1)%ARRAY_SIZE(AlarmModes);
 898:../Src/main.c ****     }while( !Over );
 899:../Src/main.c **** 
 900:../Src/main.c ****     /* Stop continuous ranging */
 901:../Src/main.c ****     VL53L0X_StopMeasurement(pDev);
 902:../Src/main.c **** 
 903:../Src/main.c ****     /* Ensure device is ready for other commands */
 904:../Src/main.c ****     WaitStopCompleted(pDev);
 905:../Src/main.c **** 
 906:../Src/main.c ****     /* Disable configuration of BSP/MCU center sensor interrupt */
 907:../Src/main.c ****     XNUCLEO53L0A1_SetIntrStateId(0, XNUCLEO53L0A1_DEV_CENTER);
 908:../Src/main.c ****     VL53L0A1_EXTI_IOUnconfigure(XNUCLEO53L0A1_DEV_CENTER);
 909:../Src/main.c **** }
 910:../Src/main.c **** #endif
 911:../Src/main.c **** 
 912:../Src/main.c **** void ResetAndDetectSensor(int SetDisplay){
 913:../Src/main.c ****     int nSensor;
 914:../Src/main.c ****     nSensor = DetectSensors(SetDisplay);
 915:../Src/main.c ****     /* at least one sensor and if one it must be the built-in one  */
 916:../Src/main.c ****     if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
 917:../Src/main.c ****         HandleError(ERR_DETECT);
 918:../Src/main.c ****     }
 919:../Src/main.c **** }
 920:../Src/main.c **** 
 921:../Src/main.c **** //////XL maintenance
 922:../Src/main.c **** XL_Interface interface;
 923:../Src/main.c **** 
 924:../Src/main.c **** uint8_t XL_320_Send_HAL(uint8_t *data, uint16_t size, uint32_t timeout){
 925:../Src/main.c ****   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, timeout);
 926:../Src/main.c ****   return (status==HAL_OK)?0:1;
 927:../Src/main.c **** }
 928:../Src/main.c **** 
 929:../Src/main.c **** void XL_320_Set_Direction_HAL(XL_Direction dir){
 930:../Src/main.c ****   HAL_GPIO_WritePin(USART1_DIR_GPIO_Port, USART1_DIR_Pin, (dir==XL_SEND)?GPIO_PIN_SET:GPIO_PIN_RESE
 931:../Src/main.c **** }
 932:../Src/main.c **** 
 933:../Src/main.c **** uint8_t XL_320_Receive_HAL(uint8_t *buffer, uint16_t size, uint32_t timeout){
 934:../Src/main.c ****   HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, buffer, size, timeout);
 935:../Src/main.c ****   return (status==HAL_OK)?0:1;
 936:../Src/main.c **** }
 937:../Src/main.c **** 
 938:../Src/main.c **** void XL_320_Delay_HAL(uint32_t t){
  29              		.loc 1 938 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccWHtB6g.s 			page 18


  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 939:../Src/main.c ****   HAL_Delay(t);
  39              		.loc 1 939 0
  40 0002 FFF7FEFF 		bl	HAL_Delay
  41              	.LVL1:
  42 0006 08BD     		pop	{r3, pc}
  43              		.cfi_endproc
  44              	.LFE131:
  46              		.section	.text.XL_320_Send_HAL,"ax",%progbits
  47              		.align	2
  48              		.global	XL_320_Send_HAL
  49              		.thumb
  50              		.thumb_func
  52              	XL_320_Send_HAL:
  53              	.LFB128:
 924:../Src/main.c ****   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, timeout);
  54              		.loc 1 924 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              	.LVL2:
  59 0000 38B5     		push	{r3, r4, r5, lr}
  60              	.LCFI1:
  61              		.cfi_def_cfa_offset 16
  62              		.cfi_offset 3, -16
  63              		.cfi_offset 4, -12
  64              		.cfi_offset 5, -8
  65              		.cfi_offset 14, -4
  66 0002 0546     		mov	r5, r0
  67 0004 0C46     		mov	r4, r1
  68 0006 1346     		mov	r3, r2
 925:../Src/main.c ****   return (status==HAL_OK)?0:1;
  69              		.loc 1 925 0
  70 0008 0448     		ldr	r0, .L5
  71              	.LVL3:
  72 000a 2946     		mov	r1, r5
  73              	.LVL4:
  74 000c 2246     		mov	r2, r4
  75              	.LVL5:
  76 000e FFF7FEFF 		bl	HAL_UART_Transmit
  77              	.LVL6:
 927:../Src/main.c **** 
  78              		.loc 1 927 0
  79 0012 0030     		adds	r0, r0, #0
  80              	.LVL7:
  81 0014 18BF     		it	ne
  82 0016 0120     		movne	r0, #1
  83 0018 38BD     		pop	{r3, r4, r5, pc}
  84              	.LVL8:
  85              	.L6:
  86 001a 00BF     		.align	2
  87              	.L5:
ARM GAS  /tmp/ccWHtB6g.s 			page 19


  88 001c 00000000 		.word	huart1
  89              		.cfi_endproc
  90              	.LFE128:
  92              		.section	.text.XL_320_Set_Direction_HAL,"ax",%progbits
  93              		.align	2
  94              		.global	XL_320_Set_Direction_HAL
  95              		.thumb
  96              		.thumb_func
  98              	XL_320_Set_Direction_HAL:
  99              	.LFB129:
 929:../Src/main.c ****   HAL_GPIO_WritePin(USART1_DIR_GPIO_Port, USART1_DIR_Pin, (dir==XL_SEND)?GPIO_PIN_SET:GPIO_PIN_RESE
 100              		.loc 1 929 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              	.LVL9:
 105 0000 08B5     		push	{r3, lr}
 106              	.LCFI2:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 3, -8
 109              		.cfi_offset 14, -4
 930:../Src/main.c **** }
 110              		.loc 1 930 0
 111 0002 B0FA80F2 		clz	r2, r0
 112 0006 5209     		lsrs	r2, r2, #5
 113 0008 0248     		ldr	r0, .L9
 114              	.LVL10:
 115 000a 4FF40071 		mov	r1, #512
 116 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 117              	.LVL11:
 118 0012 08BD     		pop	{r3, pc}
 119              	.L10:
 120              		.align	2
 121              	.L9:
 122 0014 00080240 		.word	1073874944
 123              		.cfi_endproc
 124              	.LFE129:
 126              		.section	.text.XL_320_Receive_HAL,"ax",%progbits
 127              		.align	2
 128              		.global	XL_320_Receive_HAL
 129              		.thumb
 130              		.thumb_func
 132              	XL_320_Receive_HAL:
 133              	.LFB130:
 933:../Src/main.c ****   HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, buffer, size, timeout);
 134              		.loc 1 933 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              	.LVL12:
 139 0000 38B5     		push	{r3, r4, r5, lr}
 140              	.LCFI3:
 141              		.cfi_def_cfa_offset 16
 142              		.cfi_offset 3, -16
 143              		.cfi_offset 4, -12
 144              		.cfi_offset 5, -8
 145              		.cfi_offset 14, -4
ARM GAS  /tmp/ccWHtB6g.s 			page 20


 146 0002 0546     		mov	r5, r0
 147 0004 0C46     		mov	r4, r1
 148 0006 1346     		mov	r3, r2
 934:../Src/main.c ****   return (status==HAL_OK)?0:1;
 149              		.loc 1 934 0
 150 0008 0448     		ldr	r0, .L13
 151              	.LVL13:
 152 000a 2946     		mov	r1, r5
 153              	.LVL14:
 154 000c 2246     		mov	r2, r4
 155              	.LVL15:
 156 000e FFF7FEFF 		bl	HAL_UART_Receive
 157              	.LVL16:
 936:../Src/main.c **** 
 158              		.loc 1 936 0
 159 0012 0030     		adds	r0, r0, #0
 160              	.LVL17:
 161 0014 18BF     		it	ne
 162 0016 0120     		movne	r0, #1
 163 0018 38BD     		pop	{r3, r4, r5, pc}
 164              	.LVL18:
 165              	.L14:
 166 001a 00BF     		.align	2
 167              	.L13:
 168 001c 00000000 		.word	huart1
 169              		.cfi_endproc
 170              	.LFE130:
 172              		.section	.text.MX_GPIO_Init,"ax",%progbits
 173              		.align	2
 174              		.thumb
 175              		.thumb_func
 177              	MX_GPIO_Init:
 178              	.LFB138:
 940:../Src/main.c **** }
 941:../Src/main.c **** /* USER CODE END 0 */
 942:../Src/main.c **** 
 943:../Src/main.c **** int main(void)
 944:../Src/main.c **** {
 945:../Src/main.c **** 
 946:../Src/main.c ****   /* USER CODE BEGIN 1 */
 947:../Src/main.c ****   int ExitWithLongPress;
 948:../Src/main.c ****   RangingConfig_e RangingConfig = LONG_RANGE;
 949:../Src/main.c ****   DemoMode_e DemoMode = RANGE_VALUE;
 950:../Src/main.c ****   int UseSensorsMask = 1<<XNUCLEO53L0A1_DEV_CENTER;
 951:../Src/main.c ****   /* USER CODE END 1 */
 952:../Src/main.c **** 
 953:../Src/main.c ****   /* MCU Configuration----------------------------------------------------------*/
 954:../Src/main.c **** 
 955:../Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 956:../Src/main.c ****   HAL_Init();
 957:../Src/main.c **** 
 958:../Src/main.c ****   /* Configure the system clock */
 959:../Src/main.c ****   SystemClock_Config();
 960:../Src/main.c **** 
 961:../Src/main.c ****   /* Initialize all configured peripherals */
 962:../Src/main.c ****   MX_GPIO_Init();
 963:../Src/main.c ****   SystemClock_Config();
ARM GAS  /tmp/ccWHtB6g.s 			page 21


 964:../Src/main.c ****   MX_I2C1_Init();
 965:../Src/main.c ****   MX_TIM3_Init();
 966:../Src/main.c ****   MX_USART2_UART_Init();
 967:../Src/main.c ****   MX_USART1_UART_Init();
 968:../Src/main.c **** 
 969:../Src/main.c ****   /* USER CODE BEGIN 2 */
 970:../Src/main.c ****   XNUCLEO53L0A1_Init();
 971:../Src/main.c ****   uart_printf(WelcomeMsg);
 972:../Src/main.c ****   XNUCLEO53L0A1_SetDisplayString("53L0");
 973:../Src/main.c ****   HAL_Delay(WelcomeTime);
 974:../Src/main.c ****   ResetAndDetectSensor(1);
 975:../Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3); //£
 976:../Src/main.c **** 
 977:../Src/main.c ****   /* Set VL53L0X API trace level */
 978:../Src/main.c ****   VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE); // No Trace
 979:../Src/main.c ****   //VL53L0X_trace_config(NULL,TRACE_MODULE_ALL, TRACE_LEVEL_ALL, TRACE_FUNCTION_ALL); // Full trace
 980:../Src/main.c **** 
 981:../Src/main.c ****   //////XL maintenance ----------------------
 982:../Src/main.c ****   interface.send = XL_320_Send_HAL;
 983:../Src/main.c ****   interface.set_direction = XL_320_Set_Direction_HAL;
 984:../Src/main.c ****   interface.receive = XL_320_Receive_HAL;
 985:../Src/main.c ****   interface.delay = XL_320_Delay_HAL;
 986:../Src/main.c **** 
 987:../Src/main.c ****   HAL_Delay(1000);
 988:../Src/main.c **** 
 989:../Src/main.c ****   XL broadcast = (XL) {.interface = &interface, .id = XL_BROADCAST};
 990:../Src/main.c **** 
 991:../Src/main.c ****   XL servo;
 992:../Src/main.c ****   uint16_t nb_servos = 0;
 993:../Src/main.c ****   /*int compteurAngle=100;      //compteur de variation d'angle*/
 994:../Src/main.c **** 
 995:../Src/main.c ****   XL_Discover(&interface, &servo, 1, &nb_servos);
 996:../Src/main.c ****   #if CONFIG==1
 997:../Src/main.c ****   XL_Configure_ID(&servo[0],3);
 998:../Src/main.c ****   #endif
 999:../Src/main.c ****   XL_Say_Hello(&servo);
1000:../Src/main.c ****   HAL_Delay(1000);
1001:../Src/main.c ****   XL_Power_On(&broadcast, XL_NOW);
1002:../Src/main.c ****   /* USER CODE END 2 */
1003:../Src/main.c **** 
1004:../Src/main.c ****   /* USER CODE BEGIN 3 */
1005:../Src/main.c ****   /* Infinite loop */
1006:../Src/main.c ****   /* USER CODE BEGIN WHILE */
1007:../Src/main.c ****   while (1)
1008:../Src/main.c ****   {
1009:../Src/main.c ****   /* USER CODE END WHILE */
1010:../Src/main.c ****       /* Display demo mode */
1011:../Src/main.c ****       XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
1012:../Src/main.c ****       HAL_Delay(ModeChangeDispTime);
1013:../Src/main.c **** 
1014:../Src/main.c ****       /* Display Ranging config */
1015:../Src/main.c **** 	  XNUCLEO53L0A1_SetDisplayString(RangingConfigTxt[RangingConfig]);
1016:../Src/main.c **** 	  HAL_Delay(ModeChangeDispTime);
1017:../Src/main.c **** 
1018:../Src/main.c **** 	  /* Reset and Detect all sensors */
1019:../Src/main.c ****       ResetAndDetectSensor(0);
1020:../Src/main.c **** 
ARM GAS  /tmp/ccWHtB6g.s 			page 22


1021:../Src/main.c ****       /* Reset Timestamping */
1022:../Src/main.c ****       TimeStamp_Reset();
1023:../Src/main.c **** 
1024:../Src/main.c **** #if HAVE_ALARM_DEMO
1025:../Src/main.c ****       XNUCLEO53L0A1_SetDisplayString(TxtAlarm);
1026:../Src/main.c ****       HAL_Delay(ModeChangeDispTime);
1027:../Src/main.c ****       ResetAndDetectSensor(0);
1028:../Src/main.c ****       AlarmDemo();
1029:../Src/main.c **** #else
1030:../Src/main.c **** 
1031:../Src/main.c **** //////phase de tests simples
1032:../Src/main.c **** 
1033:../Src/main.c ****       /*XL_Set_Goal_Position(&servo, 60, 1); ///test position fonctionne
1034:../Src/main.c ****       uint16_t position;
1035:../Src/main.c ****       XL_Get_Current_Position(&servo, &position);
1036:../Src/main.c **** 			position;*/
1037:../Src/main.c **** 
1038:../Src/main.c **** 			/*void VariationAngle_maison(XL servo, int Angle){ ///test fonctionne
1039:../Src/main.c **** 					uint16_t position;
1040:../Src/main.c **** 					XL_Set_Goal_Position(&servo, Angle, 1);
1041:../Src/main.c **** 					XL_Get_Current_Position(&servo, &position);
1042:../Src/main.c **** 			}
1043:../Src/main.c **** 
1044:../Src/main.c **** 			VariationAngle_maison(servo, compteurAngle);*/
1045:../Src/main.c **** 
1046:../Src/main.c ****       /* Start Ranging demo */
1047:../Src/main.c ****       ExitWithLongPress = RangeDemo(UseSensorsMask, RangingConfig, servo);
1048:../Src/main.c **** 
1049:../Src/main.c ****       /* Blue button has been pressed (long or short press) */
1050:../Src/main.c ****       if(ExitWithLongPress){
1051:../Src/main.c ****     	  /* Long press : change demo mode if multiple sensors present*/
1052:../Src/main.c ****     	  if( nDevPresent >1 ){
1053:../Src/main.c ****     		  /* If more than one sensor is present then toggle demo mode */
1054:../Src/main.c ****     		  DemoMode = (DemoMode == RANGE_VALUE) ? BAR_GRAPH : RANGE_VALUE;
1055:../Src/main.c ****     		  UseSensorsMask = (DemoMode == BAR_GRAPH) ? 0x7 : 1<<XNUCLEO53L0A1_DEV_CENTER;
1056:../Src/main.c ****     	  }
1057:../Src/main.c ****       } else {
1058:../Src/main.c ****     	  /* Short press : change ranging config */
1059:../Src/main.c ****     	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED : ((RangingConfig == HIGH_SPEED) 
1060:../Src/main.c ****       }
1061:../Src/main.c **** #endif
1062:../Src/main.c ****   }
1063:../Src/main.c ****   /* USER CODE END 3 */
1064:../Src/main.c **** 
1065:../Src/main.c **** }
1066:../Src/main.c **** 
1067:../Src/main.c **** /** System Clock Configuration
1068:../Src/main.c **** */
1069:../Src/main.c **** void SystemClock_Config(void)
1070:../Src/main.c **** {
1071:../Src/main.c **** 
1072:../Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct;
1073:../Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
1074:../Src/main.c **** 
1075:../Src/main.c ****   __PWR_CLK_ENABLE();
1076:../Src/main.c **** 
1077:../Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
ARM GAS  /tmp/ccWHtB6g.s 			page 23


1078:../Src/main.c **** 
1079:../Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
1080:../Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1081:../Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = 6;
1082:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
1083:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
1084:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
1085:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
1086:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
1087:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
1088:../Src/main.c ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
1089:../Src/main.c **** 
1090:../Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
1091:../Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
1092:../Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
1093:../Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
1094:../Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
1095:../Src/main.c ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
1096:../Src/main.c **** 
1097:../Src/main.c **** }
1098:../Src/main.c **** 
1099:../Src/main.c **** /* I2C1 init function */
1100:../Src/main.c **** void MX_I2C1_Init(void)
1101:../Src/main.c **** {
1102:../Src/main.c **** 
1103:../Src/main.c ****   hi2c1.Instance = I2C1;
1104:../Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
1105:../Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
1106:../Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
1107:../Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
1108:../Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
1109:../Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
1110:../Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
1111:../Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
1112:../Src/main.c ****   HAL_I2C_Init(&hi2c1);
1113:../Src/main.c **** 
1114:../Src/main.c **** }
1115:../Src/main.c **** 
1116:../Src/main.c **** /* TIM3 init function */
1117:../Src/main.c **** void MX_TIM3_Init(void)
1118:../Src/main.c **** {
1119:../Src/main.c **** 
1120:../Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig;
1121:../Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig;
1122:../Src/main.c **** 
1123:../Src/main.c ****   htim3.Instance = TIM3;
1124:../Src/main.c ****   htim3.Init.Prescaler = 42000-1;
1125:../Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
1126:../Src/main.c ****   htim3.Init.Period = 1000-1;
1127:../Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1128:../Src/main.c ****   HAL_TIM_Base_Init(&htim3);
1129:../Src/main.c **** 
1130:../Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1131:../Src/main.c ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
1132:../Src/main.c **** 
1133:../Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1134:../Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccWHtB6g.s 			page 24


1135:../Src/main.c ****   HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
1136:../Src/main.c **** 
1137:../Src/main.c **** }
1138:../Src/main.c **** 
1139:../Src/main.c **** /* USART1 init function */
1140:../Src/main.c **** void MX_USART1_UART_Init(void)
1141:../Src/main.c **** {
1142:../Src/main.c **** 
1143:../Src/main.c ****   huart1.Instance = USART1;
1144:../Src/main.c ****   huart1.Init.BaudRate = 1000000;
1145:../Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
1146:../Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
1147:../Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
1148:../Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
1149:../Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1150:../Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
1151:../Src/main.c ****   HAL_UART_Init(&huart1);
1152:../Src/main.c **** 
1153:../Src/main.c **** }
1154:../Src/main.c **** 
1155:../Src/main.c **** /* USART2 init function */
1156:../Src/main.c **** void MX_USART2_UART_Init(void)
1157:../Src/main.c **** {
1158:../Src/main.c **** 
1159:../Src/main.c ****   huart2.Instance = USART2;
1160:../Src/main.c ****   huart2.Init.BaudRate = 115200;
1161:../Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
1162:../Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
1163:../Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
1164:../Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
1165:../Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1166:../Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
1167:../Src/main.c ****   HAL_UART_Init(&huart2);
1168:../Src/main.c **** 
1169:../Src/main.c **** }
1170:../Src/main.c **** 
1171:../Src/main.c **** /** Configure pins as
1172:../Src/main.c ****         * Analog
1173:../Src/main.c ****         * Input
1174:../Src/main.c ****         * Output
1175:../Src/main.c ****         * EVENT_OUT
1176:../Src/main.c ****         * EXTI
1177:../Src/main.c ****         * Free pins are configured automatically as Analog (this feature is enabled through
1178:../Src/main.c ****         * the Code Generation settings)
1179:../Src/main.c **** */
1180:../Src/main.c **** void MX_GPIO_Init(void)
1181:../Src/main.c **** {
 179              		.loc 1 1181 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 24
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 184              	.LCFI4:
 185              		.cfi_def_cfa_offset 24
 186              		.cfi_offset 4, -24
 187              		.cfi_offset 5, -20
 188              		.cfi_offset 6, -16
ARM GAS  /tmp/ccWHtB6g.s 			page 25


 189              		.cfi_offset 7, -12
 190              		.cfi_offset 8, -8
 191              		.cfi_offset 14, -4
 192 0004 86B0     		sub	sp, sp, #24
 193              	.LCFI5:
 194              		.cfi_def_cfa_offset 48
1182:../Src/main.c **** 
1183:../Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct;
1184:../Src/main.c **** 
1185:../Src/main.c ****   /* GPIO Ports Clock Enable */
1186:../Src/main.c ****   __GPIOC_CLK_ENABLE();
 195              		.loc 1 1186 0
 196 0006 324B     		ldr	r3, .L17
 197 0008 1A6B     		ldr	r2, [r3, #48]
 198 000a 42F00402 		orr	r2, r2, #4
 199 000e 1A63     		str	r2, [r3, #48]
1187:../Src/main.c ****   __GPIOH_CLK_ENABLE();
 200              		.loc 1 1187 0
 201 0010 1A6B     		ldr	r2, [r3, #48]
 202 0012 42F08002 		orr	r2, r2, #128
 203 0016 1A63     		str	r2, [r3, #48]
1188:../Src/main.c ****   __GPIOA_CLK_ENABLE();
 204              		.loc 1 1188 0
 205 0018 1A6B     		ldr	r2, [r3, #48]
 206 001a 42F00102 		orr	r2, r2, #1
 207 001e 1A63     		str	r2, [r3, #48]
1189:../Src/main.c ****   __GPIOB_CLK_ENABLE();
 208              		.loc 1 1189 0
 209 0020 1A6B     		ldr	r2, [r3, #48]
 210 0022 42F00202 		orr	r2, r2, #2
 211 0026 1A63     		str	r2, [r3, #48]
1190:../Src/main.c ****   __GPIOD_CLK_ENABLE();
 212              		.loc 1 1190 0
 213 0028 1A6B     		ldr	r2, [r3, #48]
 214 002a 42F00802 		orr	r2, r2, #8
 215 002e 1A63     		str	r2, [r3, #48]
1191:../Src/main.c **** 
1192:../Src/main.c ****   /*Configure GPIO pin : PC13 */
1193:../Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 216              		.loc 1 1193 0
 217 0030 4FF40053 		mov	r3, #8192
 218 0034 0193     		str	r3, [sp, #4]
1194:../Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 219              		.loc 1 1194 0
 220 0036 0024     		movs	r4, #0
 221 0038 0294     		str	r4, [sp, #8]
1195:../Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 222              		.loc 1 1195 0
 223 003a 0394     		str	r4, [sp, #12]
1196:../Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 224              		.loc 1 1196 0
 225 003c 254E     		ldr	r6, .L17+4
 226 003e 3046     		mov	r0, r6
 227 0040 01A9     		add	r1, sp, #4
 228 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 229              	.LVL19:
1197:../Src/main.c **** 
ARM GAS  /tmp/ccWHtB6g.s 			page 26


1198:../Src/main.c ****   /*Configure GPIO pins : PC0 PC1 PC2 PC3
1199:../Src/main.c ****                            PC4 PC5 PC6 PC7
1200:../Src/main.c ****                            PC8 PC10 PC11 PC12 */
1201:../Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 230              		.loc 1 1201 0
 231 0046 41F6FF53 		movw	r3, #7679
 232 004a 0193     		str	r3, [sp, #4]
1202:../Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
1203:../Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
1204:../Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 233              		.loc 1 1204 0
 234 004c 0325     		movs	r5, #3
 235 004e 0295     		str	r5, [sp, #8]
1205:../Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 236              		.loc 1 1205 0
 237 0050 0394     		str	r4, [sp, #12]
1206:../Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 238              		.loc 1 1206 0
 239 0052 3046     		mov	r0, r6
 240 0054 01A9     		add	r1, sp, #4
 241 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 242              	.LVL20:
1207:../Src/main.c **** 
1208:../Src/main.c ****   /*Configure GPIO pin Output Level */
1209:../Src/main.c ****   HAL_GPIO_WritePin(USART1_DIR_GPIO_Port, USART1_DIR_Pin, GPIO_PIN_RESET);
 243              		.loc 1 1209 0
 244 005a 3046     		mov	r0, r6
 245 005c 4FF40071 		mov	r1, #512
 246 0060 2246     		mov	r2, r4
 247 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 248              	.LVL21:
1210:../Src/main.c **** 
1211:../Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA4 PA6
1212:../Src/main.c ****                            PA7 PA8 PA11 PA12
1213:../Src/main.c ****                            PA15 */
1214:../Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 249              		.loc 1 1214 0
 250 0066 49F6D313 		movw	r3, #39379
 251 006a 0193     		str	r3, [sp, #4]
1215:../Src/main.c ****                           |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
1216:../Src/main.c ****                           |GPIO_PIN_15;
1217:../Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 252              		.loc 1 1217 0
 253 006c 0295     		str	r5, [sp, #8]
1218:../Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 254              		.loc 1 1218 0
 255 006e 0394     		str	r4, [sp, #12]
1219:../Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 256              		.loc 1 1219 0
 257 0070 DFF86C80 		ldr	r8, .L17+16
 258 0074 4046     		mov	r0, r8
 259 0076 01A9     		add	r1, sp, #4
 260 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 261              	.LVL22:
1220:../Src/main.c **** 
1221:../Src/main.c ****   /*Configure GPIO pin : PA5 */
1222:../Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_5;
ARM GAS  /tmp/ccWHtB6g.s 			page 27


 262              		.loc 1 1222 0
 263 007c 2023     		movs	r3, #32
 264 007e 0193     		str	r3, [sp, #4]
1223:../Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 265              		.loc 1 1223 0
 266 0080 0127     		movs	r7, #1
 267 0082 0297     		str	r7, [sp, #8]
1224:../Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 268              		.loc 1 1224 0
 269 0084 0394     		str	r4, [sp, #12]
1225:../Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 270              		.loc 1 1225 0
 271 0086 0494     		str	r4, [sp, #16]
1226:../Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 272              		.loc 1 1226 0
 273 0088 4046     		mov	r0, r8
 274 008a 01A9     		add	r1, sp, #4
 275 008c FFF7FEFF 		bl	HAL_GPIO_Init
 276              	.LVL23:
1227:../Src/main.c **** 
1228:../Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB10
1229:../Src/main.c ****                            PB12 PB13 PB14 PB15
1230:../Src/main.c ****                            PB4 PB5 PB6 PB7 */
1231:../Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 277              		.loc 1 1231 0
 278 0090 4FF2F743 		movw	r3, #62711
 279 0094 0193     		str	r3, [sp, #4]
1232:../Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
1233:../Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
1234:../Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 280              		.loc 1 1234 0
 281 0096 0295     		str	r5, [sp, #8]
1235:../Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 282              		.loc 1 1235 0
 283 0098 0394     		str	r4, [sp, #12]
1236:../Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 284              		.loc 1 1236 0
 285 009a 0F48     		ldr	r0, .L17+8
 286 009c 01A9     		add	r1, sp, #4
 287 009e FFF7FEFF 		bl	HAL_GPIO_Init
 288              	.LVL24:
1237:../Src/main.c **** 
1238:../Src/main.c ****   /*Configure GPIO pin : PC9 */
1239:../Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_9;
 289              		.loc 1 1239 0
 290 00a2 4FF40073 		mov	r3, #512
 291 00a6 0193     		str	r3, [sp, #4]
1240:../Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 292              		.loc 1 1240 0
 293 00a8 0297     		str	r7, [sp, #8]
1241:../Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 294              		.loc 1 1241 0
 295 00aa 0394     		str	r4, [sp, #12]
1242:../Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 296              		.loc 1 1242 0
 297 00ac 0494     		str	r4, [sp, #16]
1243:../Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
ARM GAS  /tmp/ccWHtB6g.s 			page 28


 298              		.loc 1 1243 0
 299 00ae 3046     		mov	r0, r6
 300 00b0 01A9     		add	r1, sp, #4
 301 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 302              	.LVL25:
1244:../Src/main.c **** 
1245:../Src/main.c ****   /*Configure GPIO pin : PD2 */
1246:../Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 303              		.loc 1 1246 0
 304 00b6 0423     		movs	r3, #4
 305 00b8 0193     		str	r3, [sp, #4]
1247:../Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 306              		.loc 1 1247 0
 307 00ba 0295     		str	r5, [sp, #8]
1248:../Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 308              		.loc 1 1248 0
 309 00bc 0394     		str	r4, [sp, #12]
1249:../Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 310              		.loc 1 1249 0
 311 00be 0748     		ldr	r0, .L17+12
 312 00c0 0DEB0301 		add	r1, sp, r3
 313 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 314              	.LVL26:
1250:../Src/main.c **** 
1251:../Src/main.c **** }
 315              		.loc 1 1251 0
 316 00c8 06B0     		add	sp, sp, #24
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 24
 319              		@ sp needed
 320 00ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 321              	.L18:
 322 00ce 00BF     		.align	2
 323              	.L17:
 324 00d0 00380240 		.word	1073887232
 325 00d4 00080240 		.word	1073874944
 326 00d8 00040240 		.word	1073873920
 327 00dc 000C0240 		.word	1073875968
 328 00e0 00000240 		.word	1073872896
 329              		.cfi_endproc
 330              	.LFE138:
 332              		.section	.text.SystemClock_Config,"ax",%progbits
 333              		.align	2
 334              		.thumb
 335              		.thumb_func
 337              	SystemClock_Config:
 338              	.LFB133:
1070:../Src/main.c **** 
 339              		.loc 1 1070 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 72
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 30B5     		push	{r4, r5, lr}
 344              	.LCFI7:
 345              		.cfi_def_cfa_offset 12
 346              		.cfi_offset 4, -12
 347              		.cfi_offset 5, -8
ARM GAS  /tmp/ccWHtB6g.s 			page 29


 348              		.cfi_offset 14, -4
 349 0002 93B0     		sub	sp, sp, #76
 350              	.LCFI8:
 351              		.cfi_def_cfa_offset 88
1075:../Src/main.c **** 
 352              		.loc 1 1075 0
 353 0004 174A     		ldr	r2, .L21
 354 0006 136C     		ldr	r3, [r2, #64]
 355 0008 43F08053 		orr	r3, r3, #268435456
 356 000c 1364     		str	r3, [r2, #64]
1077:../Src/main.c **** 
 357              		.loc 1 1077 0
 358 000e A2F5E432 		sub	r2, r2, #116736
 359 0012 1368     		ldr	r3, [r2]
 360 0014 23F44043 		bic	r3, r3, #49152
 361 0018 43F40043 		orr	r3, r3, #32768
 362 001c 1360     		str	r3, [r2]
1079:../Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 363              		.loc 1 1079 0
 364 001e 0224     		movs	r4, #2
 365 0020 0694     		str	r4, [sp, #24]
1080:../Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = 6;
 366              		.loc 1 1080 0
 367 0022 0123     		movs	r3, #1
 368 0024 0993     		str	r3, [sp, #36]
1081:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 369              		.loc 1 1081 0
 370 0026 0623     		movs	r3, #6
 371 0028 0A93     		str	r3, [sp, #40]
1082:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 372              		.loc 1 1082 0
 373 002a 0C94     		str	r4, [sp, #48]
1083:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 374              		.loc 1 1083 0
 375 002c 0025     		movs	r5, #0
 376 002e 0D95     		str	r5, [sp, #52]
1084:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 377              		.loc 1 1084 0
 378 0030 1023     		movs	r3, #16
 379 0032 0E93     		str	r3, [sp, #56]
1085:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 380              		.loc 1 1085 0
 381 0034 4FF4A873 		mov	r3, #336
 382 0038 0F93     		str	r3, [sp, #60]
1086:../Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 383              		.loc 1 1086 0
 384 003a 0423     		movs	r3, #4
 385 003c 1093     		str	r3, [sp, #64]
1087:../Src/main.c ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 386              		.loc 1 1087 0
 387 003e 0723     		movs	r3, #7
 388 0040 1193     		str	r3, [sp, #68]
1088:../Src/main.c **** 
 389              		.loc 1 1088 0
 390 0042 06A8     		add	r0, sp, #24
 391 0044 FFF7FEFF 		bl	HAL_RCC_OscConfig
 392              	.LVL27:
ARM GAS  /tmp/ccWHtB6g.s 			page 30


1090:../Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 393              		.loc 1 1090 0
 394 0048 0523     		movs	r3, #5
 395 004a 0193     		str	r3, [sp, #4]
1091:../Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 396              		.loc 1 1091 0
 397 004c 0294     		str	r4, [sp, #8]
1092:../Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 398              		.loc 1 1092 0
 399 004e 0395     		str	r5, [sp, #12]
1093:../Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 400              		.loc 1 1093 0
 401 0050 4FF48053 		mov	r3, #4096
 402 0054 0493     		str	r3, [sp, #16]
1094:../Src/main.c ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 403              		.loc 1 1094 0
 404 0056 0595     		str	r5, [sp, #20]
1095:../Src/main.c **** 
 405              		.loc 1 1095 0
 406 0058 01A8     		add	r0, sp, #4
 407 005a 2146     		mov	r1, r4
 408 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 409              	.LVL28:
1097:../Src/main.c **** 
 410              		.loc 1 1097 0
 411 0060 13B0     		add	sp, sp, #76
 412              	.LCFI9:
 413              		.cfi_def_cfa_offset 12
 414              		@ sp needed
 415 0062 30BD     		pop	{r4, r5, pc}
 416              	.L22:
 417              		.align	2
 418              	.L21:
 419 0064 00380240 		.word	1073887232
 420              		.cfi_endproc
 421              	.LFE133:
 423              		.section	.text.MX_I2C1_Init,"ax",%progbits
 424              		.align	2
 425              		.thumb
 426              		.thumb_func
 428              	MX_I2C1_Init:
 429              	.LFB134:
1101:../Src/main.c **** 
 430              		.loc 1 1101 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434 0000 08B5     		push	{r3, lr}
 435              	.LCFI10:
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 3, -8
 438              		.cfi_offset 14, -4
1103:../Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 439              		.loc 1 1103 0
 440 0002 0948     		ldr	r0, .L25
 441 0004 094B     		ldr	r3, .L25+4
 442 0006 0360     		str	r3, [r0]
ARM GAS  /tmp/ccWHtB6g.s 			page 31


1104:../Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 443              		.loc 1 1104 0
 444 0008 094B     		ldr	r3, .L25+8
 445 000a 4360     		str	r3, [r0, #4]
1105:../Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 446              		.loc 1 1105 0
 447 000c 0023     		movs	r3, #0
 448 000e 8360     		str	r3, [r0, #8]
1106:../Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 449              		.loc 1 1106 0
 450 0010 C360     		str	r3, [r0, #12]
1107:../Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 451              		.loc 1 1107 0
 452 0012 4FF48042 		mov	r2, #16384
 453 0016 0261     		str	r2, [r0, #16]
1108:../Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 454              		.loc 1 1108 0
 455 0018 4361     		str	r3, [r0, #20]
1109:../Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 456              		.loc 1 1109 0
 457 001a 8361     		str	r3, [r0, #24]
1110:../Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 458              		.loc 1 1110 0
 459 001c C361     		str	r3, [r0, #28]
1111:../Src/main.c ****   HAL_I2C_Init(&hi2c1);
 460              		.loc 1 1111 0
 461 001e 0362     		str	r3, [r0, #32]
1112:../Src/main.c **** 
 462              		.loc 1 1112 0
 463 0020 FFF7FEFF 		bl	HAL_I2C_Init
 464              	.LVL29:
 465 0024 08BD     		pop	{r3, pc}
 466              	.L26:
 467 0026 00BF     		.align	2
 468              	.L25:
 469 0028 00000000 		.word	hi2c1
 470 002c 00540040 		.word	1073763328
 471 0030 801A0600 		.word	400000
 472              		.cfi_endproc
 473              	.LFE134:
 475              		.section	.text.MX_TIM3_Init,"ax",%progbits
 476              		.align	2
 477              		.thumb
 478              		.thumb_func
 480              	MX_TIM3_Init:
 481              	.LFB135:
1118:../Src/main.c **** 
 482              		.loc 1 1118 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 24
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486 0000 30B5     		push	{r4, r5, lr}
 487              	.LCFI11:
 488              		.cfi_def_cfa_offset 12
 489              		.cfi_offset 4, -12
 490              		.cfi_offset 5, -8
 491              		.cfi_offset 14, -4
ARM GAS  /tmp/ccWHtB6g.s 			page 32


 492 0002 87B0     		sub	sp, sp, #28
 493              	.LCFI12:
 494              		.cfi_def_cfa_offset 40
1123:../Src/main.c ****   htim3.Init.Prescaler = 42000-1;
 495              		.loc 1 1123 0
 496 0004 0F4C     		ldr	r4, .L29
 497 0006 104B     		ldr	r3, .L29+4
 498 0008 2360     		str	r3, [r4]
1124:../Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 499              		.loc 1 1124 0
 500 000a 4AF20F43 		movw	r3, #41999
 501 000e 6360     		str	r3, [r4, #4]
1125:../Src/main.c ****   htim3.Init.Period = 1000-1;
 502              		.loc 1 1125 0
 503 0010 0025     		movs	r5, #0
 504 0012 A560     		str	r5, [r4, #8]
1126:../Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 505              		.loc 1 1126 0
 506 0014 40F2E733 		movw	r3, #999
 507 0018 E360     		str	r3, [r4, #12]
1127:../Src/main.c ****   HAL_TIM_Base_Init(&htim3);
 508              		.loc 1 1127 0
 509 001a 2561     		str	r5, [r4, #16]
1128:../Src/main.c **** 
 510              		.loc 1 1128 0
 511 001c 2046     		mov	r0, r4
 512 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 513              	.LVL30:
1130:../Src/main.c ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 514              		.loc 1 1130 0
 515 0022 06A9     		add	r1, sp, #24
 516 0024 4FF48053 		mov	r3, #4096
 517 0028 41F8103D 		str	r3, [r1, #-16]!
1131:../Src/main.c **** 
 518              		.loc 1 1131 0
 519 002c 2046     		mov	r0, r4
 520 002e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 521              	.LVL31:
1133:../Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 522              		.loc 1 1133 0
 523 0032 0095     		str	r5, [sp]
1134:../Src/main.c ****   HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 524              		.loc 1 1134 0
 525 0034 0195     		str	r5, [sp, #4]
1135:../Src/main.c **** 
 526              		.loc 1 1135 0
 527 0036 2046     		mov	r0, r4
 528 0038 6946     		mov	r1, sp
 529 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 530              	.LVL32:
1137:../Src/main.c **** 
 531              		.loc 1 1137 0
 532 003e 07B0     		add	sp, sp, #28
 533              	.LCFI13:
 534              		.cfi_def_cfa_offset 12
 535              		@ sp needed
 536 0040 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccWHtB6g.s 			page 33


 537              	.L30:
 538 0042 00BF     		.align	2
 539              	.L29:
 540 0044 00000000 		.word	htim3
 541 0048 00040040 		.word	1073742848
 542              		.cfi_endproc
 543              	.LFE135:
 545              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 546              		.align	2
 547              		.thumb
 548              		.thumb_func
 550              	MX_USART2_UART_Init:
 551              	.LFB137:
1157:../Src/main.c **** 
 552              		.loc 1 1157 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556 0000 08B5     		push	{r3, lr}
 557              	.LCFI14:
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 3, -8
 560              		.cfi_offset 14, -4
1159:../Src/main.c ****   huart2.Init.BaudRate = 115200;
 561              		.loc 1 1159 0
 562 0002 0848     		ldr	r0, .L33
 563 0004 084B     		ldr	r3, .L33+4
 564 0006 0360     		str	r3, [r0]
1160:../Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 565              		.loc 1 1160 0
 566 0008 4FF4E133 		mov	r3, #115200
 567 000c 4360     		str	r3, [r0, #4]
1161:../Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 568              		.loc 1 1161 0
 569 000e 0023     		movs	r3, #0
 570 0010 8360     		str	r3, [r0, #8]
1162:../Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 571              		.loc 1 1162 0
 572 0012 C360     		str	r3, [r0, #12]
1163:../Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 573              		.loc 1 1163 0
 574 0014 0361     		str	r3, [r0, #16]
1164:../Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 575              		.loc 1 1164 0
 576 0016 0C22     		movs	r2, #12
 577 0018 4261     		str	r2, [r0, #20]
1165:../Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 578              		.loc 1 1165 0
 579 001a 8361     		str	r3, [r0, #24]
1166:../Src/main.c ****   HAL_UART_Init(&huart2);
 580              		.loc 1 1166 0
 581 001c C361     		str	r3, [r0, #28]
1167:../Src/main.c **** 
 582              		.loc 1 1167 0
 583 001e FFF7FEFF 		bl	HAL_UART_Init
 584              	.LVL33:
 585 0022 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccWHtB6g.s 			page 34


 586              	.L34:
 587              		.align	2
 588              	.L33:
 589 0024 00000000 		.word	huart2
 590 0028 00440040 		.word	1073759232
 591              		.cfi_endproc
 592              	.LFE137:
 594              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 595              		.align	2
 596              		.thumb
 597              		.thumb_func
 599              	MX_USART1_UART_Init:
 600              	.LFB136:
1141:../Src/main.c **** 
 601              		.loc 1 1141 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605 0000 08B5     		push	{r3, lr}
 606              	.LCFI15:
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 3, -8
 609              		.cfi_offset 14, -4
1143:../Src/main.c ****   huart1.Init.BaudRate = 1000000;
 610              		.loc 1 1143 0
 611 0002 0848     		ldr	r0, .L37
 612 0004 084B     		ldr	r3, .L37+4
 613 0006 0360     		str	r3, [r0]
1144:../Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 614              		.loc 1 1144 0
 615 0008 084B     		ldr	r3, .L37+8
 616 000a 4360     		str	r3, [r0, #4]
1145:../Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 617              		.loc 1 1145 0
 618 000c 0023     		movs	r3, #0
 619 000e 8360     		str	r3, [r0, #8]
1146:../Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 620              		.loc 1 1146 0
 621 0010 C360     		str	r3, [r0, #12]
1147:../Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 622              		.loc 1 1147 0
 623 0012 0361     		str	r3, [r0, #16]
1148:../Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 624              		.loc 1 1148 0
 625 0014 0C22     		movs	r2, #12
 626 0016 4261     		str	r2, [r0, #20]
1149:../Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 627              		.loc 1 1149 0
 628 0018 8361     		str	r3, [r0, #24]
1150:../Src/main.c ****   HAL_UART_Init(&huart1);
 629              		.loc 1 1150 0
 630 001a C361     		str	r3, [r0, #28]
1151:../Src/main.c **** 
 631              		.loc 1 1151 0
 632 001c FFF7FEFF 		bl	HAL_UART_Init
 633              	.LVL34:
 634 0020 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccWHtB6g.s 			page 35


 635              	.L38:
 636 0022 00BF     		.align	2
 637              	.L37:
 638 0024 00000000 		.word	huart1
 639 0028 00100140 		.word	1073811456
 640 002c 40420F00 		.word	1000000
 641              		.cfi_endproc
 642              	.LFE136:
 644              		.section	.text.MX_TIM5_Init,"ax",%progbits
 645              		.align	2
 646              		.global	MX_TIM5_Init
 647              		.thumb
 648              		.thumb_func
 650              	MX_TIM5_Init:
 651              	.LFB112:
 177:../Src/main.c **** 
 652              		.loc 1 177 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 40
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656 0000 30B5     		push	{r4, r5, lr}
 657              	.LCFI16:
 658              		.cfi_def_cfa_offset 12
 659              		.cfi_offset 4, -12
 660              		.cfi_offset 5, -8
 661              		.cfi_offset 14, -4
 662 0002 8BB0     		sub	sp, sp, #44
 663              	.LCFI17:
 664              		.cfi_def_cfa_offset 56
 182:../Src/main.c ****   htim5.Init.Prescaler = 83;
 665              		.loc 1 182 0
 666 0004 0F4D     		ldr	r5, .L41
 667 0006 104B     		ldr	r3, .L41+4
 668 0008 2B60     		str	r3, [r5]
 183:../Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 669              		.loc 1 183 0
 670 000a 5323     		movs	r3, #83
 671 000c 6B60     		str	r3, [r5, #4]
 184:../Src/main.c ****   htim5.Init.Period = 0xFFFFFFFF;
 672              		.loc 1 184 0
 673 000e 0024     		movs	r4, #0
 674 0010 AC60     		str	r4, [r5, #8]
 185:../Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 675              		.loc 1 185 0
 676 0012 4FF0FF33 		mov	r3, #-1
 677 0016 EB60     		str	r3, [r5, #12]
 186:../Src/main.c ****   HAL_TIM_OC_Init(&htim5);
 678              		.loc 1 186 0
 679 0018 2C61     		str	r4, [r5, #16]
 187:../Src/main.c **** 
 680              		.loc 1 187 0
 681 001a 2846     		mov	r0, r5
 682 001c FFF7FEFF 		bl	HAL_TIM_OC_Init
 683              	.LVL35:
 189:../Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 684              		.loc 1 189 0
 685 0020 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/ccWHtB6g.s 			page 36


 190:../Src/main.c ****   HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 686              		.loc 1 190 0
 687 0022 0994     		str	r4, [sp, #36]
 191:../Src/main.c **** 
 688              		.loc 1 191 0
 689 0024 2846     		mov	r0, r5
 690 0026 08A9     		add	r1, sp, #32
 691 0028 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 692              	.LVL36:
 193:../Src/main.c ****   sConfigOC.Pulse = 0;
 693              		.loc 1 193 0
 694 002c 0194     		str	r4, [sp, #4]
 194:../Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 695              		.loc 1 194 0
 696 002e 0294     		str	r4, [sp, #8]
 195:../Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 697              		.loc 1 195 0
 698 0030 0394     		str	r4, [sp, #12]
 196:../Src/main.c ****   HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 699              		.loc 1 196 0
 700 0032 0594     		str	r4, [sp, #20]
 197:../Src/main.c **** 
 701              		.loc 1 197 0
 702 0034 2846     		mov	r0, r5
 703 0036 01A9     		add	r1, sp, #4
 704 0038 2246     		mov	r2, r4
 705 003a FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 706              	.LVL37:
 199:../Src/main.c **** 
 707              		.loc 1 199 0
 708 003e 0BB0     		add	sp, sp, #44
 709              	.LCFI18:
 710              		.cfi_def_cfa_offset 12
 711              		@ sp needed
 712 0040 30BD     		pop	{r4, r5, pc}
 713              	.L42:
 714 0042 00BF     		.align	2
 715              	.L41:
 716 0044 00000000 		.word	htim5
 717 0048 000C0040 		.word	1073744896
 718              		.cfi_endproc
 719              	.LFE112:
 721              		.section	.text.TimeStamp_Init,"ax",%progbits
 722              		.align	2
 723              		.global	TimeStamp_Init
 724              		.thumb
 725              		.thumb_func
 727              	TimeStamp_Init:
 728              	.LFB113:
 201:../Src/main.c ****     MX_TIM5_Init();
 729              		.loc 1 201 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733 0000 08B5     		push	{r3, lr}
 734              	.LCFI19:
 735              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccWHtB6g.s 			page 37


 736              		.cfi_offset 3, -8
 737              		.cfi_offset 14, -4
 202:../Src/main.c **** }
 738              		.loc 1 202 0
 739 0002 FFF7FEFF 		bl	MX_TIM5_Init
 740              	.LVL38:
 741 0006 08BD     		pop	{r3, pc}
 742              		.cfi_endproc
 743              	.LFE113:
 745              		.section	.text.TimeStamp_Reset,"ax",%progbits
 746              		.align	2
 747              		.global	TimeStamp_Reset
 748              		.thumb
 749              		.thumb_func
 751              	TimeStamp_Reset:
 752              	.LFB114:
 205:../Src/main.c ****     HAL_TIM_Base_Start(&htim5);
 753              		.loc 1 205 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757 0000 10B5     		push	{r4, lr}
 758              	.LCFI20:
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 4, -8
 761              		.cfi_offset 14, -4
 206:../Src/main.c ****     htim5.Instance->CNT=0;
 762              		.loc 1 206 0
 763 0002 044C     		ldr	r4, .L47
 764 0004 2046     		mov	r0, r4
 765 0006 FFF7FEFF 		bl	HAL_TIM_Base_Start
 766              	.LVL39:
 207:../Src/main.c **** }
 767              		.loc 1 207 0
 768 000a 2368     		ldr	r3, [r4]
 769 000c 0022     		movs	r2, #0
 770 000e 5A62     		str	r2, [r3, #36]
 771 0010 10BD     		pop	{r4, pc}
 772              	.L48:
 773 0012 00BF     		.align	2
 774              	.L47:
 775 0014 00000000 		.word	htim5
 776              		.cfi_endproc
 777              	.LFE114:
 779              		.section	.text.TimeStamp_Get,"ax",%progbits
 780              		.align	2
 781              		.global	TimeStamp_Get
 782              		.thumb
 783              		.thumb_func
 785              	TimeStamp_Get:
 786              	.LFB115:
 210:../Src/main.c ****     return htim5.Instance->CNT;
 787              		.loc 1 210 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
ARM GAS  /tmp/ccWHtB6g.s 			page 38


 211:../Src/main.c **** }
 792              		.loc 1 211 0
 793 0000 014B     		ldr	r3, .L50
 794 0002 1B68     		ldr	r3, [r3]
 795 0004 586A     		ldr	r0, [r3, #36]
 212:../Src/main.c **** 
 796              		.loc 1 212 0
 797 0006 7047     		bx	lr
 798              	.L51:
 799              		.align	2
 800              	.L50:
 801 0008 00000000 		.word	htim5
 802              		.cfi_endproc
 803              	.LFE115:
 805              		.section	.text.BSP_GetPushButton,"ax",%progbits
 806              		.align	2
 807              		.global	BSP_GetPushButton
 808              		.thumb
 809              		.thumb_func
 811              	BSP_GetPushButton:
 812              	.LFB116:
 245:../Src/main.c ****     GPIO_PinState state ;
 813              		.loc 1 245 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817 0000 08B5     		push	{r3, lr}
 818              	.LCFI21:
 819              		.cfi_def_cfa_offset 8
 820              		.cfi_offset 3, -8
 821              		.cfi_offset 14, -4
 247:../Src/main.c ****     return state;
 822              		.loc 1 247 0
 823 0002 0348     		ldr	r0, .L54
 824 0004 4FF40051 		mov	r1, #8192
 825 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 826              	.LVL40:
 249:../Src/main.c **** 
 827              		.loc 1 249 0
 828 000c 08BD     		pop	{r3, pc}
 829              	.L55:
 830 000e 00BF     		.align	2
 831              	.L54:
 832 0010 00080240 		.word	1073874944
 833              		.cfi_endproc
 834              	.LFE116:
 836              		.section	.text.PusbButton_WaitUnPress,"ax",%progbits
 837              		.align	2
 838              		.global	PusbButton_WaitUnPress
 839              		.thumb
 840              		.thumb_func
 842              	PusbButton_WaitUnPress:
 843              	.LFB117:
 261:../Src/main.c ****     uint32_t TimeStarted;
 844              		.loc 1 261 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccWHtB6g.s 			page 39


 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848 0000 10B5     		push	{r4, lr}
 849              	.LCFI22:
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 4, -8
 852              		.cfi_offset 14, -4
 263:../Src/main.c ****     while( !BSP_GetPushButton() ){ ; /* debounce */
 853              		.loc 1 263 0
 854 0002 FFF7FEFF 		bl	HAL_GetTick
 855              	.LVL41:
 856 0006 0446     		mov	r4, r0
 857              	.LVL42:
 264:../Src/main.c ****         if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 858              		.loc 1 264 0
 859 0008 08E0     		b	.L58
 860              	.LVL43:
 861              	.L59:
 265:../Src/main.c ****             XNUCLEO53L0A1_SetDisplayString (" rb ");
 862              		.loc 1 265 0
 863 000a FFF7FEFF 		bl	HAL_GetTick
 864              	.LVL44:
 865 000e 001B     		subs	r0, r0, r4
 866 0010 B0F57A7F 		cmp	r0, #1000
 867 0014 02D9     		bls	.L58
 266:../Src/main.c ****         }
 868              		.loc 1 266 0
 869 0016 0848     		ldr	r0, .L61
 870 0018 FFF7FEFF 		bl	XNUCLEO53L0A1_SetDisplayString
 871              	.LVL45:
 872              	.L58:
 264:../Src/main.c ****         if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 873              		.loc 1 264 0
 874 001c FFF7FEFF 		bl	BSP_GetPushButton
 875              	.LVL46:
 876 0020 0028     		cmp	r0, #0
 877 0022 F2D0     		beq	.L59
 269:../Src/main.c **** 
 878              		.loc 1 269 0
 879 0024 FFF7FEFF 		bl	HAL_GetTick
 880              	.LVL47:
 881 0028 001B     		subs	r0, r0, r4
 271:../Src/main.c **** 
 882              		.loc 1 271 0
 883 002a B0F57A7F 		cmp	r0, #1000
 884 002e 94BF     		ite	ls
 885 0030 0020     		movls	r0, #0
 886 0032 0120     		movhi	r0, #1
 887 0034 10BD     		pop	{r4, pc}
 888              	.LVL48:
 889              	.L62:
 890 0036 00BF     		.align	2
 891              	.L61:
 892 0038 00000000 		.word	.LC1
 893              		.cfi_endproc
 894              	.LFE117:
 896              		.section	.text.HandleError,"ax",%progbits
 897              		.align	2
ARM GAS  /tmp/ccWHtB6g.s 			page 40


 898              		.global	HandleError
 899              		.thumb
 900              		.thumb_func
 902              	HandleError:
 903              	.LFB118:
 296:../Src/main.c ****     char msg[16];
 904              		.loc 1 296 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 908              	.LVL49:
 909 0000 00B5     		push	{lr}
 910              	.LCFI23:
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 14, -4
 913 0002 85B0     		sub	sp, sp, #20
 914              	.LCFI24:
 915              		.cfi_def_cfa_offset 24
 916 0004 0246     		mov	r2, r0
 298:../Src/main.c ****     XNUCLEO53L0A1_SetDisplayString(msg);
 917              		.loc 1 298 0
 918 0006 6846     		mov	r0, sp
 919              	.LVL50:
 920 0008 0349     		ldr	r1, .L66
 921 000a FFF7FEFF 		bl	sprintf
 922              	.LVL51:
 299:../Src/main.c ****     while(1){};
 923              		.loc 1 299 0
 924 000e 6846     		mov	r0, sp
 925 0010 FFF7FEFF 		bl	XNUCLEO53L0A1_SetDisplayString
 926              	.LVL52:
 927              	.L64:
 300:../Src/main.c **** }
 928              		.loc 1 300 0 discriminator 1
 929 0014 FEE7     		b	.L64
 930              	.L67:
 931 0016 00BF     		.align	2
 932              	.L66:
 933 0018 08000000 		.word	.LC2
 934              		.cfi_endproc
 935              	.LFE118:
 937              		.section	.text.DetectSensors,"ax",%progbits
 938              		.align	2
 939              		.global	DetectSensors
 940              		.thumb
 941              		.thumb_func
 943              	DetectSensors:
 944              	.LFB119:
 309:../Src/main.c ****     int i;
 945              		.loc 1 309 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 8
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              	.LVL53:
 950 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 951              	.LCFI25:
 952              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccWHtB6g.s 			page 41


 953              		.cfi_offset 4, -24
 954              		.cfi_offset 5, -20
 955              		.cfi_offset 6, -16
 956              		.cfi_offset 7, -12
 957              		.cfi_offset 8, -8
 958              		.cfi_offset 14, -4
 959 0004 82B0     		sub	sp, sp, #8
 960              	.LCFI26:
 961              		.cfi_def_cfa_offset 32
 962 0006 0746     		mov	r7, r0
 315:../Src/main.c ****     /* Reset all */
 963              		.loc 1 315 0
 964 0008 4E4B     		ldr	r3, .L83
 965 000a 93E80300 		ldmia	r3, {r0, r1}
 966              	.LVL54:
 967 000e 0090     		str	r0, [sp]
 968 0010 8DF80410 		strb	r1, [sp, #4]
 317:../Src/main.c ****     for (i = 0; i < 3; i++)
 969              		.loc 1 317 0
 970 0014 0024     		movs	r4, #0
 971 0016 4C4B     		ldr	r3, .L83+4
 972 0018 1C60     		str	r4, [r3]
 973              	.LVL55:
 318:../Src/main.c ****         status = XNUCLEO53L0A1_ResetId(i, 0);
 974              		.loc 1 318 0
 975 001a 04E0     		b	.L69
 976              	.LVL56:
 977              	.L70:
 319:../Src/main.c **** 
 978              		.loc 1 319 0 discriminator 3
 979 001c 2046     		mov	r0, r4
 980 001e 0021     		movs	r1, #0
 981 0020 FFF7FEFF 		bl	XNUCLEO53L0A1_ResetId
 982              	.LVL57:
 318:../Src/main.c ****         status = XNUCLEO53L0A1_ResetId(i, 0);
 983              		.loc 1 318 0 discriminator 3
 984 0024 0134     		adds	r4, r4, #1
 985              	.LVL58:
 986              	.L69:
 318:../Src/main.c ****         status = XNUCLEO53L0A1_ResetId(i, 0);
 987              		.loc 1 318 0 is_stmt 0 discriminator 1
 988 0026 022C     		cmp	r4, #2
 989 0028 F8DD     		ble	.L70
 990 002a 0025     		movs	r5, #0
 991 002c 60E0     		b	.L71
 992              	.LVL59:
 993              	.L75:
 994              	.LBB2:
 324:../Src/main.c ****         pDev->I2cDevAddr = 0x52;
 995              		.loc 1 324 0 is_stmt 1
 996 002e 4FF4C874 		mov	r4, #400
 997 0032 464B     		ldr	r3, .L83+8
 998 0034 04FB0534 		mla	r4, r4, r5, r3
 999              	.LVL60:
 325:../Src/main.c ****         pDev->Present = 0;
 1000              		.loc 1 325 0
 1001 0038 5223     		movs	r3, #82
ARM GAS  /tmp/ccWHtB6g.s 			page 42


 1002 003a 84F86031 		strb	r3, [r4, #352]
 326:../Src/main.c ****         status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 1003              		.loc 1 326 0
 1004 003e 0023     		movs	r3, #0
 1005 0040 C4F86831 		str	r3, [r4, #360]
 327:../Src/main.c ****         HAL_Delay(2);
 1006              		.loc 1 327 0
 1007 0044 D4F86401 		ldr	r0, [r4, #356]
 1008 0048 0121     		movs	r1, #1
 1009 004a FFF7FEFF 		bl	XNUCLEO53L0A1_ResetId
 1010              	.LVL61:
 1011 004e 0646     		mov	r6, r0
 1012              	.LVL62:
 328:../Src/main.c ****         FinalAddress=0x52+(i+1)*2;
 1013              		.loc 1 328 0
 1014 0050 0220     		movs	r0, #2
 1015              	.LVL63:
 1016 0052 FFF7FEFF 		bl	HAL_Delay
 1017              	.LVL64:
 329:../Src/main.c **** 
 1018              		.loc 1 329 0
 1019 0056 05F12A03 		add	r3, r5, #42
 1020 005a 4FEA4308 		lsl	r8, r3, #1
 1021              	.LVL65:
 333:../Src/main.c ****         		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 1022              		.loc 1 333 0
 1023 005e 26B9     		cbnz	r6, .L72
 334:../Src/main.c **** 
 1024              		.loc 1 334 0
 1025 0060 2046     		mov	r0, r4
 1026 0062 8821     		movs	r1, #136
 1027 0064 0022     		movs	r2, #0
 1028 0066 FFF7FEFF 		bl	VL53L0X_WrByte
 1029              	.LVL66:
 1030              	.L72:
 337:../Src/main.c ****             if (status) {
 1031              		.loc 1 337 0
 1032 006a 2046     		mov	r0, r4
 1033 006c C021     		movs	r1, #192
 1034 006e 0DF10602 		add	r2, sp, #6
 1035 0072 FFF7FEFF 		bl	VL53L0X_RdWord
 1036              	.LVL67:
 1037 0076 0346     		mov	r3, r0
 1038              	.LVL68:
 338:../Src/main.c ****                 debug_printf("#%d Read id fail\n", i);
 1039              		.loc 1 338 0
 1040 0078 A0BB     		cbnz	r0, .L73
 342:../Src/main.c **** 				/* Sensor is found => Change its I2C address to final one */
 1041              		.loc 1 342 0
 1042 007a BDF80620 		ldrh	r2, [sp, #6]
 1043 007e 4EF6AA63 		movw	r3, #61098
 1044 0082 9A42     		cmp	r2, r3
 1045 0084 2DD1     		bne	.L80
 344:../Src/main.c ****                 if (status != 0) {
 1046              		.loc 1 344 0
 1047 0086 5FFA88F8 		uxtb	r8, r8
 1048              	.LVL69:
ARM GAS  /tmp/ccWHtB6g.s 			page 43


 1049 008a 2046     		mov	r0, r4
 1050              	.LVL70:
 1051 008c 4146     		mov	r1, r8
 1052 008e FFF7FEFF 		bl	VL53L0X_SetDeviceAddress
 1053              	.LVL71:
 1054 0092 0346     		mov	r3, r0
 1055              	.LVL72:
 345:../Src/main.c ****                     debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 1056              		.loc 1 345 0
 1057 0094 30BB     		cbnz	r0, .L73
 349:../Src/main.c ****                 /* Check all is OK with the new I2C address and initialize the sensor */
 1058              		.loc 1 349 0
 1059 0096 4FF4C873 		mov	r3, #400
 1060 009a 2C4A     		ldr	r2, .L83+8
 1061 009c 03FB0523 		mla	r3, r3, r5, r2
 1062 00a0 83F86081 		strb	r8, [r3, #352]
 351:../Src/main.c ****                 if (status != 0) {
 1063              		.loc 1 351 0
 1064 00a4 2046     		mov	r0, r4
 1065              	.LVL73:
 1066 00a6 C021     		movs	r1, #192
 1067 00a8 0DF10602 		add	r2, sp, #6
 1068 00ac FFF7FEFF 		bl	VL53L0X_RdWord
 1069              	.LVL74:
 1070 00b0 0346     		mov	r3, r0
 1071              	.LVL75:
 352:../Src/main.c **** 					debug_printf("#i VL53L0X_RdWord fail\n", i);
 1072              		.loc 1 352 0
 1073 00b2 B8B9     		cbnz	r0, .L73
 357:../Src/main.c ****                 if( status == 0 ){
 1074              		.loc 1 357 0
 1075 00b4 2046     		mov	r0, r4
 1076              	.LVL76:
 1077 00b6 FFF7FEFF 		bl	VL53L0X_DataInit
 1078              	.LVL77:
 1079 00ba 0346     		mov	r3, r0
 1080              	.LVL78:
 358:../Src/main.c ****                     pDev->Present = 1;
 1081              		.loc 1 358 0
 1082 00bc 90B9     		cbnz	r0, .L73
 359:../Src/main.c ****                 }
 1083              		.loc 1 359 0
 1084 00be 4FF4C872 		mov	r2, #400
 1085 00c2 2249     		ldr	r1, .L83+8
 1086 00c4 02FB0511 		mla	r1, r2, r5, r1
 1087 00c8 0122     		movs	r2, #1
 1088 00ca C1F86821 		str	r2, [r1, #360]
 366:../Src/main.c ****                 nDevMask |= 1 << i;
 1089              		.loc 1 366 0
 1090 00ce 1E48     		ldr	r0, .L83+4
 1091              	.LVL79:
 1092 00d0 0168     		ldr	r1, [r0]
 1093 00d2 1144     		add	r1, r1, r2
 1094 00d4 0160     		str	r1, [r0]
 367:../Src/main.c ****                 pDev->Present = 1;
 1095              		.loc 1 367 0
 1096 00d6 AA40     		lsls	r2, r2, r5
ARM GAS  /tmp/ccWHtB6g.s 			page 44


 1097 00d8 1D48     		ldr	r0, .L83+12
 1098 00da 0168     		ldr	r1, [r0]
 1099 00dc 0A43     		orrs	r2, r2, r1
 1100 00de 0260     		str	r2, [r0]
 1101 00e0 00E0     		b	.L73
 1102              	.LVL80:
 1103              	.L80:
 372:../Src/main.c ****             }
 1104              		.loc 1 372 0
 1105 00e2 0123     		movs	r3, #1
 1106              	.LVL81:
 1107              	.L73:
 376:../Src/main.c ****             XNUCLEO53L0A1_ResetId(i, 0);
 1108              		.loc 1 376 0
 1109 00e4 1BB1     		cbz	r3, .L74
 377:../Src/main.c ****         }
 1110              		.loc 1 377 0
 1111 00e6 2846     		mov	r0, r5
 1112 00e8 0021     		movs	r1, #0
 1113 00ea FFF7FEFF 		bl	XNUCLEO53L0A1_ResetId
 1114              	.LVL82:
 1115              	.L74:
 1116              	.LBE2:
 322:../Src/main.c ****         VL53L0X_Dev_t *pDev;
 1117              		.loc 1 322 0 discriminator 2
 1118 00ee 0135     		adds	r5, r5, #1
 1119              	.LVL83:
 1120              	.L71:
 322:../Src/main.c ****         VL53L0X_Dev_t *pDev;
 1121              		.loc 1 322 0 is_stmt 0 discriminator 1
 1122 00f0 022D     		cmp	r5, #2
 1123 00f2 9CDD     		ble	.L75
 381:../Src/main.c ****         for(i=0; i<3; i++){
 1124              		.loc 1 381 0 is_stmt 1
 1125 00f4 A7B9     		cbnz	r7, .L81
 1126 00f6 20E0     		b	.L77
 1127              	.LVL84:
 1128              	.L79:
 383:../Src/main.c ****                 PresentMsg[i+1]=VL53L0XDevs[i].DevLetter;
 1129              		.loc 1 383 0
 1130 00f8 4FF4C872 		mov	r2, #400
 1131 00fc 1349     		ldr	r1, .L83+8
 1132 00fe 02FB0312 		mla	r2, r2, r3, r1
 1133 0102 D2F86821 		ldr	r2, [r2, #360]
 1134 0106 4AB1     		cbz	r2, .L78
 384:../Src/main.c ****             }
 1135              		.loc 1 384 0
 1136 0108 4FF4C872 		mov	r2, #400
 1137 010c 02FB0312 		mla	r2, r2, r3, r1
 1138 0110 92F86111 		ldrb	r1, [r2, #353]	@ zero_extendqisi2
 1139 0114 02AA     		add	r2, sp, #8
 1140 0116 1A44     		add	r2, r2, r3
 1141 0118 02F8071C 		strb	r1, [r2, #-7]
 1142              	.L78:
 382:../Src/main.c ****             if( VL53L0XDevs[i].Present ){
 1143              		.loc 1 382 0 discriminator 2
 1144 011c 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccWHtB6g.s 			page 45


 1145              	.LVL85:
 1146 011e 00E0     		b	.L76
 1147              	.LVL86:
 1148              	.L81:
 1149 0120 0023     		movs	r3, #0
 1150              	.LVL87:
 1151              	.L76:
 382:../Src/main.c ****             if( VL53L0XDevs[i].Present ){
 1152              		.loc 1 382 0 is_stmt 0 discriminator 1
 1153 0122 022B     		cmp	r3, #2
 1154 0124 E8DD     		ble	.L79
 387:../Src/main.c ****         XNUCLEO53L0A1_SetDisplayString(PresentMsg);
 1155              		.loc 1 387 0 is_stmt 1
 1156 0126 02A8     		add	r0, sp, #8
 1157 0128 2023     		movs	r3, #32
 1158              	.LVL88:
 1159 012a 00F8083D 		strb	r3, [r0, #-8]!
 388:../Src/main.c ****         HAL_Delay(1000);
 1160              		.loc 1 388 0
 1161 012e FFF7FEFF 		bl	XNUCLEO53L0A1_SetDisplayString
 1162              	.LVL89:
 389:../Src/main.c ****     }
 1163              		.loc 1 389 0
 1164 0132 4FF47A70 		mov	r0, #1000
 1165 0136 FFF7FEFF 		bl	HAL_Delay
 1166              	.LVL90:
 1167              	.L77:
 393:../Src/main.c **** 
 1168              		.loc 1 393 0
 1169 013a 034B     		ldr	r3, .L83+4
 1170 013c 1868     		ldr	r0, [r3]
 1171 013e 02B0     		add	sp, sp, #8
 1172              	.LCFI27:
 1173              		.cfi_def_cfa_offset 24
 1174              		@ sp needed
 1175 0140 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1176              	.LVL91:
 1177              	.L84:
 1178              		.align	2
 1179              	.L83:
 1180 0144 10000000 		.word	.LC3
 1181 0148 00000000 		.word	.LANCHOR0
 1182 014c 00000000 		.word	.LANCHOR1
 1183 0150 00000000 		.word	nDevMask
 1184              		.cfi_endproc
 1185              	.LFE119:
 1187              		.section	.text.SetupSingleShot,"ax",%progbits
 1188              		.align	2
 1189              		.global	SetupSingleShot
 1190              		.thumb
 1191              		.thumb_func
 1193              	SetupSingleShot:
 1194              	.LFB120:
 398:../Src/main.c ****     int i;
 1195              		.loc 1 398 0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccWHtB6g.s 			page 46


 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              	.LVL92:
 1200 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1201              	.LCFI28:
 1202              		.cfi_def_cfa_offset 36
 1203              		.cfi_offset 4, -36
 1204              		.cfi_offset 5, -32
 1205              		.cfi_offset 6, -28
 1206              		.cfi_offset 7, -24
 1207              		.cfi_offset 8, -20
 1208              		.cfi_offset 9, -16
 1209              		.cfi_offset 10, -12
 1210              		.cfi_offset 11, -8
 1211              		.cfi_offset 14, -4
 1212 0004 85B0     		sub	sp, sp, #20
 1213              	.LCFI29:
 1214              		.cfi_def_cfa_offset 56
 1215 0006 0646     		mov	r6, r0
 1216              	.LVL93:
 409:../Src/main.c **** 
 1217              		.loc 1 409 0
 1218 0008 4FF00A0B 		mov	fp, #10
 408:../Src/main.c **** 	uint8_t finalRangeVcselPeriod = 10;
 1219              		.loc 1 408 0
 1220 000c 4FF00E0A 		mov	r10, #14
 407:../Src/main.c **** 	uint8_t preRangeVcselPeriod = 14;
 1221              		.loc 1 407 0
 1222 0010 48F2E809 		movw	r9, #33000
 406:../Src/main.c **** 	uint32_t timingBudget = 33000;
 1223              		.loc 1 406 0
 1224 0014 4FF49018 		mov	r8, #1179648
 405:../Src/main.c **** 	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 1225              		.loc 1 405 0
 1226 0018 4FF48047 		mov	r7, #16384
 411:../Src/main.c ****         if( VL53L0XDevs[i].Present){
 1227              		.loc 1 411 0
 1228 001c 0024     		movs	r4, #0
 1229 001e 77E0     		b	.L86
 1230              	.LVL94:
 1231              	.L92:
 412:../Src/main.c ****             status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 1232              		.loc 1 412 0
 1233 0020 4FF4C873 		mov	r3, #400
 1234 0024 3D4A     		ldr	r2, .L95
 1235 0026 03FB0423 		mla	r3, r3, r4, r2
 1236 002a D3F86831 		ldr	r3, [r3, #360]
 1237 002e 002B     		cmp	r3, #0
 1238 0030 6DD0     		beq	.L87
 413:../Src/main.c ****             if( status ){
 1239              		.loc 1 413 0
 1240 0032 4FF4C873 		mov	r3, #400
 1241 0036 03FB0425 		mla	r5, r3, r4, r2
 1242 003a 2846     		mov	r0, r5
 1243 003c FFF7FEFF 		bl	VL53L0X_StaticInit
 1244              	.LVL95:
 418:../Src/main.c **** 			if( status ){
 1245              		.loc 1 418 0
ARM GAS  /tmp/ccWHtB6g.s 			page 47


 1246 0040 2846     		mov	r0, r5
 1247 0042 0DF10F01 		add	r1, sp, #15
 1248 0046 0DF10E02 		add	r2, sp, #14
 1249 004a FFF7FEFF 		bl	VL53L0X_PerformRefCalibration
 1250              	.LVL96:
 423:../Src/main.c **** 			if( status ){
 1251              		.loc 1 423 0
 1252 004e 2846     		mov	r0, r5
 1253 0050 02A9     		add	r1, sp, #8
 1254 0052 0DF10702 		add	r2, sp, #7
 1255 0056 FFF7FEFF 		bl	VL53L0X_PerformRefSpadManagement
 1256              	.LVL97:
 428:../Src/main.c ****             if( status ){
 1257              		.loc 1 428 0
 1258 005a 2846     		mov	r0, r5
 1259 005c 0021     		movs	r1, #0
 1260 005e FFF7FEFF 		bl	VL53L0X_SetDeviceMode
 1261              	.LVL98:
 433:../Src/main.c **** 			if( status ){
 1262              		.loc 1 433 0
 1263 0062 2846     		mov	r0, r5
 1264 0064 0021     		movs	r1, #0
 1265 0066 0122     		movs	r2, #1
 1266 0068 FFF7FEFF 		bl	VL53L0X_SetLimitCheckEnable
 1267              	.LVL99:
 438:../Src/main.c **** 			if( status ){
 1268              		.loc 1 438 0
 1269 006c 2846     		mov	r0, r5
 1270 006e 0121     		movs	r1, #1
 1271 0070 0A46     		mov	r2, r1
 1272 0072 FFF7FEFF 		bl	VL53L0X_SetLimitCheckEnable
 1273              	.LVL100:
 443:../Src/main.c ****             case LONG_RANGE:
 1274              		.loc 1 443 0
 1275 0076 012E     		cmp	r6, #1
 1276 0078 0DD0     		beq	.L89
 1277 007a BEB1     		cbz	r6, .L93
 1278 007c 022E     		cmp	r6, #2
 1279 007e 1FD1     		bne	.L90
 1280              	.LVL101:
 456:../Src/main.c **** 				break;
 1281              		.loc 1 456 0
 1282 0080 4FF00A0B 		mov	fp, #10
 455:../Src/main.c **** 				finalRangeVcselPeriod = 10;
 1283              		.loc 1 455 0
 1284 0084 4FF00E0A 		mov	r10, #14
 454:../Src/main.c **** 				preRangeVcselPeriod = 14; //laser pulse periods
 1285              		.loc 1 454 0
 1286 0088 DFF89490 		ldr	r9, .L95+4
 453:../Src/main.c **** 				timingBudget = 200000; //200ms
 1287              		.loc 1 453 0
 1288 008c 4FF49018 		mov	r8, #1179648
 452:../Src/main.c **** 				sigmaLimit = (FixPoint1616_t)(18*65536);
 1289              		.loc 1 452 0
 1290 0090 4FF48047 		mov	r7, #16384
 457:../Src/main.c ****             case HIGH_SPEED:
 1291              		.loc 1 457 0
ARM GAS  /tmp/ccWHtB6g.s 			page 48


 1292 0094 14E0     		b	.L90
 1293              	.LVL102:
 1294              	.L89:
 463:../Src/main.c **** 				break;
 1295              		.loc 1 463 0
 1296 0096 4FF00A0B 		mov	fp, #10
 462:../Src/main.c **** 				finalRangeVcselPeriod = 10;
 1297              		.loc 1 462 0
 1298 009a 4FF00E0A 		mov	r10, #14
 461:../Src/main.c **** 				preRangeVcselPeriod = 14;
 1299              		.loc 1 461 0
 1300 009e 44F62069 		movw	r9, #20000
 460:../Src/main.c **** 				timingBudget = 20000; //20ms
 1301              		.loc 1 460 0
 1302 00a2 4FF40018 		mov	r8, #2097152
 459:../Src/main.c **** 				sigmaLimit = (FixPoint1616_t)(32*65536);
 1303              		.loc 1 459 0
 1304 00a6 4FF48047 		mov	r7, #16384
 464:../Src/main.c ****             default:
 1305              		.loc 1 464 0
 1306 00aa 09E0     		b	.L90
 1307              	.LVL103:
 1308              	.L93:
 449:../Src/main.c ****             	break;
 1309              		.loc 1 449 0
 1310 00ac 4FF00E0B 		mov	fp, #14
 1311              	.LVL104:
 448:../Src/main.c ****             	finalRangeVcselPeriod = 14;
 1312              		.loc 1 448 0
 1313 00b0 4FF0120A 		mov	r10, #18
 1314              	.LVL105:
 447:../Src/main.c ****             	preRangeVcselPeriod = 18;
 1315              		.loc 1 447 0
 1316 00b4 48F2E809 		movw	r9, #33000
 1317              	.LVL106:
 446:../Src/main.c ****             	timingBudget = 33000; //33ms
 1318              		.loc 1 446 0
 1319 00b8 4FF47018 		mov	r8, #3932160
 1320              	.LVL107:
 445:../Src/main.c ****             	sigmaLimit = (FixPoint1616_t)(60*65536);
 1321              		.loc 1 445 0
 1322 00bc 41F69917 		movw	r7, #6553
 1323              	.LVL108:
 1324              	.L90:
 469:../Src/main.c **** 			if( status ){
 1325              		.loc 1 469 0
 1326 00c0 2846     		mov	r0, r5
 1327 00c2 0121     		movs	r1, #1
 1328 00c4 3A46     		mov	r2, r7
 1329 00c6 FFF7FEFF 		bl	VL53L0X_SetLimitCheckValue
 1330              	.LVL109:
 474:../Src/main.c **** 			if( status ){
 1331              		.loc 1 474 0
 1332 00ca 2846     		mov	r0, r5
 1333 00cc 0021     		movs	r1, #0
 1334 00ce 4246     		mov	r2, r8
 1335 00d0 FFF7FEFF 		bl	VL53L0X_SetLimitCheckValue
ARM GAS  /tmp/ccWHtB6g.s 			page 49


 1336              	.LVL110:
 479:../Src/main.c ****             if( status ){
 1337              		.loc 1 479 0
 1338 00d4 2846     		mov	r0, r5
 1339 00d6 4946     		mov	r1, r9
 1340 00d8 FFF7FEFF 		bl	VL53L0X_SetMeasurementTimingBudgetMicroSeconds
 1341              	.LVL111:
 484:../Src/main.c **** 			if( status ){
 1342              		.loc 1 484 0
 1343 00dc 2846     		mov	r0, r5
 1344 00de 0021     		movs	r1, #0
 1345 00e0 5246     		mov	r2, r10
 1346 00e2 FFF7FEFF 		bl	VL53L0X_SetVcselPulsePeriod
 1347              	.LVL112:
 489:../Src/main.c **** 			if( status ){
 1348              		.loc 1 489 0
 1349 00e6 2846     		mov	r0, r5
 1350 00e8 0121     		movs	r1, #1
 1351 00ea 5A46     		mov	r2, fp
 1352 00ec FFF7FEFF 		bl	VL53L0X_SetVcselPulsePeriod
 1353              	.LVL113:
 494:../Src/main.c **** 			if( status ){
 1354              		.loc 1 494 0
 1355 00f0 2846     		mov	r0, r5
 1356 00f2 0DF10F01 		add	r1, sp, #15
 1357 00f6 0DF10E02 		add	r2, sp, #14
 1358 00fa FFF7FEFF 		bl	VL53L0X_PerformRefCalibration
 1359              	.LVL114:
 499:../Src/main.c ****         }
 1360              		.loc 1 499 0
 1361 00fe 4FF4C873 		mov	r3, #400
 1362 0102 064A     		ldr	r2, .L95
 1363 0104 03FB0423 		mla	r3, r3, r4, r2
 1364 0108 0122     		movs	r2, #1
 1365 010a C3F87C21 		str	r2, [r3, #380]
 1366              	.L87:
 411:../Src/main.c ****         if( VL53L0XDevs[i].Present){
 1367              		.loc 1 411 0 discriminator 2
 1368 010e 0134     		adds	r4, r4, #1
 1369              	.LVL115:
 1370              	.L86:
 411:../Src/main.c ****         if( VL53L0XDevs[i].Present){
 1371              		.loc 1 411 0 is_stmt 0 discriminator 1
 1372 0110 022C     		cmp	r4, #2
 1373 0112 85DD     		ble	.L92
 502:../Src/main.c **** 
 1374              		.loc 1 502 0 is_stmt 1
 1375 0114 05B0     		add	sp, sp, #20
 1376              	.LCFI30:
 1377              		.cfi_def_cfa_offset 36
 1378              		@ sp needed
 1379 0116 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1380              	.LVL116:
 1381              	.L96:
 1382 011a 00BF     		.align	2
 1383              	.L95:
 1384 011c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccWHtB6g.s 			page 50


 1385 0120 400D0300 		.word	200000
 1386              		.cfi_endproc
 1387              	.LFE120:
 1389              		.section	.text.RangeToLetter,"ax",%progbits
 1390              		.align	2
 1391              		.global	RangeToLetter
 1392              		.thumb
 1393              		.thumb_func
 1395              	RangeToLetter:
 1396              	.LFB121:
 504:../Src/main.c ****     char c;
 1397              		.loc 1 504 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402              	.LVL117:
 506:../Src/main.c ****         if( pDev->LeakyRange < RangeLow ){
 1403              		.loc 1 506 0
 1404 0000 0B7E     		ldrb	r3, [r1, #24]	@ zero_extendqisi2
 1405 0002 5BB9     		cbnz	r3, .L99
 507:../Src/main.c ****             c='_';
 1406              		.loc 1 507 0
 1407 0004 D0F87831 		ldr	r3, [r0, #376]
 1408 0008 074A     		ldr	r2, .L102
 1409 000a 1268     		ldr	r2, [r2]
 1410 000c 9342     		cmp	r3, r2
 1411 000e 07DB     		blt	.L100
 510:../Src/main.c ****                 c='=';
 1412              		.loc 1 510 0
 1413 0010 064A     		ldr	r2, .L102+4
 1414 0012 1268     		ldr	r2, [r2]
 1415 0014 9342     		cmp	r3, r2
 1416 0016 05DA     		bge	.L101
 511:../Src/main.c ****         }
 1417              		.loc 1 511 0
 1418 0018 3D20     		movs	r0, #61
 1419              	.LVL118:
 1420 001a 7047     		bx	lr
 1421              	.LVL119:
 1422              	.L99:
 519:../Src/main.c ****     }
 1423              		.loc 1 519 0
 1424 001c 2D20     		movs	r0, #45
 1425              	.LVL120:
 1426 001e 7047     		bx	lr
 1427              	.LVL121:
 1428              	.L100:
 508:../Src/main.c ****         }
 1429              		.loc 1 508 0
 1430 0020 5F20     		movs	r0, #95
 1431              	.LVL122:
 1432 0022 7047     		bx	lr
 1433              	.LVL123:
 1434              	.L101:
 514:../Src/main.c ****         }
 1435              		.loc 1 514 0
ARM GAS  /tmp/ccWHtB6g.s 			page 51


 1436 0024 7E20     		movs	r0, #126
 1437              	.LVL124:
 522:../Src/main.c **** 
 1438              		.loc 1 522 0
 1439 0026 7047     		bx	lr
 1440              	.L103:
 1441              		.align	2
 1442              	.L102:
 1443 0028 00000000 		.word	.LANCHOR2
 1444 002c 00000000 		.word	.LANCHOR3
 1445              		.cfi_endproc
 1446              	.LFE121:
 1448              		.section	.text.Sensor_SetNewRange,"ax",%progbits
 1449              		.align	2
 1450              		.global	Sensor_SetNewRange
 1451              		.thumb
 1452              		.thumb_func
 1454              	Sensor_SetNewRange:
 1455              	.LFB122:
 525:../Src/main.c ****     if( pRange->RangeStatus == 0 ){
 1456              		.loc 1 525 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
 1461              	.LVL125:
 526:../Src/main.c ****         if( pDev->LeakyFirst ){
 1462              		.loc 1 526 0
 1463 0000 0B7E     		ldrb	r3, [r1, #24]	@ zero_extendqisi2
 1464 0002 CBB9     		cbnz	r3, .L105
 527:../Src/main.c ****             pDev->LeakyFirst = 0;
 1465              		.loc 1 527 0
 1466 0004 D0F87C31 		ldr	r3, [r0, #380]
 1467 0008 33B1     		cbz	r3, .L106
 528:../Src/main.c ****             pDev->LeakyRange = pRange->RangeMilliMeter;
 1468              		.loc 1 528 0
 1469 000a 0023     		movs	r3, #0
 1470 000c C0F87C31 		str	r3, [r0, #380]
 529:../Src/main.c ****         }
 1471              		.loc 1 529 0
 1472 0010 0B89     		ldrh	r3, [r1, #8]
 1473 0012 C0F87831 		str	r3, [r0, #376]
 1474 0016 7047     		bx	lr
 1475              	.L106:
 525:../Src/main.c ****     if( pRange->RangeStatus == 0 ){
 1476              		.loc 1 525 0
 1477 0018 30B4     		push	{r4, r5}
 1478              	.LCFI31:
 1479              		.cfi_def_cfa_offset 8
 1480              		.cfi_offset 4, -8
 1481              		.cfi_offset 5, -4
 532:../Src/main.c ****         }
 1482              		.loc 1 532 0
 1483 001a D0F87831 		ldr	r3, [r0, #376]
 1484 001e 094A     		ldr	r2, .L110
 1485 0020 1468     		ldr	r4, [r2]
 1486 0022 C4F58075 		rsb	r5, r4, #256
ARM GAS  /tmp/ccWHtB6g.s 			page 52


 1487 0026 0A89     		ldrh	r2, [r1, #8]
 1488 0028 02FB05F2 		mul	r2, r2, r5
 1489 002c 04FB0323 		mla	r3, r4, r3, r2
 1490 0030 1B12     		asrs	r3, r3, #8
 1491 0032 C0F87831 		str	r3, [r0, #376]
 1492 0036 03E0     		b	.L104
 1493              	.L105:
 1494              	.LCFI32:
 1495              		.cfi_def_cfa_offset 0
 1496              		.cfi_restore 4
 1497              		.cfi_restore 5
 536:../Src/main.c ****     }
 1498              		.loc 1 536 0
 1499 0038 0123     		movs	r3, #1
 1500 003a C0F87C31 		str	r3, [r0, #380]
 1501 003e 7047     		bx	lr
 1502              	.L104:
 1503              	.LCFI33:
 1504              		.cfi_def_cfa_offset 8
 1505              		.cfi_offset 4, -8
 1506              		.cfi_offset 5, -4
 538:../Src/main.c **** 
 1507              		.loc 1 538 0
 1508 0040 30BC     		pop	{r4, r5}
 1509              	.LCFI34:
 1510              		.cfi_restore 5
 1511              		.cfi_restore 4
 1512              		.cfi_def_cfa_offset 0
 1513 0042 7047     		bx	lr
 1514              	.L111:
 1515              		.align	2
 1516              	.L110:
 1517 0044 00000000 		.word	.LANCHOR4
 1518              		.cfi_endproc
 1519              	.LFE122:
 1521              		.section	.text.blink_led,"ax",%progbits
 1522              		.align	2
 1523              		.global	blink_led
 1524              		.thumb
 1525              		.thumb_func
 1527              	blink_led:
 1528              	.LFB123:
 540:../Src/main.c ****     if (*compteur == 6){                       /////modification toutes les 6 mesures correctes du 
 1529              		.loc 1 540 0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533              	.LVL126:
 541:../Src/main.c ****         HAL_TIM_Base_Stop_IT(&htim3);
 1534              		.loc 1 541 0
 1535 0000 0B68     		ldr	r3, [r1]
 1536 0002 062B     		cmp	r3, #6
 1537 0004 12D1     		bne	.L115
 540:../Src/main.c ****     if (*compteur == 6){                       /////modification toutes les 6 mesures correctes du 
 1538              		.loc 1 540 0
 1539 0006 70B5     		push	{r4, r5, r6, lr}
 1540              	.LCFI35:
ARM GAS  /tmp/ccWHtB6g.s 			page 53


 1541              		.cfi_def_cfa_offset 16
 1542              		.cfi_offset 4, -16
 1543              		.cfi_offset 5, -12
 1544              		.cfi_offset 6, -8
 1545              		.cfi_offset 14, -4
 1546 0008 0D46     		mov	r5, r1
 1547 000a 0446     		mov	r4, r0
 542:../Src/main.c ****         htim3.Instance->ARR = 2*valeur-1+20;   /////modification de la periode du capteur (voir wik
 1548              		.loc 1 542 0
 1549 000c 084E     		ldr	r6, .L116
 1550 000e 3046     		mov	r0, r6
 1551              	.LVL127:
 1552 0010 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1553              	.LVL128:
 543:../Src/main.c ****         HAL_TIM_Base_Start_IT(&htim3);
 1554              		.loc 1 543 0
 1555 0014 3368     		ldr	r3, [r6]
 1556 0016 6000     		lsls	r0, r4, #1
 1557 0018 1330     		adds	r0, r0, #19
 1558 001a D862     		str	r0, [r3, #44]
 544:../Src/main.c ****         htim3.Instance->CNT = 0;               /////remise a zero du timer de la led
 1559              		.loc 1 544 0
 1560 001c 3046     		mov	r0, r6
 1561 001e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1562              	.LVL129:
 545:../Src/main.c ****         *compteur = 0;                         /////remise a zero du compteur
 1563              		.loc 1 545 0
 1564 0022 3268     		ldr	r2, [r6]
 1565 0024 0023     		movs	r3, #0
 1566 0026 5362     		str	r3, [r2, #36]
 546:../Src/main.c ****     }
 1567              		.loc 1 546 0
 1568 0028 2B60     		str	r3, [r5]
 1569 002a 70BD     		pop	{r4, r5, r6, pc}
 1570              	.LVL130:
 1571              	.L115:
 1572              	.LCFI36:
 1573              		.cfi_def_cfa_offset 0
 1574              		.cfi_restore 4
 1575              		.cfi_restore 5
 1576              		.cfi_restore 6
 1577              		.cfi_restore 14
 1578 002c 7047     		bx	lr
 1579              	.L117:
 1580 002e 00BF     		.align	2
 1581              	.L116:
 1582 0030 00000000 		.word	htim3
 1583              		.cfi_endproc
 1584              	.LFE123:
 1586              		.section	.text.Variation2Angle_maison,"ax",%progbits
 1587              		.align	2
 1588              		.global	Variation2Angle_maison
 1589              		.thumb
 1590              		.thumb_func
 1592              	Variation2Angle_maison:
 1593              	.LFB124:
 584:../Src/main.c **** 		uint16_t position;
ARM GAS  /tmp/ccWHtB6g.s 			page 54


 1594              		.loc 1 584 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
 1598              	.LVL131:
 1599 0000 10B5     		push	{r4, lr}
 1600              	.LCFI37:
 1601              		.cfi_def_cfa_offset 8
 1602              		.cfi_offset 4, -8
 1603              		.cfi_offset 14, -4
 1604 0002 82B0     		sub	sp, sp, #8
 1605              	.LCFI38:
 1606              		.cfi_def_cfa_offset 16
 1607 0004 02AB     		add	r3, sp, #8
 1608 0006 03E90300 		stmdb	r3, {r0, r1}
 1609 000a 1446     		mov	r4, r2
 588:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 1610              		.loc 1 588 0
 1611 000c 1168     		ldr	r1, [r2]
 1612 000e B1F57A7F 		cmp	r1, #1000
 1613 0012 08D2     		bcs	.L119
 589:../Src/main.c **** 				*ptr_angle+=5;
 1614              		.loc 1 589 0
 1615 0014 6846     		mov	r0, sp
 1616 0016 89B2     		uxth	r1, r1
 1617 0018 0122     		movs	r2, #1
 1618              	.LVL132:
 1619 001a FFF7FEFF 		bl	XL_Set_Goal_Position
 1620              	.LVL133:
 590:../Src/main.c **** 		} else {
 1621              		.loc 1 590 0
 1622 001e 2368     		ldr	r3, [r4]
 1623 0020 0533     		adds	r3, r3, #5
 1624 0022 2360     		str	r3, [r4]
 1625 0024 05E0     		b	.L118
 1626              	.LVL134:
 1627              	.L119:
 592:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 1628              		.loc 1 592 0
 1629 0026 3221     		movs	r1, #50
 1630 0028 1160     		str	r1, [r2]
 593:../Src/main.c **** 		}
 1631              		.loc 1 593 0
 1632 002a 6846     		mov	r0, sp
 1633 002c 0122     		movs	r2, #1
 1634              	.LVL135:
 1635 002e FFF7FEFF 		bl	XL_Set_Goal_Position
 1636              	.LVL136:
 1637              	.L118:
 601:../Src/main.c **** 
 1638              		.loc 1 601 0
 1639 0032 02B0     		add	sp, sp, #8
 1640              	.LCFI39:
 1641              		.cfi_def_cfa_offset 8
 1642              		@ sp needed
 1643 0034 10BD     		pop	{r4, pc}
 1644              		.cfi_endproc
ARM GAS  /tmp/ccWHtB6g.s 			page 55


 1645              	.LFE124:
 1647 0036 00BF     		.section	.text.Variation3Angle_maison,"ax",%progbits
 1648              		.align	2
 1649              		.global	Variation3Angle_maison
 1650              		.thumb
 1651              		.thumb_func
 1653              	Variation3Angle_maison:
 1654              	.LFB125:
 603:../Src/main.c **** 		uint16_t position;
 1655              		.loc 1 603 0
 1656              		.cfi_startproc
 1657              		@ args = 4, pretend = 0, frame = 24
 1658              		@ frame_needed = 0, uses_anonymous_args = 0
 1659              	.LVL137:
 1660 0000 70B5     		push	{r4, r5, r6, lr}
 1661              	.LCFI40:
 1662              		.cfi_def_cfa_offset 16
 1663              		.cfi_offset 4, -16
 1664              		.cfi_offset 5, -12
 1665              		.cfi_offset 6, -8
 1666              		.cfi_offset 14, -4
 1667 0002 86B0     		sub	sp, sp, #24
 1668              	.LCFI41:
 1669              		.cfi_def_cfa_offset 40
 1670 0004 8DE80300 		stmia	sp, {r0, r1}
 1671 0008 1446     		mov	r4, r2
 1672 000a 1E46     		mov	r6, r3
 1673 000c 0A9D     		ldr	r5, [sp, #40]
 608:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 1674              		.loc 1 608 0
 1675 000e 1168     		ldr	r1, [r2]
 1676 0010 B1F57A7F 		cmp	r1, #1000
 1677 0014 08D2     		bcs	.L123
 609:../Src/main.c **** 				*ptr_angle+=5;
 1678              		.loc 1 609 0
 1679 0016 6846     		mov	r0, sp
 1680 0018 89B2     		uxth	r1, r1
 1681 001a 0122     		movs	r2, #1
 1682              	.LVL138:
 1683 001c FFF7FEFF 		bl	XL_Set_Goal_Position
 1684              	.LVL139:
 610:../Src/main.c **** 		} else {
 1685              		.loc 1 610 0
 1686 0020 2368     		ldr	r3, [r4]
 1687 0022 0533     		adds	r3, r3, #5
 1688 0024 2360     		str	r3, [r4]
 1689 0026 05E0     		b	.L124
 1690              	.LVL140:
 1691              	.L123:
 612:../Src/main.c **** 				XL_Set_Goal_Position(&servo, *ptr_angle, 1);
 1692              		.loc 1 612 0
 1693 0028 3221     		movs	r1, #50
 1694 002a 1160     		str	r1, [r2]
 613:../Src/main.c **** 		}
 1695              		.loc 1 613 0
 1696 002c 6846     		mov	r0, sp
 1697 002e 0122     		movs	r2, #1
ARM GAS  /tmp/ccWHtB6g.s 			page 56


 1698              	.LVL141:
 1699 0030 FFF7FEFF 		bl	XL_Set_Goal_Position
 1700              	.LVL142:
 1701              	.L124:
 615:../Src/main.c **** 		/*HAL_Delay(1000);
 1702              		.loc 1 615 0
 1703 0034 6846     		mov	r0, sp
 1704 0036 2188     		ldrh	r1, [r4]
 1705 0038 0122     		movs	r2, #1
 1706 003a FFF7FEFF 		bl	XL_Set_Goal_Position
 1707              	.LVL143:
 621:../Src/main.c **** 		XL_Get_Current_Position(&servo, &position);
 1708              		.loc 1 621 0
 1709 003e 0A20     		movs	r0, #10
 1710 0040 FFF7FEFF 		bl	HAL_Delay
 1711              	.LVL144:
 622:../Src/main.c **** 		HAL_Delay(Delay2);
 1712              		.loc 1 622 0
 1713 0044 6846     		mov	r0, sp
 1714 0046 0DF11601 		add	r1, sp, #22
 1715 004a FFF7FEFF 		bl	XL_Get_Current_Position
 1716              	.LVL145:
 623:../Src/main.c ****     if (*i<Maxi_char_transmit-1){                 /////ajout valeur, dans data
 1717              		.loc 1 623 0
 1718 004e 0A20     		movs	r0, #10
 1719 0050 FFF7FEFF 		bl	HAL_Delay
 1720              	.LVL146:
 624:../Src/main.c ****         sprintf(dataAngle, "%d,",position);
 1721              		.loc 1 624 0
 1722 0054 2B68     		ldr	r3, [r5]
 1723 0056 082B     		cmp	r3, #8
 1724 0058 06DC     		bgt	.L125
 625:../Src/main.c **** 				/*len=strlen(dataAngle);
 1725              		.loc 1 625 0
 1726 005a 03A8     		add	r0, sp, #12
 1727 005c 1A49     		ldr	r1, .L129
 1728 005e BDF81620 		ldrh	r2, [sp, #22]
 1729 0062 FFF7FEFF 		bl	sprintf
 1730              	.LVL147:
 1731 0066 07E0     		b	.L126
 1732              	.L125:
 628:../Src/main.c ****         sprintf(dataAngle, "%d",position);
 1733              		.loc 1 628 0
 1734 0068 092B     		cmp	r3, #9
 1735 006a 05D1     		bne	.L126
 629:../Src/main.c **** 				/*len=strlen(dataAngle);
 1736              		.loc 1 629 0
 1737 006c 03A8     		add	r0, sp, #12
 1738 006e 1749     		ldr	r1, .L129+4
 1739 0070 BDF81620 		ldrh	r2, [sp, #22]
 1740 0074 FFF7FEFF 		bl	sprintf
 1741              	.LVL148:
 1742              	.L126:
 633:../Src/main.c ****     if (*i==Maxi_char_transmit-1){
 1743              		.loc 1 633 0
 1744 0078 3046     		mov	r0, r6
 1745 007a 03A9     		add	r1, sp, #12
ARM GAS  /tmp/ccWHtB6g.s 			page 57


 1746 007c FFF7FEFF 		bl	strcat
 1747              	.LVL149:
 634:../Src/main.c ****         len=strlen(buffer);                       /////longueur du buffer
 1748              		.loc 1 634 0
 1749 0080 2B68     		ldr	r3, [r5]
 1750 0082 092B     		cmp	r3, #9
 1751 0084 1DD1     		bne	.L122
 635:../Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t*)(buffer), len, 1000); /////transmission du buffer
 1752              		.loc 1 635 0
 1753 0086 3046     		mov	r0, r6
 1754 0088 FFF7FEFF 		bl	strlen
 1755              	.LVL150:
 636:../Src/main.c ****         sprintf(ligne, "\n");                                     /////ajout \n a ligne
 1756              		.loc 1 636 0
 1757 008c 104C     		ldr	r4, .L129+8
 1758              	.LVL151:
 1759 008e 82B2     		uxth	r2, r0
 1760 0090 2046     		mov	r0, r4
 1761              	.LVL152:
 1762 0092 3146     		mov	r1, r6
 1763 0094 4FF47A73 		mov	r3, #1000
 1764 0098 FFF7FEFF 		bl	HAL_UART_Transmit
 1765              	.LVL153:
 637:../Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t*)ligne, 1, 1000);     /////transmission pour cloturer l
 1766              		.loc 1 637 0
 1767 009c 06A9     		add	r1, sp, #24
 1768 009e 0A23     		movs	r3, #10
 1769 00a0 21F8103D 		strh	r3, [r1, #-16]!	@ movhi
 638:../Src/main.c ****         (*i)=-1;                                                  /////remise a zero du compteur
 1770              		.loc 1 638 0
 1771 00a4 2046     		mov	r0, r4
 1772 00a6 0122     		movs	r2, #1
 1773 00a8 4FF47A73 		mov	r3, #1000
 1774 00ac FFF7FEFF 		bl	HAL_UART_Transmit
 1775              	.LVL154:
 639:../Src/main.c ****         sprintf(buffer, "");                                      /////remise a zero du buffer
 1776              		.loc 1 639 0
 1777 00b0 4FF0FF33 		mov	r3, #-1
 1778 00b4 2B60     		str	r3, [r5]
 640:../Src/main.c ****         HAL_Delay(Delay);         //////necessaire pour le graphique
 1779              		.loc 1 640 0
 1780 00b6 0023     		movs	r3, #0
 1781 00b8 3370     		strb	r3, [r6]
 641:../Src/main.c ****     }
 1782              		.loc 1 641 0
 1783 00ba 4FF47A70 		mov	r0, #1000
 1784 00be FFF7FEFF 		bl	HAL_Delay
 1785              	.LVL155:
 1786              	.L122:
 643:../Src/main.c **** 
 1787              		.loc 1 643 0
 1788 00c2 06B0     		add	sp, sp, #24
 1789              	.LCFI42:
 1790              		.cfi_def_cfa_offset 16
 1791              		@ sp needed
 1792 00c4 70BD     		pop	{r4, r5, r6, pc}
 1793              	.LVL156:
ARM GAS  /tmp/ccWHtB6g.s 			page 58


 1794              	.L130:
 1795 00c6 00BF     		.align	2
 1796              	.L129:
 1797 00c8 18000000 		.word	.LC4
 1798 00cc 1C000000 		.word	.LC5
 1799 00d0 00000000 		.word	huart2
 1800              		.cfi_endproc
 1801              	.LFE125:
 1803              		.section	.text.RangeDemo,"ax",%progbits
 1804              		.align	2
 1805              		.global	RangeDemo
 1806              		.thumb
 1807              		.thumb_func
 1809              	RangeDemo:
 1810              	.LFB126:
 669:../Src/main.c ****     int over=0;
 1811              		.loc 1 669 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 80
 1814              		@ frame_needed = 0, uses_anonymous_args = 0
 1815              	.LVL157:
 1816 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1817              	.LCFI43:
 1818              		.cfi_def_cfa_offset 28
 1819              		.cfi_offset 4, -28
 1820              		.cfi_offset 5, -24
 1821              		.cfi_offset 6, -20
 1822              		.cfi_offset 7, -16
 1823              		.cfi_offset 8, -12
 1824              		.cfi_offset 9, -8
 1825              		.cfi_offset 14, -4
 1826 0004 97B0     		sub	sp, sp, #92
 1827              	.LCFI44:
 1828              		.cfi_def_cfa_offset 120
 1829 0006 0546     		mov	r5, r0
 1830 0008 02A8     		add	r0, sp, #8
 1831              	.LVL158:
 1832 000a 80E80C00 		stmia	r0, {r2, r3}
 1833              	.LVL159:
 679:../Src/main.c ****     int* ptr_compteur_blink = NULL;   ///creation pointeur sur compteur
 1834              		.loc 1 679 0
 1835 000e 0024     		movs	r4, #0
 1836 0010 1394     		str	r4, [sp, #76]
 1837              	.LVL160:
 682:../Src/main.c ****     int* ptr_compteur = NULL;   ///creation pointeur sur compteur
 1838              		.loc 1 682 0
 1839 0012 1294     		str	r4, [sp, #72]
 1840              	.LVL161:
 689:../Src/main.c **** 		int angle=10;              ////creation
 1841              		.loc 1 689 0
 1842 0014 8DF81440 		strb	r4, [sp, #20]
 690:../Src/main.c **** 	  int* ptr_angle = &angle;
 1843              		.loc 1 690 0
 1844 0018 0A23     		movs	r3, #10
 1845 001a 0493     		str	r3, [sp, #16]
 1846              	.LVL162:
 694:../Src/main.c **** 
ARM GAS  /tmp/ccWHtB6g.s 			page 59


 1847              		.loc 1 694 0
 1848 001c 0846     		mov	r0, r1
 1849 001e FFF7FEFF 		bl	SetupSingleShot
 1850              	.LVL163:
 676:../Src/main.c ****     int distance;     ///creation variable distance
 1851              		.loc 1 676 0
 1852 0022 2746     		mov	r7, r4
 698:../Src/main.c ****         if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 1853              		.loc 1 698 0
 1854 0024 2646     		mov	r6, r4
 1855 0026 2346     		mov	r3, r4
 1856 0028 11E0     		b	.L132
 1857              	.LVL164:
 1858              	.L134:
 699:../Src/main.c ****             nSensorToUse++;
 1859              		.loc 1 699 0
 1860 002a 45FA03F2 		asr	r2, r5, r3
 1861 002e 12F0010F 		tst	r2, #1
 1862 0032 0BD0     		beq	.L133
 699:../Src/main.c ****             nSensorToUse++;
 1863              		.loc 1 699 0 is_stmt 0 discriminator 1
 1864 0034 4FF4C872 		mov	r2, #400
 1865 0038 5349     		ldr	r1, .L148
 1866 003a 02FB0312 		mla	r2, r2, r3, r1
 1867 003e D2F86821 		ldr	r2, [r2, #360]
 1868 0042 1AB1     		cbz	r2, .L133
 700:../Src/main.c ****             if( nSensorToUse==1 )
 1869              		.loc 1 700 0 is_stmt 1
 1870 0044 0136     		adds	r6, r6, #1
 1871              	.LVL165:
 701:../Src/main.c ****                 SingleSensorNo=i;
 1872              		.loc 1 701 0
 1873 0046 012E     		cmp	r6, #1
 1874 0048 00D1     		bne	.L133
 702:../Src/main.c ****         }
 1875              		.loc 1 702 0
 1876 004a 1F46     		mov	r7, r3
 1877              	.LVL166:
 1878              	.L133:
 698:../Src/main.c ****         if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 1879              		.loc 1 698 0 discriminator 2
 1880 004c 0133     		adds	r3, r3, #1
 1881              	.LVL167:
 1882              	.L132:
 698:../Src/main.c ****         if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 1883              		.loc 1 698 0 is_stmt 0 discriminator 1
 1884 004e 022B     		cmp	r3, #2
 1885 0050 EBDD     		ble	.L134
 705:../Src/main.c ****         return -1;
 1886              		.loc 1 705 0 is_stmt 1
 1887 0052 002E     		cmp	r6, #0
 1888 0054 00F09280 		beq	.L146
 1889              	.LVL168:
 1890              	.L144:
 712:../Src/main.c ****         	/* Multiple devices */
 1891              		.loc 1 712 0
 1892 0058 012E     		cmp	r6, #1
ARM GAS  /tmp/ccWHtB6g.s 			page 60


 1893 005a 32DD     		ble	.L136
 714:../Src/main.c ****             for( i=0; i<3; i++){
 1894              		.loc 1 714 0
 1895 005c 4B4B     		ldr	r3, .L148+4
 1896 005e 93E80300 		ldmia	r3, {r0, r1}
 1897 0062 1490     		str	r0, [sp, #80]
 1898 0064 8DF85410 		strb	r1, [sp, #84]
 1899              	.LVL169:
 715:../Src/main.c ****                 if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 1900              		.loc 1 715 0
 1901 0068 0024     		movs	r4, #0
 1902 006a 27E0     		b	.L137
 1903              	.LVL170:
 1904              	.L140:
 716:../Src/main.c ****                     continue;
 1905              		.loc 1 716 0
 1906 006c 4FF4C873 		mov	r3, #400
 1907 0070 454A     		ldr	r2, .L148
 1908 0072 03FB0423 		mla	r3, r3, r4, r2
 1909 0076 D3F86831 		ldr	r3, [r3, #360]
 1910 007a F3B1     		cbz	r3, .L138
 716:../Src/main.c ****                     continue;
 1911              		.loc 1 716 0 is_stmt 0 discriminator 1
 1912 007c 45FA04F3 		asr	r3, r5, r4
 1913 0080 13F0010F 		tst	r3, #1
 1914 0084 19D0     		beq	.L138
 719:../Src/main.c ****                 if( status ){
 1915              		.loc 1 719 0 is_stmt 1
 1916 0086 4FF4C873 		mov	r3, #400
 1917 008a 03FB0428 		mla	r8, r3, r4, r2
 1918 008e 4046     		mov	r0, r8
 1919 0090 3F49     		ldr	r1, .L148+8
 1920 0092 FFF7FEFF 		bl	VL53L0X_PerformSingleRangingMeasurement
 1921              	.LVL171:
 720:../Src/main.c ****                     HandleError(ERR_DEMO_RANGE_MULTI);
 1922              		.loc 1 720 0
 1923 0096 10B1     		cbz	r0, .L139
 721:../Src/main.c ****                 }
 1924              		.loc 1 721 0
 1925 0098 0220     		movs	r0, #2
 1926              	.LVL172:
 1927 009a FFF7FEFF 		bl	HandleError
 1928              	.LVL173:
 1929              	.L139:
 726:../Src/main.c ****                 /* Translate distance in bar graph (multiple device) */
 1930              		.loc 1 726 0
 1931 009e DFF8F090 		ldr	r9, .L148+8
 1932 00a2 4046     		mov	r0, r8
 1933              	.LVL174:
 1934 00a4 4946     		mov	r1, r9
 1935 00a6 FFF7FEFF 		bl	Sensor_SetNewRange
 1936              	.LVL175:
 728:../Src/main.c ****                 StrDisplay[i+1]=c;
 1937              		.loc 1 728 0
 1938 00aa 4046     		mov	r0, r8
 1939 00ac 4946     		mov	r1, r9
 1940 00ae FFF7FEFF 		bl	RangeToLetter
ARM GAS  /tmp/ccWHtB6g.s 			page 61


 1941              	.LVL176:
 729:../Src/main.c ****             }
 1942              		.loc 1 729 0
 1943 00b2 16AB     		add	r3, sp, #88
 1944 00b4 2344     		add	r3, r3, r4
 1945 00b6 03F8070C 		strb	r0, [r3, #-7]
 1946              	.LVL177:
 1947              	.L138:
 715:../Src/main.c ****                 if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 1948              		.loc 1 715 0 discriminator 2
 1949 00ba 0134     		adds	r4, r4, #1
 1950              	.LVL178:
 1951              	.L137:
 715:../Src/main.c ****                 if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 1952              		.loc 1 715 0 is_stmt 0 discriminator 1
 1953 00bc 022C     		cmp	r4, #2
 1954 00be D5DD     		ble	.L140
 1955 00c0 4DE0     		b	.L141
 1956              	.LVL179:
 1957              	.L136:
 735:../Src/main.c ****             if( status ==0 ){
 1958              		.loc 1 735 0 is_stmt 1
 1959 00c2 4FF4C873 		mov	r3, #400
 1960 00c6 304C     		ldr	r4, .L148
 1961 00c8 03FB0744 		mla	r4, r3, r7, r4
 1962 00cc 2046     		mov	r0, r4
 1963 00ce 3049     		ldr	r1, .L148+8
 1964 00d0 FFF7FEFF 		bl	VL53L0X_PerformSingleRangingMeasurement
 1965              	.LVL180:
 736:../Src/main.c ****             	/* Push data logging to UART */
 1966              		.loc 1 736 0
 1967 00d4 0028     		cmp	r0, #0
 1968 00d6 3FD1     		bne	.L142
 739:../Src/main.c ****                 /* Display distance in cm */
 1969              		.loc 1 739 0
 1970 00d8 DFF8B480 		ldr	r8, .L148+8
 1971 00dc 2046     		mov	r0, r4
 1972              	.LVL181:
 1973 00de 4146     		mov	r1, r8
 1974 00e0 FFF7FEFF 		bl	Sensor_SetNewRange
 1975              	.LVL182:
 741:../Src/main.c ****                     *ptr_compteur_blink+=1;                      /////incrementation du compteur
 1976              		.loc 1 741 0
 1977 00e4 98F81830 		ldrb	r3, [r8, #24]	@ zero_extendqisi2
 1978 00e8 33BB     		cbnz	r3, .L143
 742:../Src/main.c ****                     sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[SingleSensorNo].LeakyRange/10);  //
 1979              		.loc 1 742 0
 1980 00ea 139B     		ldr	r3, [sp, #76]
 1981 00ec 0133     		adds	r3, r3, #1
 1982 00ee 1393     		str	r3, [sp, #76]
 743:../Src/main.c ****                     distance = (int)VL53L0XDevs[SingleSensorNo].LeakyRange/10;   /////distance lue 
 1983              		.loc 1 743 0
 1984 00f0 A046     		mov	r8, r4
 1985 00f2 D4F87831 		ldr	r3, [r4, #376]
 1986 00f6 274C     		ldr	r4, .L148+12
 1987 00f8 84FB0312 		smull	r1, r2, r4, r3
 1988 00fc DB17     		asrs	r3, r3, #31
ARM GAS  /tmp/ccWHtB6g.s 			page 62


 1989 00fe 14A8     		add	r0, sp, #80
 1990 0100 2549     		ldr	r1, .L148+16
 1991 0102 C3EBA202 		rsb	r2, r3, r2, asr #2
 1992 0106 FFF7FEFF 		bl	sprintf
 1993              	.LVL183:
 744:../Src/main.c ****                     //XL_Get_Current_Position(servo, &angle); necessaire ?
 1994              		.loc 1 744 0
 1995 010a D8F87831 		ldr	r3, [r8, #376]
 1996 010e 84FB0320 		smull	r2, r0, r4, r3
 1997 0112 DB17     		asrs	r3, r3, #31
 1998              	.LVL184:
 746:../Src/main.c **** 										Variation3Angle_maison(servo, ptr_angle, buffer1, ptr_compteur);
 1999              		.loc 1 746 0
 2000 0114 C3EBA000 		rsb	r0, r3, r0, asr #2
 2001              	.LVL185:
 2002 0118 13A9     		add	r1, sp, #76
 2003              	.LVL186:
 2004 011a FFF7FEFF 		bl	blink_led
 2005              	.LVL187:
 747:../Src/main.c ****                     //transmit(compteur2, buffer, buffer1, distance, angle);        /////fonction t
 2006              		.loc 1 747 0
 2007 011e 12AB     		add	r3, sp, #72
 2008              	.LVL188:
 2009 0120 0093     		str	r3, [sp]
 2010 0122 02AB     		add	r3, sp, #8
 2011              	.LVL189:
 2012 0124 93E80300 		ldmia	r3, {r0, r1}
 2013 0128 04AA     		add	r2, sp, #16
 2014              	.LVL190:
 2015 012a 05AB     		add	r3, sp, #20
 2016 012c FFF7FEFF 		bl	Variation3Angle_maison
 2017              	.LVL191:
 749:../Src/main.c **** 
 2018              		.loc 1 749 0
 2019 0130 129B     		ldr	r3, [sp, #72]
 2020 0132 0133     		adds	r3, r3, #1
 2021 0134 1293     		str	r3, [sp, #72]
 2022 0136 12E0     		b	.L141
 2023              	.L143:
 762:../Src/main.c ****                     StrDisplay[0]=VL53L0XDevs[SingleSensorNo].DevLetter;
 2024              		.loc 1 762 0
 2025 0138 184B     		ldr	r3, .L148+20
 2026 013a 93E80300 		ldmia	r3, {r0, r1}
 2027 013e 1490     		str	r0, [sp, #80]
 2028 0140 8DF85410 		strb	r1, [sp, #84]
 763:../Src/main.c ****                     //HAL_TIM_Base_Stop_IT(&htim3);             /////version courante : memoire de 
 2029              		.loc 1 763 0
 2030 0144 4FF4C873 		mov	r3, #400
 2031 0148 0F4A     		ldr	r2, .L148
 2032 014a 03FB0723 		mla	r3, r3, r7, r2
 2033 014e 93F86131 		ldrb	r3, [r3, #353]	@ zero_extendqisi2
 2034 0152 8DF85030 		strb	r3, [sp, #80]
 2035 0156 02E0     		b	.L141
 2036              	.LVL192:
 2037              	.L142:
 770:../Src/main.c ****             }
 2038              		.loc 1 770 0
ARM GAS  /tmp/ccWHtB6g.s 			page 63


 2039 0158 0120     		movs	r0, #1
 2040              	.LVL193:
 2041 015a FFF7FEFF 		bl	HandleError
 2042              	.LVL194:
 2043              	.L141:
 773:../Src/main.c ****         /* Check blue button */
 2044              		.loc 1 773 0
 2045 015e 14A8     		add	r0, sp, #80
 2046 0160 FFF7FEFF 		bl	XNUCLEO53L0A1_SetDisplayString
 2047              	.LVL195:
 775:../Src/main.c ****             over=1;
 2048              		.loc 1 775 0
 2049 0164 FFF7FEFF 		bl	BSP_GetPushButton
 2050              	.LVL196:
 2051 0168 0028     		cmp	r0, #0
 2052 016a 7FF475AF 		bne	.L144
 781:../Src/main.c ****     htim3.Instance->CNT=0;       /////remise a zero du timer de la led
 2053              		.loc 1 781 0
 2054 016e FFF7FEFF 		bl	PusbButton_WaitUnPress
 2055              	.LVL197:
 782:../Src/main.c ****     return status;
 2056              		.loc 1 782 0
 2057 0172 0B4B     		ldr	r3, .L148+24
 2058 0174 1B68     		ldr	r3, [r3]
 2059 0176 0022     		movs	r2, #0
 2060 0178 5A62     		str	r2, [r3, #36]
 783:../Src/main.c **** }
 2061              		.loc 1 783 0
 2062 017a 01E0     		b	.L135
 2063              	.LVL198:
 2064              	.L146:
 706:../Src/main.c ****     }
 2065              		.loc 1 706 0
 2066 017c 4FF0FF30 		mov	r0, #-1
 2067              	.LVL199:
 2068              	.L135:
 784:../Src/main.c **** 
 2069              		.loc 1 784 0
 2070 0180 17B0     		add	sp, sp, #92
 2071              	.LCFI45:
 2072              		.cfi_def_cfa_offset 28
 2073              		@ sp needed
 2074 0182 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2075              	.LVL200:
 2076              	.L149:
 2077 0186 00BF     		.align	2
 2078              	.L148:
 2079 0188 00000000 		.word	.LANCHOR1
 2080 018c 10000000 		.word	.LC3
 2081 0190 00000000 		.word	RangingMeasurementData
 2082 0194 67666666 		.word	1717986919
 2083 0198 20000000 		.word	.LC6
 2084 019c 28000000 		.word	.LC7
 2085 01a0 00000000 		.word	htim3
 2086              		.cfi_endproc
 2087              	.LFE126:
 2089              		.section	.text.ResetAndDetectSensor,"ax",%progbits
ARM GAS  /tmp/ccWHtB6g.s 			page 64


 2090              		.align	2
 2091              		.global	ResetAndDetectSensor
 2092              		.thumb
 2093              		.thumb_func
 2095              	ResetAndDetectSensor:
 2096              	.LFB127:
 912:../Src/main.c ****     int nSensor;
 2097              		.loc 1 912 0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 0
 2100              		@ frame_needed = 0, uses_anonymous_args = 0
 2101              	.LVL201:
 2102 0000 08B5     		push	{r3, lr}
 2103              	.LCFI46:
 2104              		.cfi_def_cfa_offset 8
 2105              		.cfi_offset 3, -8
 2106              		.cfi_offset 14, -4
 914:../Src/main.c ****     /* at least one sensor and if one it must be the built-in one  */
 2107              		.loc 1 914 0
 2108 0002 FFF7FEFF 		bl	DetectSensors
 2109              	.LVL202:
 916:../Src/main.c ****         HandleError(ERR_DETECT);
 2110              		.loc 1 916 0
 2111 0006 0028     		cmp	r0, #0
 2112 0008 05DD     		ble	.L151
 916:../Src/main.c ****         HandleError(ERR_DETECT);
 2113              		.loc 1 916 0 is_stmt 0 discriminator 1
 2114 000a 0128     		cmp	r0, #1
 2115 000c 07D1     		bne	.L150
 916:../Src/main.c ****         HandleError(ERR_DETECT);
 2116              		.loc 1 916 0 discriminator 2
 2117 000e 044B     		ldr	r3, .L154
 2118 0010 D3F8F832 		ldr	r3, [r3, #760]
 2119 0014 1BB9     		cbnz	r3, .L150
 2120              	.L151:
 917:../Src/main.c ****     }
 2121              		.loc 1 917 0 is_stmt 1
 2122 0016 4FF0FF30 		mov	r0, #-1
 2123              	.LVL203:
 2124 001a FFF7FEFF 		bl	HandleError
 2125              	.LVL204:
 2126              	.L150:
 2127 001e 08BD     		pop	{r3, pc}
 2128              	.L155:
 2129              		.align	2
 2130              	.L154:
 2131 0020 00000000 		.word	.LANCHOR1
 2132              		.cfi_endproc
 2133              	.LFE127:
 2135              		.section	.text.main,"ax",%progbits
 2136              		.align	2
 2137              		.global	main
 2138              		.thumb
 2139              		.thumb_func
 2141              	main:
 2142              	.LFB132:
 944:../Src/main.c **** 
ARM GAS  /tmp/ccWHtB6g.s 			page 65


 2143              		.loc 1 944 0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 24
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 2147 0000 70B5     		push	{r4, r5, r6, lr}
 2148              	.LCFI47:
 2149              		.cfi_def_cfa_offset 16
 2150              		.cfi_offset 4, -16
 2151              		.cfi_offset 5, -12
 2152              		.cfi_offset 6, -8
 2153              		.cfi_offset 14, -4
 2154 0002 86B0     		sub	sp, sp, #24
 2155              	.LCFI48:
 2156              		.cfi_def_cfa_offset 40
 2157              	.LVL205:
 956:../Src/main.c **** 
 2158              		.loc 1 956 0
 2159 0004 FFF7FEFF 		bl	HAL_Init
 2160              	.LVL206:
 959:../Src/main.c **** 
 2161              		.loc 1 959 0
 2162 0008 FFF7FEFF 		bl	SystemClock_Config
 2163              	.LVL207:
 962:../Src/main.c ****   SystemClock_Config();
 2164              		.loc 1 962 0
 2165 000c FFF7FEFF 		bl	MX_GPIO_Init
 2166              	.LVL208:
 963:../Src/main.c ****   MX_I2C1_Init();
 2167              		.loc 1 963 0
 2168 0010 FFF7FEFF 		bl	SystemClock_Config
 2169              	.LVL209:
 964:../Src/main.c ****   MX_TIM3_Init();
 2170              		.loc 1 964 0
 2171 0014 FFF7FEFF 		bl	MX_I2C1_Init
 2172              	.LVL210:
 965:../Src/main.c ****   MX_USART2_UART_Init();
 2173              		.loc 1 965 0
 2174 0018 FFF7FEFF 		bl	MX_TIM3_Init
 2175              	.LVL211:
 966:../Src/main.c ****   MX_USART1_UART_Init();
 2176              		.loc 1 966 0
 2177 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 2178              	.LVL212:
 967:../Src/main.c **** 
 2179              		.loc 1 967 0
 2180 0020 FFF7FEFF 		bl	MX_USART1_UART_Init
 2181              	.LVL213:
 970:../Src/main.c ****   uart_printf(WelcomeMsg);
 2182              		.loc 1 970 0
 2183 0024 FFF7FEFF 		bl	XNUCLEO53L0A1_Init
 2184              	.LVL214:
 972:../Src/main.c ****   HAL_Delay(WelcomeTime);
 2185              		.loc 1 972 0
 2186 0028 3448     		ldr	r0, .L165
 2187 002a FFF7FEFF 		bl	XNUCLEO53L0A1_SetDisplayString
 2188              	.LVL215:
 973:../Src/main.c ****   ResetAndDetectSensor(1);
ARM GAS  /tmp/ccWHtB6g.s 			page 66


 2189              		.loc 1 973 0
 2190 002e 4FF42570 		mov	r0, #660
 2191 0032 FFF7FEFF 		bl	HAL_Delay
 2192              	.LVL216:
 974:../Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3); //£
 2193              		.loc 1 974 0
 2194 0036 0120     		movs	r0, #1
 2195 0038 FFF7FEFF 		bl	ResetAndDetectSensor
 2196              	.LVL217:
 975:../Src/main.c **** 
 2197              		.loc 1 975 0
 2198 003c 3048     		ldr	r0, .L165+4
 2199 003e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2200              	.LVL218:
 982:../Src/main.c ****   interface.set_direction = XL_320_Set_Direction_HAL;
 2201              		.loc 1 982 0
 2202 0042 304D     		ldr	r5, .L165+8
 2203 0044 304B     		ldr	r3, .L165+12
 2204 0046 2B60     		str	r3, [r5]
 983:../Src/main.c ****   interface.receive = XL_320_Receive_HAL;
 2205              		.loc 1 983 0
 2206 0048 304B     		ldr	r3, .L165+16
 2207 004a AB60     		str	r3, [r5, #8]
 984:../Src/main.c ****   interface.delay = XL_320_Delay_HAL;
 2208              		.loc 1 984 0
 2209 004c 304B     		ldr	r3, .L165+20
 2210 004e 6B60     		str	r3, [r5, #4]
 985:../Src/main.c **** 
 2211              		.loc 1 985 0
 2212 0050 304B     		ldr	r3, .L165+24
 2213 0052 EB60     		str	r3, [r5, #12]
 987:../Src/main.c **** 
 2214              		.loc 1 987 0
 2215 0054 4FF47A70 		mov	r0, #1000
 2216 0058 FFF7FEFF 		bl	HAL_Delay
 2217              	.LVL219:
 989:../Src/main.c **** 
 2218              		.loc 1 989 0
 2219 005c 2E4B     		ldr	r3, .L165+28
 2220 005e 04AE     		add	r6, sp, #16
 2221 0060 93E80300 		ldmia	r3, {r0, r1}
 2222 0064 86E80300 		stmia	r6, {r0, r1}
 992:../Src/main.c ****   /*int compteurAngle=100;      //compteur de variation d'angle*/
 2223              		.loc 1 992 0
 2224 0068 0024     		movs	r4, #0
 2225 006a ADF80640 		strh	r4, [sp, #6]	@ movhi
 995:../Src/main.c ****   #if CONFIG==1
 2226              		.loc 1 995 0
 2227 006e 2846     		mov	r0, r5
 2228 0070 02A9     		add	r1, sp, #8
 2229 0072 0122     		movs	r2, #1
 2230 0074 0DF10603 		add	r3, sp, #6
 2231 0078 FFF7FEFF 		bl	XL_Discover
 2232              	.LVL220:
 999:../Src/main.c ****   HAL_Delay(1000);
 2233              		.loc 1 999 0
 2234 007c 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccWHtB6g.s 			page 67


 2235 007e FFF7FEFF 		bl	XL_Say_Hello
 2236              	.LVL221:
1000:../Src/main.c ****   XL_Power_On(&broadcast, XL_NOW);
 2237              		.loc 1 1000 0
 2238 0082 4FF47A70 		mov	r0, #1000
 2239 0086 FFF7FEFF 		bl	HAL_Delay
 2240              	.LVL222:
1001:../Src/main.c ****   /* USER CODE END 2 */
 2241              		.loc 1 1001 0
 2242 008a 3046     		mov	r0, r6
 2243 008c 0121     		movs	r1, #1
 2244 008e FFF7FEFF 		bl	XL_Power_On
 2245              	.LVL223:
 950:../Src/main.c ****   /* USER CODE END 1 */
 2246              		.loc 1 950 0
 2247 0092 0226     		movs	r6, #2
 949:../Src/main.c ****   int UseSensorsMask = 1<<XNUCLEO53L0A1_DEV_CENTER;
 2248              		.loc 1 949 0
 2249 0094 2546     		mov	r5, r4
 2250 0096 02E0     		b	.L157
 2251              	.LVL224:
 2252              	.L161:
1055:../Src/main.c ****     	  }
 2253              		.loc 1 1055 0
 2254 0098 0226     		movs	r6, #2
 2255              	.LVL225:
 2256 009a 00E0     		b	.L157
 2257              	.LVL226:
 2258              	.L162:
1059:../Src/main.c ****       }
 2259              		.loc 1 1059 0
 2260 009c 0124     		movs	r4, #1
 2261              	.LVL227:
 2262              	.L157:
1011:../Src/main.c ****       HAL_Delay(ModeChangeDispTime);
 2263              		.loc 1 1011 0
 2264 009e 1F4B     		ldr	r3, .L165+32
 2265 00a0 53F82500 		ldr	r0, [r3, r5, lsl #2]
 2266 00a4 FFF7FEFF 		bl	XNUCLEO53L0A1_SetDisplayString
 2267              	.LVL228:
1012:../Src/main.c **** 
 2268              		.loc 1 1012 0
 2269 00a8 4FF4FA70 		mov	r0, #500
 2270 00ac FFF7FEFF 		bl	HAL_Delay
 2271              	.LVL229:
1015:../Src/main.c **** 	  HAL_Delay(ModeChangeDispTime);
 2272              		.loc 1 1015 0
 2273 00b0 1B4B     		ldr	r3, .L165+36
 2274 00b2 53F82400 		ldr	r0, [r3, r4, lsl #2]
 2275 00b6 FFF7FEFF 		bl	XNUCLEO53L0A1_SetDisplayString
 2276              	.LVL230:
1016:../Src/main.c **** 
 2277              		.loc 1 1016 0
 2278 00ba 4FF4FA70 		mov	r0, #500
 2279 00be FFF7FEFF 		bl	HAL_Delay
 2280              	.LVL231:
1019:../Src/main.c **** 
ARM GAS  /tmp/ccWHtB6g.s 			page 68


 2281              		.loc 1 1019 0
 2282 00c2 0020     		movs	r0, #0
 2283 00c4 FFF7FEFF 		bl	ResetAndDetectSensor
 2284              	.LVL232:
1022:../Src/main.c **** 
 2285              		.loc 1 1022 0
 2286 00c8 FFF7FEFF 		bl	TimeStamp_Reset
 2287              	.LVL233:
1047:../Src/main.c **** 
 2288              		.loc 1 1047 0
 2289 00cc 3046     		mov	r0, r6
 2290 00ce 2146     		mov	r1, r4
 2291 00d0 02AB     		add	r3, sp, #8
 2292 00d2 0CCB     		ldmia	r3, {r2, r3}
 2293 00d4 FFF7FEFF 		bl	RangeDemo
 2294              	.LVL234:
1050:../Src/main.c ****     	  /* Long press : change demo mode if multiple sensors present*/
 2295              		.loc 1 1050 0
 2296 00d8 40B1     		cbz	r0, .L158
1052:../Src/main.c ****     		  /* If more than one sensor is present then toggle demo mode */
 2297              		.loc 1 1052 0
 2298 00da 124B     		ldr	r3, .L165+40
 2299 00dc 1B68     		ldr	r3, [r3]
 2300 00de 012B     		cmp	r3, #1
 2301 00e0 DDDD     		ble	.L157
 2302              	.LVL235:
1055:../Src/main.c ****     	  }
 2303              		.loc 1 1055 0
 2304 00e2 95F00105 		eors	r5, r5, #1
 2305              	.LVL236:
 2306 00e6 D7D0     		beq	.L161
 2307 00e8 0726     		movs	r6, #7
 2308              	.LVL237:
 2309 00ea D8E7     		b	.L157
 2310              	.LVL238:
 2311              	.L158:
1059:../Src/main.c ****       }
 2312              		.loc 1 1059 0
 2313 00ec 002C     		cmp	r4, #0
 2314 00ee D5D0     		beq	.L162
1059:../Src/main.c ****       }
 2315              		.loc 1 1059 0 is_stmt 0 discriminator 1
 2316 00f0 012C     		cmp	r4, #1
 2317 00f2 01D1     		bne	.L163
1059:../Src/main.c ****       }
 2318              		.loc 1 1059 0
 2319 00f4 0224     		movs	r4, #2
 2320              	.LVL239:
 2321 00f6 D2E7     		b	.L157
 2322              	.LVL240:
 2323              	.L163:
 2324 00f8 0024     		movs	r4, #0
 2325              	.LVL241:
 2326 00fa D0E7     		b	.L157
 2327              	.L166:
 2328              		.align	2
 2329              	.L165:
ARM GAS  /tmp/ccWHtB6g.s 			page 69


 2330 00fc 30000000 		.word	.LC8
 2331 0100 00000000 		.word	htim3
 2332 0104 00000000 		.word	interface
 2333 0108 00000000 		.word	XL_320_Send_HAL
 2334 010c 00000000 		.word	XL_320_Set_Direction_HAL
 2335 0110 00000000 		.word	XL_320_Receive_HAL
 2336 0114 00000000 		.word	XL_320_Delay_HAL
 2337 0118 00000000 		.word	.LANCHOR5
 2338 011c 00000000 		.word	.LANCHOR6
 2339 0120 00000000 		.word	.LANCHOR7
 2340 0124 00000000 		.word	.LANCHOR0
 2341              		.cfi_endproc
 2342              	.LFE132:
 2344              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 2345              		.align	2
 2346              		.global	HAL_TIM_PeriodElapsedCallback
 2347              		.thumb
 2348              		.thumb_func
 2350              	HAL_TIM_PeriodElapsedCallback:
 2351              	.LFB139:
1252:../Src/main.c **** 
1253:../Src/main.c **** /* USER CODE BEGIN 4 */
1254:../Src/main.c **** 
1255:../Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){ //£
 2352              		.loc 1 1255 0 is_stmt 1
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 0
 2355              		@ frame_needed = 0, uses_anonymous_args = 0
 2356              	.LVL242:
 2357 0000 08B5     		push	{r3, lr}
 2358              	.LCFI49:
 2359              		.cfi_def_cfa_offset 8
 2360              		.cfi_offset 3, -8
 2361              		.cfi_offset 14, -4
1256:../Src/main.c ****   if(htim->Instance == htim3.Instance){
 2362              		.loc 1 1256 0
 2363 0002 0268     		ldr	r2, [r0]
 2364 0004 044B     		ldr	r3, .L170
 2365 0006 1B68     		ldr	r3, [r3]
 2366 0008 9A42     		cmp	r2, r3
 2367 000a 03D1     		bne	.L167
1257:../Src/main.c ****     HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);              /////changement d'etat de la led
 2368              		.loc 1 1257 0
 2369 000c 0348     		ldr	r0, .L170+4
 2370              	.LVL243:
 2371 000e 2021     		movs	r1, #32
 2372 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 2373              	.LVL244:
 2374              	.L167:
 2375 0014 08BD     		pop	{r3, pc}
 2376              	.L171:
 2377 0016 00BF     		.align	2
 2378              	.L170:
 2379 0018 00000000 		.word	htim3
 2380 001c 00000240 		.word	1073872896
 2381              		.cfi_endproc
 2382              	.LFE139:
ARM GAS  /tmp/ccWHtB6g.s 			page 70


 2384              		.comm	interface,104,4
 2385              		.global	WelcomeMsg
 2386              		.comm	htim5,60,4
 2387              		.global	RangeMedium
 2388              		.global	RangeLow
 2389              		.global	VL53L0XDevs
 2390              		.comm	nDevMask,4,4
 2391              		.global	nDevPresent
 2392              		.global	LeakyFactorFix8
 2393              		.comm	RangingMeasurementData,28,4
 2394              		.global	DemoModeTxt
 2395              		.global	RangingConfigTxt
 2396              		.global	TxtBarGraph
 2397              		.global	TxtRangeValue
 2398              		.comm	huart2,60,4
 2399              		.comm	huart1,60,4
 2400              		.comm	htim3,60,4
 2401              		.comm	hi2c1,56,4
 2402              		.section	.rodata
 2403              		.align	2
 2404              		.set	.LANCHOR5,. + 0
 2405              	.LC0:
 2406 0000 FE       		.byte	-2
 2407 0001 000000   		.space	3
 2408 0004 00000000 		.word	interface
 2409              		.section	.bss.nDevPresent,"aw",%nobits
 2410              		.align	2
 2411              		.set	.LANCHOR0,. + 0
 2414              	nDevPresent:
 2415 0000 00000000 		.space	4
 2416              		.section	.rodata.TxtRangeValue,"a",%progbits
 2417              		.align	2
 2420              	TxtRangeValue:
 2421 0000 726E6700 		.ascii	"rng\000"
 2422              		.section	.data.VL53L0XDevs,"aw",%progbits
 2423              		.align	2
 2424              		.set	.LANCHOR1,. + 0
 2427              	VL53L0XDevs:
 2428 0000 00000000 		.space	348
 2428      00000000 
 2428      00000000 
 2428      00000000 
 2428      00000000 
 2429 015c 00000000 		.word	XNUCLEO53L0A1_hi2c
 2430 0160 52       		.byte	82
 2431 0161 6C       		.byte	108
 2432 0162 0000     		.space	2
 2433 0164 00000000 		.word	0
 2434 0168 00000000 		.space	40
 2434      00000000 
 2434      00000000 
 2434      00000000 
 2434      00000000 
 2435 0190 00000000 		.space	348
 2435      00000000 
 2435      00000000 
 2435      00000000 
ARM GAS  /tmp/ccWHtB6g.s 			page 71


 2435      00000000 
 2436 02ec 00000000 		.word	XNUCLEO53L0A1_hi2c
 2437 02f0 52       		.byte	82
 2438 02f1 63       		.byte	99
 2439 02f2 0000     		.space	2
 2440 02f4 01000000 		.word	1
 2441 02f8 00000000 		.space	40
 2441      00000000 
 2441      00000000 
 2441      00000000 
 2441      00000000 
 2442 0320 00000000 		.space	348
 2442      00000000 
 2442      00000000 
 2442      00000000 
 2442      00000000 
 2443 047c 00000000 		.word	XNUCLEO53L0A1_hi2c
 2444 0480 52       		.byte	82
 2445 0481 72       		.byte	114
 2446 0482 0000     		.space	2
 2447 0484 02000000 		.word	2
 2448 0488 00000000 		.space	40
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2449              		.section	.data.LeakyFactorFix8,"aw",%progbits
 2450              		.align	2
 2451              		.set	.LANCHOR4,. + 0
 2454              	LeakyFactorFix8:
 2455 0000 99000000 		.word	153
 2456              		.section	.data.WelcomeMsg,"aw",%progbits
 2457              		.align	2
 2460              	WelcomeMsg:
 2461 0000 48692049 		.ascii	"Hi I am Ranging VL53L0X mcu STM32F401xE\012\000"
 2461      20616D20 
 2461      52616E67 
 2461      696E6720 
 2461      564C3533 
 2462              		.section	.rodata.str1.4,"aMS",%progbits,1
 2463              		.align	2
 2464              	.LC1:
 2465 0000 20726220 		.ascii	" rb \000"
 2465      00
 2466 0005 000000   		.space	3
 2467              	.LC2:
 2468 0008 45722564 		.ascii	"Er%d\000"
 2468      00
 2469 000d 000000   		.space	3
 2470              	.LC3:
 2471 0010 20202020 		.ascii	"    \000"
 2471      00
 2472 0015 000000   		.space	3
 2473              	.LC4:
 2474 0018 25642C00 		.ascii	"%d,\000"
 2475              	.LC5:
 2476 001c 256400   		.ascii	"%d\000"
ARM GAS  /tmp/ccWHtB6g.s 			page 72


 2477 001f 00       		.space	1
 2478              	.LC6:
 2479 0020 25336463 		.ascii	"%3dc\000"
 2479      00
 2480 0025 000000   		.space	3
 2481              	.LC7:
 2482 0028 2D2D2D2D 		.ascii	"----\000"
 2482      00
 2483 002d 000000   		.space	3
 2484              	.LC8:
 2485 0030 35334C30 		.ascii	"53L0\000"
 2485      00
 2486 0035 000000   		.space	3
 2487              	.LC9:
 2488 0038 726E6700 		.ascii	"rng\000"
 2489              	.LC10:
 2490 003c 62617200 		.ascii	"bar\000"
 2491              	.LC11:
 2492 0040 4C5200   		.ascii	"LR\000"
 2493 0043 00       		.space	1
 2494              	.LC12:
 2495 0044 485300   		.ascii	"HS\000"
 2496 0047 00       		.space	1
 2497              	.LC13:
 2498 0048 484100   		.ascii	"HA\000"
 2499              		.section	.data.RangingConfigTxt,"aw",%progbits
 2500              		.align	2
 2501              		.set	.LANCHOR7,. + 0
 2504              	RangingConfigTxt:
 2505 0000 40000000 		.word	.LC11
 2506 0004 44000000 		.word	.LC12
 2507 0008 48000000 		.word	.LC13
 2508              		.section	.rodata.TxtBarGraph,"a",%progbits
 2509              		.align	2
 2512              	TxtBarGraph:
 2513 0000 62617200 		.ascii	"bar\000"
 2514              		.section	.data.RangeLow,"aw",%progbits
 2515              		.align	2
 2516              		.set	.LANCHOR2,. + 0
 2519              	RangeLow:
 2520 0000 64000000 		.word	100
 2521              		.section	.data.RangeMedium,"aw",%progbits
 2522              		.align	2
 2523              		.set	.LANCHOR3,. + 0
 2526              	RangeMedium:
 2527 0000 2C010000 		.word	300
 2528              		.section	.data.DemoModeTxt,"aw",%progbits
 2529              		.align	2
 2530              		.set	.LANCHOR6,. + 0
 2533              	DemoModeTxt:
 2534 0000 38000000 		.word	.LC9
 2535 0004 3C000000 		.word	.LC10
 2536              		.text
 2537              	.Letext0:
 2538              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2539              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2540              		.file 4 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
ARM GAS  /tmp/ccWHtB6g.s 			page 73


 2541              		.file 5 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2542              		.file 6 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2543              		.file 7 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2544              		.file 8 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2545              		.file 9 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2546              		.file 10 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2547              		.file 11 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 2548              		.file 12 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2549              		.file 13 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 2550              		.file 14 "../Drivers/BSP/Components/vl53l0x/vl53l0x_types.h"
 2551              		.file 15 "../Drivers/BSP/Components/vl53l0x/vl53l0x_device.h"
 2552              		.file 16 "../Drivers/BSP/Components/vl53l0x/vl53l0x_def.h"
 2553              		.file 17 "../Drivers/BSP/X-NUCLEO-53L0A1/vl53l0x_platform.h"
 2554              		.file 18 "../Inc/xl_320.h"
 2555              		.file 19 "../Drivers/BSP/X-NUCLEO-53L0A1/X-NUCLEO-53L0A1.h"
 2556              		.file 20 "../Drivers/CMSIS/Include/core_cm4.h"
 2557              		.file 21 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2558              		.file 22 "/usr/include/newlib/stdio.h"
 2559              		.file 23 "../Drivers/BSP/Components/vl53l0x/vl53l0x_api.h"
 2560              		.file 24 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccWHtB6g.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccWHtB6g.s:21     .text.XL_320_Delay_HAL:0000000000000000 $t
     /tmp/ccWHtB6g.s:26     .text.XL_320_Delay_HAL:0000000000000000 XL_320_Delay_HAL
     /tmp/ccWHtB6g.s:47     .text.XL_320_Send_HAL:0000000000000000 $t
     /tmp/ccWHtB6g.s:52     .text.XL_320_Send_HAL:0000000000000000 XL_320_Send_HAL
     /tmp/ccWHtB6g.s:88     .text.XL_320_Send_HAL:000000000000001c $d
                            *COM*:000000000000003c huart1
     /tmp/ccWHtB6g.s:93     .text.XL_320_Set_Direction_HAL:0000000000000000 $t
     /tmp/ccWHtB6g.s:98     .text.XL_320_Set_Direction_HAL:0000000000000000 XL_320_Set_Direction_HAL
     /tmp/ccWHtB6g.s:122    .text.XL_320_Set_Direction_HAL:0000000000000014 $d
     /tmp/ccWHtB6g.s:127    .text.XL_320_Receive_HAL:0000000000000000 $t
     /tmp/ccWHtB6g.s:132    .text.XL_320_Receive_HAL:0000000000000000 XL_320_Receive_HAL
     /tmp/ccWHtB6g.s:168    .text.XL_320_Receive_HAL:000000000000001c $d
     /tmp/ccWHtB6g.s:173    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccWHtB6g.s:177    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccWHtB6g.s:324    .text.MX_GPIO_Init:00000000000000d0 $d
     /tmp/ccWHtB6g.s:333    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccWHtB6g.s:337    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccWHtB6g.s:419    .text.SystemClock_Config:0000000000000064 $d
     /tmp/ccWHtB6g.s:424    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccWHtB6g.s:428    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccWHtB6g.s:469    .text.MX_I2C1_Init:0000000000000028 $d
                            *COM*:0000000000000038 hi2c1
     /tmp/ccWHtB6g.s:476    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccWHtB6g.s:480    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccWHtB6g.s:540    .text.MX_TIM3_Init:0000000000000044 $d
                            *COM*:000000000000003c htim3
     /tmp/ccWHtB6g.s:546    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccWHtB6g.s:550    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccWHtB6g.s:589    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:000000000000003c huart2
     /tmp/ccWHtB6g.s:595    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccWHtB6g.s:599    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccWHtB6g.s:638    .text.MX_USART1_UART_Init:0000000000000024 $d
     /tmp/ccWHtB6g.s:645    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccWHtB6g.s:650    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccWHtB6g.s:716    .text.MX_TIM5_Init:0000000000000044 $d
                            *COM*:000000000000003c htim5
     /tmp/ccWHtB6g.s:722    .text.TimeStamp_Init:0000000000000000 $t
     /tmp/ccWHtB6g.s:727    .text.TimeStamp_Init:0000000000000000 TimeStamp_Init
     /tmp/ccWHtB6g.s:746    .text.TimeStamp_Reset:0000000000000000 $t
     /tmp/ccWHtB6g.s:751    .text.TimeStamp_Reset:0000000000000000 TimeStamp_Reset
     /tmp/ccWHtB6g.s:775    .text.TimeStamp_Reset:0000000000000014 $d
     /tmp/ccWHtB6g.s:780    .text.TimeStamp_Get:0000000000000000 $t
     /tmp/ccWHtB6g.s:785    .text.TimeStamp_Get:0000000000000000 TimeStamp_Get
     /tmp/ccWHtB6g.s:801    .text.TimeStamp_Get:0000000000000008 $d
     /tmp/ccWHtB6g.s:806    .text.BSP_GetPushButton:0000000000000000 $t
     /tmp/ccWHtB6g.s:811    .text.BSP_GetPushButton:0000000000000000 BSP_GetPushButton
     /tmp/ccWHtB6g.s:832    .text.BSP_GetPushButton:0000000000000010 $d
     /tmp/ccWHtB6g.s:837    .text.PusbButton_WaitUnPress:0000000000000000 $t
     /tmp/ccWHtB6g.s:842    .text.PusbButton_WaitUnPress:0000000000000000 PusbButton_WaitUnPress
     /tmp/ccWHtB6g.s:892    .text.PusbButton_WaitUnPress:0000000000000038 $d
     /tmp/ccWHtB6g.s:897    .text.HandleError:0000000000000000 $t
     /tmp/ccWHtB6g.s:902    .text.HandleError:0000000000000000 HandleError
     /tmp/ccWHtB6g.s:933    .text.HandleError:0000000000000018 $d
     /tmp/ccWHtB6g.s:938    .text.DetectSensors:0000000000000000 $t
ARM GAS  /tmp/ccWHtB6g.s 			page 75


     /tmp/ccWHtB6g.s:943    .text.DetectSensors:0000000000000000 DetectSensors
     /tmp/ccWHtB6g.s:1180   .text.DetectSensors:0000000000000144 $d
                            *COM*:0000000000000004 nDevMask
     /tmp/ccWHtB6g.s:1188   .text.SetupSingleShot:0000000000000000 $t
     /tmp/ccWHtB6g.s:1193   .text.SetupSingleShot:0000000000000000 SetupSingleShot
     /tmp/ccWHtB6g.s:1384   .text.SetupSingleShot:000000000000011c $d
     /tmp/ccWHtB6g.s:1390   .text.RangeToLetter:0000000000000000 $t
     /tmp/ccWHtB6g.s:1395   .text.RangeToLetter:0000000000000000 RangeToLetter
     /tmp/ccWHtB6g.s:1443   .text.RangeToLetter:0000000000000028 $d
     /tmp/ccWHtB6g.s:1449   .text.Sensor_SetNewRange:0000000000000000 $t
     /tmp/ccWHtB6g.s:1454   .text.Sensor_SetNewRange:0000000000000000 Sensor_SetNewRange
     /tmp/ccWHtB6g.s:1517   .text.Sensor_SetNewRange:0000000000000044 $d
     /tmp/ccWHtB6g.s:1522   .text.blink_led:0000000000000000 $t
     /tmp/ccWHtB6g.s:1527   .text.blink_led:0000000000000000 blink_led
     /tmp/ccWHtB6g.s:1582   .text.blink_led:0000000000000030 $d
     /tmp/ccWHtB6g.s:1587   .text.Variation2Angle_maison:0000000000000000 $t
     /tmp/ccWHtB6g.s:1592   .text.Variation2Angle_maison:0000000000000000 Variation2Angle_maison
     /tmp/ccWHtB6g.s:1648   .text.Variation3Angle_maison:0000000000000000 $t
     /tmp/ccWHtB6g.s:1653   .text.Variation3Angle_maison:0000000000000000 Variation3Angle_maison
     /tmp/ccWHtB6g.s:1797   .text.Variation3Angle_maison:00000000000000c8 $d
     /tmp/ccWHtB6g.s:1804   .text.RangeDemo:0000000000000000 $t
     /tmp/ccWHtB6g.s:1809   .text.RangeDemo:0000000000000000 RangeDemo
     /tmp/ccWHtB6g.s:2079   .text.RangeDemo:0000000000000188 $d
                            *COM*:000000000000001c RangingMeasurementData
     /tmp/ccWHtB6g.s:2090   .text.ResetAndDetectSensor:0000000000000000 $t
     /tmp/ccWHtB6g.s:2095   .text.ResetAndDetectSensor:0000000000000000 ResetAndDetectSensor
     /tmp/ccWHtB6g.s:2131   .text.ResetAndDetectSensor:0000000000000020 $d
     /tmp/ccWHtB6g.s:2136   .text.main:0000000000000000 $t
     /tmp/ccWHtB6g.s:2141   .text.main:0000000000000000 main
     /tmp/ccWHtB6g.s:2330   .text.main:00000000000000fc $d
                            *COM*:0000000000000068 interface
     /tmp/ccWHtB6g.s:2345   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccWHtB6g.s:2350   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccWHtB6g.s:2379   .text.HAL_TIM_PeriodElapsedCallback:0000000000000018 $d
     /tmp/ccWHtB6g.s:2460   .data.WelcomeMsg:0000000000000000 WelcomeMsg
     /tmp/ccWHtB6g.s:2526   .data.RangeMedium:0000000000000000 RangeMedium
     /tmp/ccWHtB6g.s:2519   .data.RangeLow:0000000000000000 RangeLow
     /tmp/ccWHtB6g.s:2427   .data.VL53L0XDevs:0000000000000000 VL53L0XDevs
     /tmp/ccWHtB6g.s:2414   .bss.nDevPresent:0000000000000000 nDevPresent
     /tmp/ccWHtB6g.s:2454   .data.LeakyFactorFix8:0000000000000000 LeakyFactorFix8
     /tmp/ccWHtB6g.s:2533   .data.DemoModeTxt:0000000000000000 DemoModeTxt
     /tmp/ccWHtB6g.s:2504   .data.RangingConfigTxt:0000000000000000 RangingConfigTxt
     /tmp/ccWHtB6g.s:2512   .rodata.TxtBarGraph:0000000000000000 TxtBarGraph
     /tmp/ccWHtB6g.s:2420   .rodata.TxtRangeValue:0000000000000000 TxtRangeValue
     /tmp/ccWHtB6g.s:2403   .rodata:0000000000000000 $d
     /tmp/ccWHtB6g.s:2410   .bss.nDevPresent:0000000000000000 $d
     /tmp/ccWHtB6g.s:2417   .rodata.TxtRangeValue:0000000000000000 $d
     /tmp/ccWHtB6g.s:2423   .data.VL53L0XDevs:0000000000000000 $d
     /tmp/ccWHtB6g.s:2450   .data.LeakyFactorFix8:0000000000000000 $d
     /tmp/ccWHtB6g.s:2457   .data.WelcomeMsg:0000000000000000 $d
     /tmp/ccWHtB6g.s:2463   .rodata.str1.4:0000000000000000 $d
     /tmp/ccWHtB6g.s:2500   .data.RangingConfigTxt:0000000000000000 $d
     /tmp/ccWHtB6g.s:2509   .rodata.TxtBarGraph:0000000000000000 $d
     /tmp/ccWHtB6g.s:2515   .data.RangeLow:0000000000000000 $d
     /tmp/ccWHtB6g.s:2522   .data.RangeMedium:0000000000000000 $d
     /tmp/ccWHtB6g.s:2529   .data.DemoModeTxt:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/ccWHtB6g.s 			page 76



UNDEFINED SYMBOLS
HAL_Delay
HAL_UART_Transmit
HAL_GPIO_WritePin
HAL_UART_Receive
HAL_GPIO_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_TIM_Base_Start
HAL_GPIO_ReadPin
HAL_GetTick
XNUCLEO53L0A1_SetDisplayString
sprintf
XNUCLEO53L0A1_ResetId
VL53L0X_WrByte
VL53L0X_RdWord
VL53L0X_SetDeviceAddress
VL53L0X_DataInit
VL53L0X_StaticInit
VL53L0X_PerformRefCalibration
VL53L0X_PerformRefSpadManagement
VL53L0X_SetDeviceMode
VL53L0X_SetLimitCheckEnable
VL53L0X_SetLimitCheckValue
VL53L0X_SetMeasurementTimingBudgetMicroSeconds
VL53L0X_SetVcselPulsePeriod
HAL_TIM_Base_Stop_IT
HAL_TIM_Base_Start_IT
XL_Set_Goal_Position
XL_Get_Current_Position
strcat
strlen
VL53L0X_PerformSingleRangingMeasurement
HAL_Init
XNUCLEO53L0A1_Init
XL_Discover
XL_Say_Hello
XL_Power_On
HAL_GPIO_TogglePin
XNUCLEO53L0A1_hi2c
