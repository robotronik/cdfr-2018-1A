ARM GAS  /tmp/ccgMVEFA.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_hal_rcc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	HAL_RCC_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	HAL_RCC_DeInit:
  28              	.LFB112:
  29              		.file 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c"
   1:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
   2:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
   3:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @file    stm32f4xx_hal_rcc.c
   4:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @author  MCD Application Team
   5:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @version V1.1.0
   6:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @date    19-June-2014
   7:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *       
  13:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @verbatim                
  14:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  15:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  17:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  18:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  19:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  20:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  21:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  22:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  23:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  24:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  25:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  26:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  27:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
  28:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]          
  29:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       Once the device started from reset, the user application has to:        
ARM GAS  /tmp/ccgMVEFA.s 			page 2


  30:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  32:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  38:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @endverbatim
  39:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  40:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @attention
  41:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  42:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  43:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  44:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  45:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  46:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  47:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  48:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  49:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  50:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  51:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  52:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  53:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      without specific prior written permission.
  54:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  55:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  56:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  57:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  58:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  59:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  60:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  61:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  62:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  63:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  64:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  65:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  66:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  67:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */ 
  68:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  69:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  70:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #include "stm32f4xx_hal.h"
  71:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  72:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup STM32F4xx_HAL_Driver
  73:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  74:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  75:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  76:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC 
  77:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief RCC HAL module driver
  78:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  79:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  80:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  81:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  82:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  83:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  84:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  85:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define HSE_TIMEOUT_VALUE          HSE_STARTUP_TIMEOUT
  86:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define HSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
ARM GAS  /tmp/ccgMVEFA.s 			page 3


  87:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define LSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  88:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define PLL_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  89:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  ((uint32_t)5000) /* 5 s    */
  90:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  91:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
  92:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __GPIOA_CLK_ENABLE()
  93:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
  94:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8 
  95:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  96:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __GPIOC_CLK_ENABLE()
  97:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
  98:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
  99:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 100:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 101:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** const uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 102:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 103:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 104:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private functions ---------------------------------------------------------*/
 105:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 106:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Private_Functions
 107:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 108:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 109:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 110:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Group1 Initialization and de-initialization functions 
 111:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions 
 112:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 113:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim    
 114:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 115:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 116:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 117:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 118:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 119:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1 
 120:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        and APB2).
 121:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 122:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 123:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 124:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the PLL as System clock source.
 125:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 126:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 127:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source.
 128:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 129:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 130:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 131:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 132:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 133:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 134:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 135:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 136:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 137:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 138:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 139:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 140:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 141:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source), the System clockis automatically switched to HSI and an interrupt
 142:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M4 NMI 
 143:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.   
ARM GAS  /tmp/ccgMVEFA.s 			page 4


 144:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 145:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 146:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PA8 pin.
 147:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 148:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 149:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PC9 pin.
 150:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 151:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration  
 152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 153:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              HSE and PLL.
 154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable 
 155:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped 
 156:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock 
 158:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use 
 159:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.  
 160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 161:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 162:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 163:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin. 
 164:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           (+@) SAI: the SAI clock can be derived either from a specific PLL (PLLI2S) or (PLLSAI) or
 166:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin. 
 167:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock. 
 168:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 169:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 divided by 2 to 31. You have to use __HAL_RCC_RTC_CONFIG() and __HAL_RCC_RTC_ENABLE
 170:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 macros to configure this clock. 
 171:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 172:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 to work correctly, while the SDIO require a frequency equal or lower than
 173:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 to 48. This clock is derived of the main PLL through PLLQ divider.
 174:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) IWDG clock which is always the LSI clock.
 175:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        
 176:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F405xx/07xx and STM32F415xx/17xx devices, the maximum
 177:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              frequency of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. 
 178:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 179:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 180:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 181:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F42xxx and STM32F43xxx devices, the maximum frequency
 182:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              of the SYSCLK and HCLK is 180 MHz, PCLK2 90 MHz and PCLK1 45 MHz. 
 183:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 184:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 185:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 186:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F401xx, the maximum frequency of the SYSCLK and HCLK is 84 MHz,
 187:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              PCLK2 84 MHz and PCLK1 42 MHz. 
 188:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 189:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 190:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 191:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 192:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 193:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 194:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 195:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 196:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 197:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 198:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 199:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 200:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
ARM GAS  /tmp/ccgMVEFA.s 			page 5


 201:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - All interrupts disabled
 202:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 203:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - Peripheral clocks  
 204:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks 
 205:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 206:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 207:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 208:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 209:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
  30              		.loc 1 209 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 210:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set HSION bit */
 211:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
  35              		.loc 1 211 0
  36 0000 104B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38 0004 42F08102 		orr	r2, r2, #129
  39 0008 1A60     		str	r2, [r3]
 212:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 213:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset CFGR register */
 214:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  40              		.loc 1 214 0
  41 000a 0021     		movs	r1, #0
  42 000c 9960     		str	r1, [r3, #8]
 215:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 216:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S */
 217:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
  43              		.loc 1 217 0
  44 000e 1A68     		ldr	r2, [r3]
  45 0010 22F0A162 		bic	r2, r2, #84410368
  46 0014 22F48032 		bic	r2, r2, #65536
  47 0018 1A60     		str	r2, [r3]
 218:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 219:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset PLLCFGR register */
 220:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLCFGR);
  48              		.loc 1 220 0
  49 001a 5960     		str	r1, [r3, #4]
 221:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_
  50              		.loc 1 221 0
  51 001c 5868     		ldr	r0, [r3, #4]
  52 001e 0A4A     		ldr	r2, .L2+4
  53 0020 0243     		orrs	r2, r2, r0
  54 0022 5A60     		str	r2, [r3, #4]
 222:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 223:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset PLLI2SCFGR register */
 224:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLI2SCFGR);
  55              		.loc 1 224 0
  56 0024 C3F88410 		str	r1, [r3, #132]
 225:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PL
  57              		.loc 1 225 0
  58 0028 D3F88420 		ldr	r2, [r3, #132]
  59 002c 42F00052 		orr	r2, r2, #536870912
  60 0030 42F44052 		orr	r2, r2, #12288
  61 0034 C3F88420 		str	r2, [r3, #132]
ARM GAS  /tmp/ccgMVEFA.s 			page 6


 226:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 227:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 228:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
  62              		.loc 1 228 0
  63 0038 1A68     		ldr	r2, [r3]
  64 003a 22F48022 		bic	r2, r2, #262144
  65 003e 1A60     		str	r2, [r3]
 229:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 230:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Disable all interrupts */
 231:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR); 
  66              		.loc 1 231 0
  67 0040 D960     		str	r1, [r3, #12]
  68 0042 7047     		bx	lr
  69              	.L3:
  70              		.align	2
  71              	.L2:
  72 0044 00380240 		.word	1073887232
  73 0048 10300004 		.word	67121168
  74              		.cfi_endproc
  75              	.LFE112:
  77              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  78              		.align	2
  79              		.global	HAL_RCC_OscConfig
  80              		.thumb
  81              		.thumb_func
  83              	HAL_RCC_OscConfig:
  84              	.LFB113:
 232:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 233:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 234:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 235:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 236:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 237:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 238:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 239:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 240:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HAL status
 241:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 242:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 243:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
  85              		.loc 1 243 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              	.LVL0:
  90 0000 38B5     		push	{r3, r4, r5, lr}
  91              	.LCFI0:
  92              		.cfi_def_cfa_offset 16
  93              		.cfi_offset 3, -16
  94              		.cfi_offset 4, -12
  95              		.cfi_offset 5, -8
  96              		.cfi_offset 14, -4
  97 0002 0446     		mov	r4, r0
  98              	.LVL1:
 244:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart = 0;  
 245:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 246:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 247:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
ARM GAS  /tmp/ccgMVEFA.s 			page 7


 248:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 249:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  99              		.loc 1 249 0
 100 0004 0368     		ldr	r3, [r0]
 101 0006 13F0010F 		tst	r3, #1
 102 000a 57D0     		beq	.L5
 250:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 251:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 252:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 253:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 254:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 103              		.loc 1 254 0
 104 000c AA4B     		ldr	r3, .L67
 105 000e 9B68     		ldr	r3, [r3, #8]
 106 0010 03F00C03 		and	r3, r3, #12
 107 0014 042B     		cmp	r3, #4
 108 0016 0AD0     		beq	.L6
 109              		.loc 1 254 0 is_stmt 0 discriminator 1
 110 0018 A74B     		ldr	r3, .L67
 111 001a 9B68     		ldr	r3, [r3, #8]
 112 001c 03F00C03 		and	r3, r3, #12
 113 0020 082B     		cmp	r3, #8
 114 0022 0ED1     		bne	.L7
 115              		.loc 1 254 0 discriminator 2
 116 0024 A44B     		ldr	r3, .L67
 117 0026 5B68     		ldr	r3, [r3, #4]
 118 0028 13F4800F 		tst	r3, #4194304
 119 002c 09D0     		beq	.L7
 120              	.L6:
 255:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 256:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_
 121              		.loc 1 256 0 is_stmt 1
 122 002e A24B     		ldr	r3, .L67
 123 0030 1B68     		ldr	r3, [r3]
 124 0032 13F4003F 		tst	r3, #131072
 125 0036 41D0     		beq	.L5
 126              		.loc 1 256 0 is_stmt 0 discriminator 1
 127 0038 6368     		ldr	r3, [r4, #4]
 128 003a 012B     		cmp	r3, #1
 129 003c 40F0A381 		bne	.L48
 130 0040 3CE0     		b	.L5
 131              	.L7:
 257:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 258:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 259:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 260:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 261:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 262:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 263:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
 264:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 132              		.loc 1 264 0 is_stmt 1
 133 0042 0022     		movs	r2, #0
 134 0044 9D4B     		ldr	r3, .L67+4
 135 0046 1A70     		strb	r2, [r3]
 265:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 266:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 267:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
ARM GAS  /tmp/ccgMVEFA.s 			page 8


 136              		.loc 1 267 0
 137 0048 FFF7FEFF 		bl	HAL_GetTick
 138              	.LVL2:
 139 004c 0546     		mov	r5, r0
 140              	.LVL3:
 268:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 269:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till HSE is disabled */  
 270:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 141              		.loc 1 270 0
 142 004e 07E0     		b	.L9
 143              	.LVL4:
 144              	.L10:
 271:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 272:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 145              		.loc 1 272 0
 146 0050 FFF7FEFF 		bl	HAL_GetTick
 147              	.LVL5:
 148 0054 401B     		subs	r0, r0, r5
 149 0056 41F28833 		movw	r3, #5000
 150 005a 9842     		cmp	r0, r3
 151 005c 00F29581 		bhi	.L49
 152              	.L9:
 270:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 153              		.loc 1 270 0
 154 0060 954B     		ldr	r3, .L67
 155 0062 1B68     		ldr	r3, [r3]
 156 0064 13F4003F 		tst	r3, #131072
 157 0068 F2D1     		bne	.L10
 273:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 274:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 275:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 276:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 277:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 278:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 279:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 158              		.loc 1 279 0
 159 006a 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 160 006c 934B     		ldr	r3, .L67+4
 161 006e 1A70     		strb	r2, [r3]
 280:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 281:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSE State */
 282:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSEState) == RCC_HSE_ON)
 162              		.loc 1 282 0
 163 0070 6368     		ldr	r3, [r4, #4]
 164 0072 012B     		cmp	r3, #1
 165 0074 11D1     		bne	.L11
 283:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 284:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 285:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 166              		.loc 1 285 0
 167 0076 FFF7FEFF 		bl	HAL_GetTick
 168              	.LVL6:
 169 007a 0546     		mov	r5, r0
 170              	.LVL7:
 286:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 287:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is ready */  
 288:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
ARM GAS  /tmp/ccgMVEFA.s 			page 9


 171              		.loc 1 288 0
 172 007c 07E0     		b	.L12
 173              	.LVL8:
 174              	.L13:
 289:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 290:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 175              		.loc 1 290 0
 176 007e FFF7FEFF 		bl	HAL_GetTick
 177              	.LVL9:
 178 0082 401B     		subs	r0, r0, r5
 179 0084 41F28833 		movw	r3, #5000
 180 0088 9842     		cmp	r0, r3
 181 008a 00F28081 		bhi	.L50
 182              	.L12:
 288:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 183              		.loc 1 288 0
 184 008e 8A4B     		ldr	r3, .L67
 185 0090 1B68     		ldr	r3, [r3]
 186 0092 13F4003F 		tst	r3, #131072
 187 0096 F2D0     		beq	.L13
 188 0098 10E0     		b	.L5
 189              	.L11:
 291:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 292:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 293:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 294:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 295:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 296:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 297:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 298:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 299:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 190              		.loc 1 299 0
 191 009a FFF7FEFF 		bl	HAL_GetTick
 192              	.LVL10:
 193 009e 0546     		mov	r5, r0
 194              	.LVL11:
 300:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 301:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 302:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 195              		.loc 1 302 0
 196 00a0 07E0     		b	.L14
 197              	.LVL12:
 198              	.L15:
 303:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 304:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 199              		.loc 1 304 0
 200 00a2 FFF7FEFF 		bl	HAL_GetTick
 201              	.LVL13:
 202 00a6 401B     		subs	r0, r0, r5
 203 00a8 41F28833 		movw	r3, #5000
 204 00ac 9842     		cmp	r0, r3
 205 00ae 00F27081 		bhi	.L51
 206              	.L14:
 302:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 207              		.loc 1 302 0
 208 00b2 814B     		ldr	r3, .L67
 209 00b4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccgMVEFA.s 			page 10


 210 00b6 13F4003F 		tst	r3, #131072
 211 00ba F2D1     		bne	.L15
 212              	.LVL14:
 213              	.L5:
 305:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 306:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 307:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 308:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 309:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 310:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 311:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 312:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 313:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 214              		.loc 1 313 0
 215 00bc 2368     		ldr	r3, [r4]
 216 00be 13F0020F 		tst	r3, #2
 217 00c2 5ED0     		beq	.L16
 314:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 315:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 316:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 317:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 318:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 319:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 320:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 218              		.loc 1 320 0
 219 00c4 7C4B     		ldr	r3, .L67
 220 00c6 9B68     		ldr	r3, [r3, #8]
 221 00c8 13F00C0F 		tst	r3, #12
 222 00cc 0AD0     		beq	.L17
 223              		.loc 1 320 0 is_stmt 0 discriminator 1
 224 00ce 7A4B     		ldr	r3, .L67
 225 00d0 9B68     		ldr	r3, [r3, #8]
 226 00d2 03F00C03 		and	r3, r3, #12
 227 00d6 082B     		cmp	r3, #8
 228 00d8 1DD1     		bne	.L18
 229              		.loc 1 320 0 discriminator 2
 230 00da 774B     		ldr	r3, .L67
 231 00dc 5B68     		ldr	r3, [r3, #4]
 232 00de 13F4800F 		tst	r3, #4194304
 233 00e2 18D1     		bne	.L18
 234              	.L17:
 321:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 322:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 323:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 235              		.loc 1 323 0 is_stmt 1
 236 00e4 744B     		ldr	r3, .L67
 237 00e6 1B68     		ldr	r3, [r3]
 238 00e8 13F0020F 		tst	r3, #2
 239 00ec 03D0     		beq	.L19
 240              		.loc 1 323 0 is_stmt 0 discriminator 1
 241 00ee E368     		ldr	r3, [r4, #12]
 242 00f0 012B     		cmp	r3, #1
 243 00f2 40F05081 		bne	.L52
 244              	.L19:
 324:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 325:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 326:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccgMVEFA.s 			page 11


 327:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 328:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 329:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 330:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 331:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 245              		.loc 1 331 0 is_stmt 1
 246 00f6 7048     		ldr	r0, .L67
 247 00f8 0368     		ldr	r3, [r0]
 248 00fa 23F0F801 		bic	r1, r3, #248
 249 00fe 2269     		ldr	r2, [r4, #16]
 250              	.LVL15:
 251              	.LBB66:
 252              	.LBB67:
 253              		.file 2 "../Drivers/CMSIS/Include/core_cmInstr.h"
   1:../Drivers/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @version  V3.20
   5:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @date     05. March 2013
   6:../Drivers/CMSIS/Include/core_cmInstr.h ****  *
   7:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @note
   8:../Drivers/CMSIS/Include/core_cmInstr.h ****  *
   9:../Drivers/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:../Drivers/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  12:../Drivers/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:../Drivers/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:../Drivers/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:../Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:../Drivers/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../Drivers/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:../Drivers/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:../Drivers/CMSIS/Include/core_cmInstr.h ****    *
  24:../Drivers/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../Drivers/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../Drivers/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../Drivers/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../Drivers/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../Drivers/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../Drivers/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../Drivers/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../Drivers/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../Drivers/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../Drivers/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../Drivers/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  37:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  38:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  41:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  42:../Drivers/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
ARM GAS  /tmp/ccgMVEFA.s 			page 12


  44:../Drivers/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:../Drivers/CMSIS/Include/core_cmInstr.h ****   @{
  46:../Drivers/CMSIS/Include/core_cmInstr.h **** */
  47:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  48:../Drivers/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../Drivers/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  51:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:../Drivers/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
  54:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  55:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  56:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  58:../Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  60:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  62:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  63:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  65:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:../Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  68:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  70:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  71:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  73:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:../Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  76:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  78:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  79:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  81:../Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  83:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  85:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  86:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  88:../Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:../Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:../Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  92:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  94:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  95:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  97:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:../Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 100:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
ARM GAS  /tmp/ccgMVEFA.s 			page 13


 101:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 102:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 103:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 105:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:../Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 108:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 110:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 111:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 113:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 115:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 117:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 118:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 119:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 120:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 121:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 123:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 125:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 128:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 131:../Drivers/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 132:../Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 133:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 134:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 135:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 136:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 138:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 140:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 142:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 143:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 146:../Drivers/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 147:../Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 148:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 149:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 150:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 151:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 152:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 154:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 156:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
ARM GAS  /tmp/ccgMVEFA.s 			page 14


 158:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 159:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 160:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 161:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 162:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 163:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 164:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 165:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:../Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 168:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:../Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 171:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 173:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 174:../Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 176:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 178:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 180:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 182:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 183:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 184:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 185:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 186:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 188:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 190:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 193:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 195:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 196:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 198:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 200:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 203:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 205:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 206:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 208:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 210:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 213:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccgMVEFA.s 			page 15


 215:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 216:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 218:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 220:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 221:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 223:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 224:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 225:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 227:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 228:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 230:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 232:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 233:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 235:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 236:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 237:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 239:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 240:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 242:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 244:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 245:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 247:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 248:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 249:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 251:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 252:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 254:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 256:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 257:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 258:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 259:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 260:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 261:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 262:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 263:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 264:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 267:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 268:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 269:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 270:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 271:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
ARM GAS  /tmp/ccgMVEFA.s 			page 16


 272:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 273:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 274:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 275:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 278:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 279:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 280:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 281:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 282:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 283:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 284:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 286:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 288:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 289:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 290:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 291:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 293:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 294:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 295:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:../Drivers/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 298:../Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 299:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 300:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 301:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:../Drivers/CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 303:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 304:../Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 306:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 307:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:../Drivers/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 309:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 310:../Drivers/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:../Drivers/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:../Drivers/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:../Drivers/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 317:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 320:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 321:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 322:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 323:../Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 325:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 327:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 328:../Drivers/CMSIS/Include/core_cmInstr.h **** }
ARM GAS  /tmp/ccgMVEFA.s 			page 17


 329:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 330:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 331:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 333:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:../Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 335:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 336:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 338:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 339:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 340:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 341:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 342:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 343:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 344:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:../Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 347:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 349:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 350:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 351:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 352:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 353:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 354:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 355:../Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 357:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 359:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 360:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 361:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 362:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 363:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 365:../Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:../Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:../Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 368:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 369:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 371:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 372:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 373:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 374:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 375:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 377:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:../Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 380:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 382:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 383:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 384:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 385:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccgMVEFA.s 			page 18


 386:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 387:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 388:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 389:../Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 390:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 391:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 392:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 393:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 394:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 395:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 396:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 397:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 398:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 399:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 400:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 401:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 402:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 403:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 404:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
 405:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 406:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 407:../Drivers/CMSIS/Include/core_cmInstr.h ****   return __builtin_bswap32(value);
 408:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 409:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 410:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 411:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 412:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 413:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 414:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 415:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 416:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 417:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 418:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 419:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 420:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 421:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 422:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 423:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 424:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 425:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 426:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 427:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 428:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 429:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 430:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 431:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 432:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 433:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 434:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 435:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 436:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 437:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 438:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 439:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 440:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t __REVSH(int32_t value)
 441:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 442:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  /tmp/ccgMVEFA.s 			page 19


 443:../Drivers/CMSIS/Include/core_cmInstr.h ****   return (short)__builtin_bswap16(value);
 444:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 445:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 446:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 447:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 448:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 449:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 450:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 451:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 452:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 453:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 454:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 455:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 456:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 457:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 458:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 459:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 460:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 461:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 462:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 463:../Drivers/CMSIS/Include/core_cmInstr.h ****   return (op1 >> op2) | (op1 << (32 - op2)); 
 464:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 465:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 466:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 467:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 468:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 469:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 470:../Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 471:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 472:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 473:../Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 474:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 475:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 476:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 477:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 478:../Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 479:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 480:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 481:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 482:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 483:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 484:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 485:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 486:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 487:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 488:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 489:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 490:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 254              		.loc 2 491 0
 255 0100 F823     		movs	r3, #248
 256              		.syntax unified
 257              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 258 0102 93FAA3F3 		rbit r3, r3
 259              	@ 0 "" 2
 260              	.LVL16:
 261              		.thumb
ARM GAS  /tmp/ccgMVEFA.s 			page 20


 262              		.syntax unified
 263              	.LBE67:
 264              	.LBE66:
 265              	.LBB68:
 266              	.LBB69:
 492:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 493:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 494:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 495:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 496:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 497:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 498:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 499:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 500:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 501:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 502:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 503:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)
 504:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 505:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 506:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 507:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 508:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 509:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 510:../Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 511:../Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 512:../Drivers/CMSIS/Include/core_cmInstr.h ****     */
 513:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 514:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 515:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 516:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 517:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 518:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 519:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 520:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 521:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 522:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 523:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 524:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 525:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 526:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)
 527:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 528:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 529:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 530:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 531:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 532:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 533:../Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 534:../Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 535:../Drivers/CMSIS/Include/core_cmInstr.h ****     */
 536:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 537:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 538:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 539:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 540:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 541:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 542:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 543:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccgMVEFA.s 			page 21


 544:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 545:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 546:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 547:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 548:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 549:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
 550:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 551:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 552:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 553:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 554:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 555:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 556:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 557:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 558:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 559:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 560:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 561:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 562:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 563:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 564:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 565:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 566:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 567:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_
 568:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 569:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 570:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 571:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 572:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 573:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 574:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 575:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 576:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 577:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 578:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 579:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 580:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 581:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 582:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 583:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 584:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 585:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint1
 586:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 587:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 588:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 589:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 590:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 591:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 592:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 593:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 594:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 595:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 596:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 597:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 598:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 599:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 600:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
ARM GAS  /tmp/ccgMVEFA.s 			page 22


 601:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 602:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 603:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint3
 604:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 605:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 606:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 607:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 608:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 609:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 610:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 611:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 612:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 613:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 614:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 615:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 616:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 617:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __CLREX(void)
 618:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 619:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clrex" ::: "memory");
 620:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 621:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 622:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 623:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 624:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 625:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 626:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 627:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 628:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 629:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 630:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 631:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT(ARG1,ARG2) \
 632:../Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 633:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 634:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 635:../Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 636:../Drivers/CMSIS/Include/core_cmInstr.h ****  })
 637:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 638:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 639:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 640:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 641:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 642:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 643:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 644:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 645:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 646:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 647:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT(ARG1,ARG2) \
 648:../Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 649:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 650:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 651:../Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 652:../Drivers/CMSIS/Include/core_cmInstr.h ****  })
 653:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 654:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 655:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 656:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 657:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
ARM GAS  /tmp/ccgMVEFA.s 			page 23


 658:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 659:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 660:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 661:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 662:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
 663:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 664:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 665:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 267              		.loc 2 666 0
 268              		.syntax unified
 269              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 270 0106 B3FA83F3 		clz r3, r3
 271              	@ 0 "" 2
 272              		.thumb
 273              		.syntax unified
 274              	.LBE69:
 275              	.LBE68:
 276              		.loc 1 331 0
 277 010a DBB2     		uxtb	r3, r3
 278 010c 02FA03F3 		lsl	r3, r2, r3
 279 0110 0B43     		orrs	r3, r3, r1
 280 0112 0360     		str	r3, [r0]
 323:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 281              		.loc 1 323 0
 282 0114 35E0     		b	.L16
 283              	.L18:
 332:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 333:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 334:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 335:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 336:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSI State */
 337:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 284              		.loc 1 337 0
 285 0116 E368     		ldr	r3, [r4, #12]
 286 0118 0BB3     		cbz	r3, .L20
 338:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 339:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 340:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 287              		.loc 1 340 0
 288 011a 0122     		movs	r2, #1
 289 011c 684B     		ldr	r3, .L67+8
 290 011e 1A60     		str	r2, [r3]
 341:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 342:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 343:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 291              		.loc 1 343 0
 292 0120 FFF7FEFF 		bl	HAL_GetTick
 293              	.LVL17:
 294 0124 0546     		mov	r5, r0
 295              	.LVL18:
 344:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 345:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 346:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 296              		.loc 1 346 0
 297 0126 05E0     		b	.L21
 298              	.LVL19:
ARM GAS  /tmp/ccgMVEFA.s 			page 24


 299              	.L22:
 347:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 348:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 300              		.loc 1 348 0
 301 0128 FFF7FEFF 		bl	HAL_GetTick
 302              	.LVL20:
 303 012c 401B     		subs	r0, r0, r5
 304 012e 6428     		cmp	r0, #100
 305 0130 00F23381 		bhi	.L53
 306              	.L21:
 346:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 307              		.loc 1 346 0
 308 0134 604B     		ldr	r3, .L67
 309 0136 1B68     		ldr	r3, [r3]
 310 0138 13F0020F 		tst	r3, #2
 311 013c F4D0     		beq	.L22
 349:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 350:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 351:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }       
 352:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 353:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 
 354:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 355:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 312              		.loc 1 355 0
 313 013e 5E48     		ldr	r0, .L67
 314 0140 0368     		ldr	r3, [r0]
 315 0142 23F0F801 		bic	r1, r3, #248
 316 0146 2269     		ldr	r2, [r4, #16]
 317              	.LVL21:
 318              	.LBB70:
 319              	.LBB71:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 320              		.loc 2 491 0
 321 0148 F823     		movs	r3, #248
 322              		.syntax unified
 323              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 324 014a 93FAA3F3 		rbit r3, r3
 325              	@ 0 "" 2
 326              	.LVL22:
 327              		.thumb
 328              		.syntax unified
 329              	.LBE71:
 330              	.LBE70:
 331              	.LBB72:
 332              	.LBB73:
 333              		.loc 2 666 0
 334              		.syntax unified
 335              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 336 014e B3FA83F3 		clz r3, r3
 337              	@ 0 "" 2
 338              		.thumb
 339              		.syntax unified
 340              	.LBE73:
 341              	.LBE72:
 342              		.loc 1 355 0
 343 0152 DBB2     		uxtb	r3, r3
 344 0154 02FA03F3 		lsl	r3, r2, r3
ARM GAS  /tmp/ccgMVEFA.s 			page 25


 345 0158 0B43     		orrs	r3, r3, r1
 346 015a 0360     		str	r3, [r0]
 347 015c 11E0     		b	.L16
 348              	.LVL23:
 349              	.L20:
 356:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 357:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 358:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 359:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 360:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 350              		.loc 1 360 0
 351 015e 0022     		movs	r2, #0
 352 0160 574B     		ldr	r3, .L67+8
 353 0162 1A60     		str	r2, [r3]
 361:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 362:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 363:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 354              		.loc 1 363 0
 355 0164 FFF7FEFF 		bl	HAL_GetTick
 356              	.LVL24:
 357 0168 0546     		mov	r5, r0
 358              	.LVL25:
 364:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 365:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 366:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 359              		.loc 1 366 0
 360 016a 05E0     		b	.L23
 361              	.LVL26:
 362              	.L24:
 367:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 368:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 363              		.loc 1 368 0
 364 016c FFF7FEFF 		bl	HAL_GetTick
 365              	.LVL27:
 366 0170 401B     		subs	r0, r0, r5
 367 0172 6428     		cmp	r0, #100
 368 0174 00F21381 		bhi	.L54
 369              	.L23:
 366:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 370              		.loc 1 366 0
 371 0178 4F4B     		ldr	r3, .L67
 372 017a 1B68     		ldr	r3, [r3]
 373 017c 13F0020F 		tst	r3, #2
 374 0180 F4D1     		bne	.L24
 375              	.LVL28:
 376              	.L16:
 369:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 370:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 371:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 372:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 373:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 374:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 375:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 376:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 377:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 377              		.loc 1 377 0
 378 0182 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccgMVEFA.s 			page 26


 379 0184 13F0080F 		tst	r3, #8
 380 0188 26D0     		beq	.L25
 378:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 379:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 380:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 381:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 382:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSI State */
 383:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 381              		.loc 1 383 0
 382 018a 6369     		ldr	r3, [r4, #20]
 383 018c 93B1     		cbz	r3, .L26
 384:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 385:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 386:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 384              		.loc 1 386 0
 385 018e 0122     		movs	r2, #1
 386 0190 4C4B     		ldr	r3, .L67+12
 387 0192 1A60     		str	r2, [r3]
 387:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 388:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 389:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 388              		.loc 1 389 0
 389 0194 FFF7FEFF 		bl	HAL_GetTick
 390              	.LVL29:
 391 0198 0546     		mov	r5, r0
 392              	.LVL30:
 390:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 391:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */
 392:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 393              		.loc 1 392 0
 394 019a 05E0     		b	.L27
 395              	.LVL31:
 396              	.L28:
 393:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 394:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 397              		.loc 1 394 0
 398 019c FFF7FEFF 		bl	HAL_GetTick
 399              	.LVL32:
 400 01a0 401B     		subs	r0, r0, r5
 401 01a2 6428     		cmp	r0, #100
 402 01a4 00F2FD80 		bhi	.L55
 403              	.L27:
 392:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 404              		.loc 1 392 0
 405 01a8 434B     		ldr	r3, .L67
 406 01aa 5B6F     		ldr	r3, [r3, #116]
 407 01ac 13F0020F 		tst	r3, #2
 408 01b0 F4D0     		beq	.L28
 409 01b2 11E0     		b	.L25
 410              	.LVL33:
 411              	.L26:
 395:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 396:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 397:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 398:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 399:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 400:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
ARM GAS  /tmp/ccgMVEFA.s 			page 27


 401:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 402:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 403:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 412              		.loc 1 403 0
 413 01b4 0022     		movs	r2, #0
 414 01b6 434B     		ldr	r3, .L67+12
 415 01b8 1A60     		str	r2, [r3]
 404:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 405:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 406:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 416              		.loc 1 406 0
 417 01ba FFF7FEFF 		bl	HAL_GetTick
 418              	.LVL34:
 419 01be 0546     		mov	r5, r0
 420              	.LVL35:
 407:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 408:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 409:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 421              		.loc 1 409 0
 422 01c0 05E0     		b	.L29
 423              	.LVL36:
 424              	.L30:
 410:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 411:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 425              		.loc 1 411 0
 426 01c2 FFF7FEFF 		bl	HAL_GetTick
 427              	.LVL37:
 428 01c6 401B     		subs	r0, r0, r5
 429 01c8 6428     		cmp	r0, #100
 430 01ca 00F2EC80 		bhi	.L56
 431              	.L29:
 409:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 432              		.loc 1 409 0
 433 01ce 3A4B     		ldr	r3, .L67
 434 01d0 5B6F     		ldr	r3, [r3, #116]
 435 01d2 13F0020F 		tst	r3, #2
 436 01d6 F4D1     		bne	.L30
 437              	.LVL38:
 438              	.L25:
 412:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 413:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 414:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 415:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       } 
 416:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 417:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 418:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 419:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 439              		.loc 1 419 0
 440 01d8 2368     		ldr	r3, [r4]
 441 01da 13F0040F 		tst	r3, #4
 442 01de 56D0     		beq	.L31
 420:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 421:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 422:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 423:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 424:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable Power Clock*/
 425:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __PWR_CLK_ENABLE();
ARM GAS  /tmp/ccgMVEFA.s 			page 28


 443              		.loc 1 425 0
 444 01e0 354A     		ldr	r2, .L67
 445 01e2 136C     		ldr	r3, [r2, #64]
 446 01e4 43F08053 		orr	r3, r3, #268435456
 447 01e8 1364     		str	r3, [r2, #64]
 426:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 427:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable write access to Backup domain */
 428:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     PWR->CR |= PWR_CR_DBP;
 448              		.loc 1 428 0
 449 01ea A2F5E432 		sub	r2, r2, #116736
 450 01ee 1368     		ldr	r3, [r2]
 451 01f0 43F48073 		orr	r3, r3, #256
 452 01f4 1360     		str	r3, [r2]
 429:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 430:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Wait for Backup domain Write protection disable */
 431:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 453              		.loc 1 431 0
 454 01f6 FFF7FEFF 		bl	HAL_GetTick
 455              	.LVL39:
 456 01fa 0546     		mov	r5, r0
 457              	.LVL40:
 432:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 433:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 458              		.loc 1 433 0
 459 01fc 05E0     		b	.L32
 460              	.LVL41:
 461              	.L33:
 434:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 435:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > DBP_TIMEOUT_VALUE)
 462              		.loc 1 435 0
 463 01fe FFF7FEFF 		bl	HAL_GetTick
 464              	.LVL42:
 465 0202 401B     		subs	r0, r0, r5
 466 0204 6428     		cmp	r0, #100
 467 0206 00F2D080 		bhi	.L57
 468              	.L32:
 433:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 469              		.loc 1 433 0
 470 020a 2F4B     		ldr	r3, .L67+16
 471 020c 1B68     		ldr	r3, [r3]
 472 020e 13F4807F 		tst	r3, #256
 473 0212 F4D0     		beq	.L33
 436:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 437:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 438:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }      
 439:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 440:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 441:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
 442:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 474              		.loc 1 442 0
 475 0214 0022     		movs	r2, #0
 476 0216 2D4B     		ldr	r3, .L67+20
 477 0218 1A70     		strb	r2, [r3]
 443:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 444:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Get Start Tick*/
 445:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 478              		.loc 1 445 0
ARM GAS  /tmp/ccgMVEFA.s 			page 29


 479 021a FFF7FEFF 		bl	HAL_GetTick
 480              	.LVL43:
 481 021e 0546     		mov	r5, r0
 482              	.LVL44:
 446:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 447:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Wait till LSE is ready */  
 448:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 483              		.loc 1 448 0
 484 0220 07E0     		b	.L34
 485              	.LVL45:
 486              	.L35:
 449:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 450:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > LSE_TIMEOUT_VALUE)
 487              		.loc 1 450 0
 488 0222 FFF7FEFF 		bl	HAL_GetTick
 489              	.LVL46:
 490 0226 401B     		subs	r0, r0, r5
 491 0228 41F28833 		movw	r3, #5000
 492 022c 9842     		cmp	r0, r3
 493 022e 00F2BE80 		bhi	.L58
 494              	.L34:
 448:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 495              		.loc 1 448 0
 496 0232 214B     		ldr	r3, .L67
 497 0234 1B6F     		ldr	r3, [r3, #112]
 498 0236 13F0020F 		tst	r3, #2
 499 023a F2D1     		bne	.L35
 451:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 452:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 453:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }    
 454:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     } 
 455:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 456:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 457:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 500              		.loc 1 457 0
 501 023c 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 502 023e 234B     		ldr	r3, .L67+20
 503 0240 1A70     		strb	r2, [r3]
 458:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSE State */
 459:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 504              		.loc 1 459 0
 505 0242 A368     		ldr	r3, [r4, #8]
 506 0244 012B     		cmp	r3, #1
 507 0246 11D1     		bne	.L36
 460:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 461:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 462:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 508              		.loc 1 462 0
 509 0248 FFF7FEFF 		bl	HAL_GetTick
 510              	.LVL47:
 511 024c 0546     		mov	r5, r0
 512              	.LVL48:
 463:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 464:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 465:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 513              		.loc 1 465 0
 514 024e 07E0     		b	.L37
ARM GAS  /tmp/ccgMVEFA.s 			page 30


 515              	.LVL49:
 516              	.L38:
 466:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 467:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSE_TIMEOUT_VALUE)
 517              		.loc 1 467 0
 518 0250 FFF7FEFF 		bl	HAL_GetTick
 519              	.LVL50:
 520 0254 401B     		subs	r0, r0, r5
 521 0256 41F28833 		movw	r3, #5000
 522 025a 9842     		cmp	r0, r3
 523 025c 00F2A980 		bhi	.L59
 524              	.L37:
 465:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 525              		.loc 1 465 0
 526 0260 154B     		ldr	r3, .L67
 527 0262 1B6F     		ldr	r3, [r3, #112]
 528 0264 13F0020F 		tst	r3, #2
 529 0268 F2D0     		beq	.L38
 530 026a 10E0     		b	.L31
 531              	.L36:
 468:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 469:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 470:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 471:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 472:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 473:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 474:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 475:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 476:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 532              		.loc 1 476 0
 533 026c FFF7FEFF 		bl	HAL_GetTick
 534              	.LVL51:
 535 0270 0546     		mov	r5, r0
 536              	.LVL52:
 477:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 478:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 479:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 537              		.loc 1 479 0
 538 0272 07E0     		b	.L39
 539              	.LVL53:
 540              	.L40:
 480:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 481:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSE_TIMEOUT_VALUE)
 541              		.loc 1 481 0
 542 0274 FFF7FEFF 		bl	HAL_GetTick
 543              	.LVL54:
 544 0278 401B     		subs	r0, r0, r5
 545 027a 41F28833 		movw	r3, #5000
 546 027e 9842     		cmp	r0, r3
 547 0280 00F29980 		bhi	.L60
 548              	.L39:
 479:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 549              		.loc 1 479 0
 550 0284 0C4B     		ldr	r3, .L67
 551 0286 1B6F     		ldr	r3, [r3, #112]
 552 0288 13F0020F 		tst	r3, #2
 553 028c F2D1     		bne	.L40
ARM GAS  /tmp/ccgMVEFA.s 			page 31


 554              	.LVL55:
 555              	.L31:
 482:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 483:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 484:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 485:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 486:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 487:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 488:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 489:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 490:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 491:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 556              		.loc 1 491 0
 557 028e A369     		ldr	r3, [r4, #24]
 558 0290 002B     		cmp	r3, #0
 559 0292 00F09280 		beq	.L61
 492:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 493:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 494:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 560              		.loc 1 494 0
 561 0296 084A     		ldr	r2, .L67
 562 0298 9268     		ldr	r2, [r2, #8]
 563 029a 02F00C02 		and	r2, r2, #12
 564 029e 082A     		cmp	r2, #8
 565 02a0 00F08D80 		beq	.L62
 495:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     { 
 496:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 566              		.loc 1 496 0
 567 02a4 022B     		cmp	r3, #2
 568 02a6 5BD1     		bne	.L41
 497:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 498:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the parameters */
 499:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 500:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 501:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 502:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 503:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 504:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 505:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 506:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 569              		.loc 1 506 0
 570 02a8 0022     		movs	r2, #0
 571 02aa 094B     		ldr	r3, .L67+24
 572 02ac 1A60     		str	r2, [r3]
 507:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 508:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 509:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 573              		.loc 1 509 0
 574 02ae FFF7FEFF 		bl	HAL_GetTick
 575              	.LVL56:
 576 02b2 0546     		mov	r5, r0
 577              	.LVL57:
 510:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 511:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 512:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 578              		.loc 1 512 0
 579 02b4 13E0     		b	.L42
ARM GAS  /tmp/ccgMVEFA.s 			page 32


 580              	.L68:
 581 02b6 00BF     		.align	2
 582              	.L67:
 583 02b8 00380240 		.word	1073887232
 584 02bc 02380240 		.word	1073887234
 585 02c0 00004742 		.word	1111949312
 586 02c4 800E4742 		.word	1111953024
 587 02c8 00700040 		.word	1073770496
 588 02cc 70380240 		.word	1073887344
 589 02d0 60004742 		.word	1111949408
 590              	.LVL58:
 591              	.L43:
 513:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 514:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 592              		.loc 1 514 0
 593 02d4 FFF7FEFF 		bl	HAL_GetTick
 594              	.LVL59:
 595 02d8 401B     		subs	r0, r0, r5
 596 02da 6428     		cmp	r0, #100
 597 02dc 71D8     		bhi	.L63
 598              	.L42:
 512:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 599              		.loc 1 512 0
 600 02de 3C4B     		ldr	r3, .L69
 601 02e0 1B68     		ldr	r3, [r3]
 602 02e2 13F0007F 		tst	r3, #33554432
 603 02e6 F5D1     		bne	.L43
 515:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 516:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 517:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 518:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }        
 519:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 520:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 521:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 604              		.loc 1 521 0
 605 02e8 216A     		ldr	r1, [r4, #32]
 606 02ea 626A     		ldr	r2, [r4, #36]
 607              	.LVL60:
 608              	.LBB74:
 609              	.LBB75:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 610              		.loc 2 491 0
 611 02ec 47F6C073 		movw	r3, #32704
 612              		.syntax unified
 613              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 614 02f0 93FAA3F3 		rbit r3, r3
 615              	@ 0 "" 2
 616              	.LVL61:
 617              		.thumb
 618              		.syntax unified
 619              	.LBE75:
 620              	.LBE74:
 621              	.LBB76:
 622              	.LBB77:
 623              		.loc 2 666 0
 624              		.syntax unified
 625              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
ARM GAS  /tmp/ccgMVEFA.s 			page 33


 626 02f4 B3FA83F3 		clz r3, r3
 627              	@ 0 "" 2
 628              		.thumb
 629              		.syntax unified
 630              	.LBE77:
 631              	.LBE76:
 632              		.loc 1 521 0
 633 02f8 DBB2     		uxtb	r3, r3
 634 02fa 02FA03F3 		lsl	r3, r2, r3
 635 02fe 1943     		orrs	r1, r1, r3
 636 0300 A36A     		ldr	r3, [r4, #40]
 637 0302 5B08     		lsrs	r3, r3, #1
 638 0304 5A1E     		subs	r2, r3, #1
 639              	.LVL62:
 640              	.LBB78:
 641              	.LBB79:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 642              		.loc 2 491 0
 643 0306 4FF44033 		mov	r3, #196608
 644              		.syntax unified
 645              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 646 030a 93FAA3F3 		rbit r3, r3
 647              	@ 0 "" 2
 648              	.LVL63:
 649              		.thumb
 650              		.syntax unified
 651              	.LBE79:
 652              	.LBE78:
 653              	.LBB80:
 654              	.LBB81:
 655              		.loc 2 666 0
 656              		.syntax unified
 657              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 658 030e B3FA83F3 		clz r3, r3
 659              	@ 0 "" 2
 660              		.thumb
 661              		.syntax unified
 662              	.LBE81:
 663              	.LBE80:
 664              		.loc 1 521 0
 665 0312 DBB2     		uxtb	r3, r3
 666 0314 02FA03F3 		lsl	r3, r2, r3
 667 0318 0B43     		orrs	r3, r3, r1
 668 031a E269     		ldr	r2, [r4, #28]
 669 031c 1343     		orrs	r3, r3, r2
 670 031e E26A     		ldr	r2, [r4, #44]
 671              	.LVL64:
 672              	.LBB82:
 673              	.LBB83:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 674              		.loc 2 491 0
 675 0320 4FF07061 		mov	r1, #251658240
 676              		.syntax unified
 677              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 678 0324 91FAA1F1 		rbit r1, r1
 679              	@ 0 "" 2
 680              	.LVL65:
ARM GAS  /tmp/ccgMVEFA.s 			page 34


 681              		.thumb
 682              		.syntax unified
 683              	.LBE83:
 684              	.LBE82:
 685              	.LBB84:
 686              	.LBB85:
 687              		.loc 2 666 0
 688              		.syntax unified
 689              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 690 0328 B1FA81F1 		clz r1, r1
 691              	@ 0 "" 2
 692              		.thumb
 693              		.syntax unified
 694              	.LBE85:
 695              	.LBE84:
 696              		.loc 1 521 0
 697 032c C9B2     		uxtb	r1, r1
 698 032e 8A40     		lsls	r2, r2, r1
 699 0330 1343     		orrs	r3, r3, r2
 700 0332 43F00053 		orr	r3, r3, #536870912
 701 0336 264A     		ldr	r2, .L69
 702 0338 5360     		str	r3, [r2, #4]
 522:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 523:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 524:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 525:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ);
 526:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the main PLL. */
 527:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 703              		.loc 1 527 0
 704 033a 0122     		movs	r2, #1
 705 033c 254B     		ldr	r3, .L69+4
 706 033e 1A60     		str	r2, [r3]
 528:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 529:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 530:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 707              		.loc 1 530 0
 708 0340 FFF7FEFF 		bl	HAL_GetTick
 709              	.LVL66:
 710 0344 0446     		mov	r4, r0
 711              	.LVL67:
 531:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 532:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 533:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 712              		.loc 1 533 0
 713 0346 04E0     		b	.L44
 714              	.LVL68:
 715              	.L45:
 534:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 535:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 716              		.loc 1 535 0
 717 0348 FFF7FEFF 		bl	HAL_GetTick
 718              	.LVL69:
 719 034c 001B     		subs	r0, r0, r4
 720 034e 6428     		cmp	r0, #100
 721 0350 39D8     		bhi	.L64
 722              	.L44:
 533:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
ARM GAS  /tmp/ccgMVEFA.s 			page 35


 723              		.loc 1 533 0
 724 0352 1F4B     		ldr	r3, .L69
 725 0354 1B68     		ldr	r3, [r3]
 726 0356 13F0007F 		tst	r3, #33554432
 727 035a F5D0     		beq	.L45
 536:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 537:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 538:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 539:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 540:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 541:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 542:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 543:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 544:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 545:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 546:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 547:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 548:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 549:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 550:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 551:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 552:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 553:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 554:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 555:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 556:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 557:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 558:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 559:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 560:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 561:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 562:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 563:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 564:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 728              		.loc 1 564 0
 729 035c 0020     		movs	r0, #0
 730 035e 38BD     		pop	{r3, r4, r5, pc}
 731              	.LVL70:
 732              	.L41:
 544:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 733              		.loc 1 544 0
 734 0360 0022     		movs	r2, #0
 735 0362 1C4B     		ldr	r3, .L69+4
 736 0364 1A60     		str	r2, [r3]
 547:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 737              		.loc 1 547 0
 738 0366 FFF7FEFF 		bl	HAL_GetTick
 739              	.LVL71:
 740 036a 0446     		mov	r4, r0
 741              	.LVL72:
 550:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 742              		.loc 1 550 0
 743 036c 04E0     		b	.L46
 744              	.LVL73:
 745              	.L47:
 552:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 746              		.loc 1 552 0
ARM GAS  /tmp/ccgMVEFA.s 			page 36


 747 036e FFF7FEFF 		bl	HAL_GetTick
 748              	.LVL74:
 749 0372 001B     		subs	r0, r0, r4
 750 0374 6428     		cmp	r0, #100
 751 0376 28D8     		bhi	.L65
 752              	.L46:
 550:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 753              		.loc 1 550 0
 754 0378 154B     		ldr	r3, .L69
 755 037a 1B68     		ldr	r3, [r3]
 756 037c 13F0007F 		tst	r3, #33554432
 757 0380 F5D1     		bne	.L47
 758              		.loc 1 564 0
 759 0382 0020     		movs	r0, #0
 760 0384 38BD     		pop	{r3, r4, r5, pc}
 761              	.LVL75:
 762              	.L48:
 258:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 763              		.loc 1 258 0
 764 0386 0120     		movs	r0, #1
 765              	.LVL76:
 766 0388 38BD     		pop	{r3, r4, r5, pc}
 767              	.LVL77:
 768              	.L49:
 274:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 769              		.loc 1 274 0
 770 038a 0320     		movs	r0, #3
 771 038c 38BD     		pop	{r3, r4, r5, pc}
 772              	.LVL78:
 773              	.L50:
 292:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 774              		.loc 1 292 0
 775 038e 0320     		movs	r0, #3
 776 0390 38BD     		pop	{r3, r4, r5, pc}
 777              	.LVL79:
 778              	.L51:
 306:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 779              		.loc 1 306 0
 780 0392 0320     		movs	r0, #3
 781 0394 38BD     		pop	{r3, r4, r5, pc}
 782              	.LVL80:
 783              	.L52:
 325:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 784              		.loc 1 325 0
 785 0396 0120     		movs	r0, #1
 786 0398 38BD     		pop	{r3, r4, r5, pc}
 787              	.LVL81:
 788              	.L53:
 350:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }       
 789              		.loc 1 350 0
 790 039a 0320     		movs	r0, #3
 791 039c 38BD     		pop	{r3, r4, r5, pc}
 792              	.LVL82:
 793              	.L54:
 370:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 794              		.loc 1 370 0
 795 039e 0320     		movs	r0, #3
ARM GAS  /tmp/ccgMVEFA.s 			page 37


 796 03a0 38BD     		pop	{r3, r4, r5, pc}
 797              	.LVL83:
 798              	.L55:
 396:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 799              		.loc 1 396 0
 800 03a2 0320     		movs	r0, #3
 801 03a4 38BD     		pop	{r3, r4, r5, pc}
 802              	.LVL84:
 803              	.L56:
 413:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 804              		.loc 1 413 0
 805 03a6 0320     		movs	r0, #3
 806 03a8 38BD     		pop	{r3, r4, r5, pc}
 807              	.LVL85:
 808              	.L57:
 437:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }      
 809              		.loc 1 437 0
 810 03aa 0320     		movs	r0, #3
 811 03ac 38BD     		pop	{r3, r4, r5, pc}
 812              	.LVL86:
 813              	.L58:
 452:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }    
 814              		.loc 1 452 0
 815 03ae 0320     		movs	r0, #3
 816 03b0 38BD     		pop	{r3, r4, r5, pc}
 817              	.LVL87:
 818              	.L59:
 469:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 819              		.loc 1 469 0
 820 03b2 0320     		movs	r0, #3
 821 03b4 38BD     		pop	{r3, r4, r5, pc}
 822              	.LVL88:
 823              	.L60:
 483:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 824              		.loc 1 483 0
 825 03b6 0320     		movs	r0, #3
 826 03b8 38BD     		pop	{r3, r4, r5, pc}
 827              	.LVL89:
 828              	.L61:
 829              		.loc 1 564 0
 830 03ba 0020     		movs	r0, #0
 831 03bc 38BD     		pop	{r3, r4, r5, pc}
 832              	.LVL90:
 833              	.L62:
 561:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 834              		.loc 1 561 0
 835 03be 0120     		movs	r0, #1
 836 03c0 38BD     		pop	{r3, r4, r5, pc}
 837              	.LVL91:
 838              	.L63:
 516:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 839              		.loc 1 516 0
 840 03c2 0320     		movs	r0, #3
 841 03c4 38BD     		pop	{r3, r4, r5, pc}
 842              	.LVL92:
 843              	.L64:
 537:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
ARM GAS  /tmp/ccgMVEFA.s 			page 38


 844              		.loc 1 537 0
 845 03c6 0320     		movs	r0, #3
 846 03c8 38BD     		pop	{r3, r4, r5, pc}
 847              	.LVL93:
 848              	.L65:
 554:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 849              		.loc 1 554 0
 850 03ca 0320     		movs	r0, #3
 565:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 851              		.loc 1 565 0
 852 03cc 38BD     		pop	{r3, r4, r5, pc}
 853              	.LVL94:
 854              	.L70:
 855 03ce 00BF     		.align	2
 856              	.L69:
 857 03d0 00380240 		.word	1073887232
 858 03d4 60004742 		.word	1111949408
 859              		.cfi_endproc
 860              	.LFE113:
 862              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 863              		.align	2
 864              		.global	HAL_RCC_ClockConfig
 865              		.thumb
 866              		.thumb_func
 868              	HAL_RCC_ClockConfig:
 869              	.LFB114:
 566:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 567:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 568:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified 
 569:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 570:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 571:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 572:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 573:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
 574:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 575:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 576:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
 577:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 578:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 579:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 580:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 581:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 582:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 583:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 584:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 585:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 586:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 587:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 588:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 589:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 590:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 591:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 592:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 593:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 870              		.loc 1 593 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccgMVEFA.s 			page 39


 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              	.LVL95:
 875 0000 70B5     		push	{r4, r5, r6, lr}
 876              	.LCFI1:
 877              		.cfi_def_cfa_offset 16
 878              		.cfi_offset 4, -16
 879              		.cfi_offset 5, -12
 880              		.cfi_offset 6, -8
 881              		.cfi_offset 14, -4
 882 0002 0446     		mov	r4, r0
 883 0004 0D46     		mov	r5, r1
 884              	.LVL96:
 594:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart = 0;   
 595:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 596:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 597:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 598:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 599:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 600:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 601:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock 
 602:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
 603:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 604:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 605:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 885              		.loc 1 605 0
 886 0006 874B     		ldr	r3, .L117
 887 0008 1B68     		ldr	r3, [r3]
 888 000a 03F00F03 		and	r3, r3, #15
 889 000e 8B42     		cmp	r3, r1
 890 0010 6BD2     		bcs	.L72
 606:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {    
 607:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 608:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 891              		.loc 1 608 0
 892 0012 CAB2     		uxtb	r2, r1
 893 0014 834B     		ldr	r3, .L117
 894 0016 1A70     		strb	r2, [r3]
 609:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 610:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 611:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 612:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 895              		.loc 1 612 0
 896 0018 1B68     		ldr	r3, [r3]
 897 001a 03F00F03 		and	r3, r3, #15
 898 001e 9942     		cmp	r1, r3
 899 0020 40F0E480 		bne	.L100
 613:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 614:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 615:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 616:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 617:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 618:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 900              		.loc 1 618 0
 901 0024 0368     		ldr	r3, [r0]
 902 0026 13F0020F 		tst	r3, #2
 903 002a 06D0     		beq	.L74
 619:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
ARM GAS  /tmp/ccgMVEFA.s 			page 40


 620:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 621:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 904              		.loc 1 621 0
 905 002c 7E49     		ldr	r1, .L117+4
 906              	.LVL97:
 907 002e 8B68     		ldr	r3, [r1, #8]
 908 0030 23F0F002 		bic	r2, r3, #240
 909 0034 8368     		ldr	r3, [r0, #8]
 910 0036 1343     		orrs	r3, r3, r2
 911 0038 8B60     		str	r3, [r1, #8]
 912              	.L74:
 622:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 623:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 624:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration ---------------------------*/ 
 625:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 913              		.loc 1 625 0
 914 003a 2368     		ldr	r3, [r4]
 915 003c 13F0010F 		tst	r3, #1
 916 0040 00F0B880 		beq	.L75
 626:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {    
 627:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 628:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 629:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 630:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 917              		.loc 1 630 0
 918 0044 6268     		ldr	r2, [r4, #4]
 919 0046 012A     		cmp	r2, #1
 920 0048 05D1     		bne	.L76
 631:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 632:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 633:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 921              		.loc 1 633 0
 922 004a 774B     		ldr	r3, .L117+4
 923 004c 1B68     		ldr	r3, [r3]
 924 004e 13F4003F 		tst	r3, #131072
 925 0052 0ED1     		bne	.L77
 926 0054 CCE0     		b	.L101
 927              	.L76:
 634:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 635:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 636:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 637:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 638:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 639:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 928              		.loc 1 639 0
 929 0056 022A     		cmp	r2, #2
 930 0058 05D1     		bne	.L78
 640:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 641:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 642:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 931              		.loc 1 642 0
 932 005a 734B     		ldr	r3, .L117+4
 933 005c 1B68     		ldr	r3, [r3]
 934 005e 13F0007F 		tst	r3, #33554432
 935 0062 06D1     		bne	.L77
 936 0064 C6E0     		b	.L102
 937              	.L78:
ARM GAS  /tmp/ccgMVEFA.s 			page 41


 643:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 644:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 645:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 646:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 647:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 648:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 649:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 650:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 651:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 938              		.loc 1 651 0
 939 0066 704B     		ldr	r3, .L117+4
 940 0068 1B68     		ldr	r3, [r3]
 941 006a 13F0020F 		tst	r3, #2
 942 006e 00F0C380 		beq	.L103
 943              	.L77:
 652:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 653:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 654:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 655:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 656:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 944              		.loc 1 656 0
 945 0072 6D49     		ldr	r1, .L117+4
 946 0074 8B68     		ldr	r3, [r1, #8]
 947 0076 23F00303 		bic	r3, r3, #3
 948 007a 1343     		orrs	r3, r3, r2
 949 007c 8B60     		str	r3, [r1, #8]
 657:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 658:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 659:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 950              		.loc 1 659 0
 951 007e FFF7FEFF 		bl	HAL_GetTick
 952              	.LVL98:
 953 0082 0546     		mov	r5, r0
 954              	.LVL99:
 660:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 661:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 955              		.loc 1 661 0
 956 0084 6368     		ldr	r3, [r4, #4]
 957 0086 012B     		cmp	r3, #1
 958 0088 0FD1     		bne	.L114
 959 008a 07E0     		b	.L79
 960              	.LVL100:
 961              	.L81:
 662:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 663:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 664:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 665:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 962              		.loc 1 665 0
 963 008c FFF7FEFF 		bl	HAL_GetTick
 964              	.LVL101:
 965 0090 401B     		subs	r0, r0, r5
 966 0092 41F28833 		movw	r3, #5000
 967 0096 9842     		cmp	r0, r3
 968 0098 00F2B080 		bhi	.L104
 969              	.L79:
 663:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 970              		.loc 1 663 0
ARM GAS  /tmp/ccgMVEFA.s 			page 42


 971 009c 624B     		ldr	r3, .L117+4
 972 009e 9B68     		ldr	r3, [r3, #8]
 973 00a0 03F00C03 		and	r3, r3, #12
 974 00a4 042B     		cmp	r3, #4
 975 00a6 F1D1     		bne	.L81
 976 00a8 84E0     		b	.L75
 977              	.LVL102:
 978              	.L114:
 666:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 667:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 668:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 669:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 670:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 671:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 979              		.loc 1 671 0
 980 00aa 022B     		cmp	r3, #2
 981 00ac 17D1     		bne	.L83
 982 00ae 07E0     		b	.L82
 983              	.LVL103:
 984              	.L84:
 672:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 673:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 674:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 675:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 985              		.loc 1 675 0
 986 00b0 FFF7FEFF 		bl	HAL_GetTick
 987              	.LVL104:
 988 00b4 401B     		subs	r0, r0, r5
 989 00b6 41F28833 		movw	r3, #5000
 990 00ba 9842     		cmp	r0, r3
 991 00bc 00F2A080 		bhi	.L105
 992              	.L82:
 673:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 993              		.loc 1 673 0
 994 00c0 594B     		ldr	r3, .L117+4
 995 00c2 9B68     		ldr	r3, [r3, #8]
 996 00c4 03F00C03 		and	r3, r3, #12
 997 00c8 082B     		cmp	r3, #8
 998 00ca F1D1     		bne	.L84
 999 00cc 72E0     		b	.L75
 1000              	.L85:
 676:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 677:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 678:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 679:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 680:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 681:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 682:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 683:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 684:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 685:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1001              		.loc 1 685 0
 1002 00ce FFF7FEFF 		bl	HAL_GetTick
 1003              	.LVL105:
 1004 00d2 401B     		subs	r0, r0, r5
 1005 00d4 41F28833 		movw	r3, #5000
 1006 00d8 9842     		cmp	r0, r3
ARM GAS  /tmp/ccgMVEFA.s 			page 43


 1007 00da 00F29380 		bhi	.L106
 1008              	.L83:
 683:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1009              		.loc 1 683 0
 1010 00de 524B     		ldr	r3, .L117+4
 1011 00e0 9B68     		ldr	r3, [r3, #8]
 1012 00e2 13F00C0F 		tst	r3, #12
 1013 00e6 F2D1     		bne	.L85
 1014 00e8 64E0     		b	.L75
 1015              	.LVL106:
 1016              	.L72:
 686:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 687:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 688:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 689:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 690:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 691:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }    
 692:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 693:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Decreasing the CPU frequency */
 694:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 695:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 696:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 697:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1017              		.loc 1 697 0
 1018 00ea 0368     		ldr	r3, [r0]
 1019 00ec 13F0020F 		tst	r3, #2
 1020 00f0 06D0     		beq	.L86
 698:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 699:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 700:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1021              		.loc 1 700 0
 1022 00f2 4D49     		ldr	r1, .L117+4
 1023              	.LVL107:
 1024 00f4 8B68     		ldr	r3, [r1, #8]
 1025 00f6 23F0F002 		bic	r2, r3, #240
 1026 00fa 8368     		ldr	r3, [r0, #8]
 1027 00fc 1343     		orrs	r3, r3, r2
 1028 00fe 8B60     		str	r3, [r1, #8]
 1029              	.L86:
 701:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 702:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 703:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration -------------------------*/
 704:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1030              		.loc 1 704 0
 1031 0100 2368     		ldr	r3, [r4]
 1032 0102 13F0010F 		tst	r3, #1
 1033 0106 4DD0     		beq	.L87
 705:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {    
 706:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 707:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 708:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 709:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1034              		.loc 1 709 0
 1035 0108 6268     		ldr	r2, [r4, #4]
 1036 010a 012A     		cmp	r2, #1
 1037 010c 05D1     		bne	.L88
 710:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccgMVEFA.s 			page 44


 711:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 712:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1038              		.loc 1 712 0
 1039 010e 464B     		ldr	r3, .L117+4
 1040 0110 1B68     		ldr	r3, [r3]
 1041 0112 13F4003F 		tst	r3, #131072
 1042 0116 0DD1     		bne	.L89
 1043 0118 76E0     		b	.L107
 1044              	.L88:
 713:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 714:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 715:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 716:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 717:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 718:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1045              		.loc 1 718 0
 1046 011a 022A     		cmp	r2, #2
 1047 011c 05D1     		bne	.L90
 719:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 720:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 721:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1048              		.loc 1 721 0
 1049 011e 424B     		ldr	r3, .L117+4
 1050 0120 1B68     		ldr	r3, [r3]
 1051 0122 13F0007F 		tst	r3, #33554432
 1052 0126 05D1     		bne	.L89
 1053 0128 70E0     		b	.L108
 1054              	.L90:
 722:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 723:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 724:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 725:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 726:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 727:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 728:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 729:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 730:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1055              		.loc 1 730 0
 1056 012a 3F4B     		ldr	r3, .L117+4
 1057 012c 1B68     		ldr	r3, [r3]
 1058 012e 13F0020F 		tst	r3, #2
 1059 0132 6DD0     		beq	.L109
 1060              	.L89:
 731:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 732:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 733:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 734:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 735:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 1061              		.loc 1 735 0
 1062 0134 3C49     		ldr	r1, .L117+4
 1063 0136 8B68     		ldr	r3, [r1, #8]
 1064 0138 23F00303 		bic	r3, r3, #3
 1065 013c 1343     		orrs	r3, r3, r2
 1066 013e 8B60     		str	r3, [r1, #8]
 736:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 737:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 738:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
ARM GAS  /tmp/ccgMVEFA.s 			page 45


 1067              		.loc 1 738 0
 1068 0140 FFF7FEFF 		bl	HAL_GetTick
 1069              	.LVL108:
 1070 0144 0646     		mov	r6, r0
 1071              	.LVL109:
 739:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 740:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1072              		.loc 1 740 0
 1073 0146 6368     		ldr	r3, [r4, #4]
 1074 0148 012B     		cmp	r3, #1
 1075 014a 0ED1     		bne	.L115
 1076 014c 06E0     		b	.L91
 1077              	.LVL110:
 1078              	.L93:
 741:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 742:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 743:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 744:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1079              		.loc 1 744 0
 1080 014e FFF7FEFF 		bl	HAL_GetTick
 1081              	.LVL111:
 1082 0152 801B     		subs	r0, r0, r6
 1083 0154 41F28833 		movw	r3, #5000
 1084 0158 9842     		cmp	r0, r3
 1085 015a 5BD8     		bhi	.L110
 1086              	.L91:
 742:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1087              		.loc 1 742 0
 1088 015c 324B     		ldr	r3, .L117+4
 1089 015e 9B68     		ldr	r3, [r3, #8]
 1090 0160 03F00C03 		and	r3, r3, #12
 1091 0164 042B     		cmp	r3, #4
 1092 0166 F2D1     		bne	.L93
 1093 0168 1CE0     		b	.L87
 1094              	.LVL112:
 1095              	.L115:
 745:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 746:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 747:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 748:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 749:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 750:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1096              		.loc 1 750 0
 1097 016a 022B     		cmp	r3, #2
 1098 016c 15D1     		bne	.L95
 1099 016e 06E0     		b	.L94
 1100              	.LVL113:
 1101              	.L96:
 751:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 752:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 753:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 754:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1102              		.loc 1 754 0
 1103 0170 FFF7FEFF 		bl	HAL_GetTick
 1104              	.LVL114:
 1105 0174 801B     		subs	r0, r0, r6
 1106 0176 41F28833 		movw	r3, #5000
ARM GAS  /tmp/ccgMVEFA.s 			page 46


 1107 017a 9842     		cmp	r0, r3
 1108 017c 4CD8     		bhi	.L111
 1109              	.L94:
 752:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1110              		.loc 1 752 0
 1111 017e 2A4B     		ldr	r3, .L117+4
 1112 0180 9B68     		ldr	r3, [r3, #8]
 1113 0182 03F00C03 		and	r3, r3, #12
 1114 0186 082B     		cmp	r3, #8
 1115 0188 F2D1     		bne	.L96
 1116 018a 0BE0     		b	.L87
 1117              	.L97:
 755:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 756:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 757:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 758:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 759:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 760:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 761:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 762:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 763:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 764:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1118              		.loc 1 764 0
 1119 018c FFF7FEFF 		bl	HAL_GetTick
 1120              	.LVL115:
 1121 0190 801B     		subs	r0, r0, r6
 1122 0192 41F28833 		movw	r3, #5000
 1123 0196 9842     		cmp	r0, r3
 1124 0198 40D8     		bhi	.L112
 1125              	.L95:
 762:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1126              		.loc 1 762 0
 1127 019a 234B     		ldr	r3, .L117+4
 1128 019c 9B68     		ldr	r3, [r3, #8]
 1129 019e 13F00C0F 		tst	r3, #12
 1130 01a2 F3D1     		bne	.L97
 1131              	.LVL116:
 1132              	.L87:
 765:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 766:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 767:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 768:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 769:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 770:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 771:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 772:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 773:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1133              		.loc 1 773 0
 1134 01a4 EAB2     		uxtb	r2, r5
 1135 01a6 1F4B     		ldr	r3, .L117
 1136 01a8 1A70     		strb	r2, [r3]
 774:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 775:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 776:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 777:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1137              		.loc 1 777 0
 1138 01aa 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccgMVEFA.s 			page 47


 1139 01ac 03F00F03 		and	r3, r3, #15
 1140 01b0 9D42     		cmp	r5, r3
 1141 01b2 35D1     		bne	.L113
 1142              	.LVL117:
 1143              	.L75:
 778:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 779:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 780:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 781:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  }
 782:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 783:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 784:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1144              		.loc 1 784 0
 1145 01b4 2368     		ldr	r3, [r4]
 1146 01b6 13F0040F 		tst	r3, #4
 1147 01ba 06D0     		beq	.L98
 785:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 786:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 787:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1148              		.loc 1 787 0
 1149 01bc 1A49     		ldr	r1, .L117+4
 1150 01be 8B68     		ldr	r3, [r1, #8]
 1151 01c0 23F4E052 		bic	r2, r3, #7168
 1152 01c4 E368     		ldr	r3, [r4, #12]
 1153 01c6 1343     		orrs	r3, r3, r2
 1154 01c8 8B60     		str	r3, [r1, #8]
 1155              	.L98:
 788:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 789:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 790:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 791:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1156              		.loc 1 791 0
 1157 01ca 2368     		ldr	r3, [r4]
 1158 01cc 13F0080F 		tst	r3, #8
 1159 01d0 07D0     		beq	.L99
 792:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 793:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 794:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1160              		.loc 1 794 0
 1161 01d2 154A     		ldr	r2, .L117+4
 1162 01d4 9368     		ldr	r3, [r2, #8]
 1163 01d6 23F46043 		bic	r3, r3, #57344
 1164 01da 2169     		ldr	r1, [r4, #16]
 1165 01dc 43EAC103 		orr	r3, r3, r1, lsl #3
 1166 01e0 9360     		str	r3, [r2, #8]
 1167              	.L99:
 795:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 796:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 797:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 798:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1168              		.loc 1 798 0
 1169 01e2 0020     		movs	r0, #0
 1170 01e4 FFF7FEFF 		bl	HAL_InitTick
 1171              	.LVL118:
 799:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 800:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 1172              		.loc 1 800 0
ARM GAS  /tmp/ccgMVEFA.s 			page 48


 1173 01e8 0020     		movs	r0, #0
 1174 01ea 70BD     		pop	{r4, r5, r6, pc}
 1175              	.LVL119:
 1176              	.L100:
 614:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 1177              		.loc 1 614 0
 1178 01ec 0120     		movs	r0, #1
 1179              	.LVL120:
 1180 01ee 70BD     		pop	{r4, r5, r6, pc}
 1181              	.LVL121:
 1182              	.L101:
 635:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1183              		.loc 1 635 0
 1184 01f0 0120     		movs	r0, #1
 1185              	.LVL122:
 1186 01f2 70BD     		pop	{r4, r5, r6, pc}
 1187              	.LVL123:
 1188              	.L102:
 644:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1189              		.loc 1 644 0
 1190 01f4 0120     		movs	r0, #1
 1191              	.LVL124:
 1192 01f6 70BD     		pop	{r4, r5, r6, pc}
 1193              	.LVL125:
 1194              	.L103:
 653:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1195              		.loc 1 653 0
 1196 01f8 0120     		movs	r0, #1
 1197              	.LVL126:
 1198 01fa 70BD     		pop	{r4, r5, r6, pc}
 1199              	.LVL127:
 1200              	.L104:
 667:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1201              		.loc 1 667 0
 1202 01fc 0320     		movs	r0, #3
 1203 01fe 70BD     		pop	{r4, r5, r6, pc}
 1204              	.LVL128:
 1205              	.L105:
 677:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1206              		.loc 1 677 0
 1207 0200 0320     		movs	r0, #3
 1208 0202 70BD     		pop	{r4, r5, r6, pc}
 1209              	.LVL129:
 1210              	.L106:
 687:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1211              		.loc 1 687 0
 1212 0204 0320     		movs	r0, #3
 1213 0206 70BD     		pop	{r4, r5, r6, pc}
 1214              	.LVL130:
 1215              	.L107:
 714:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1216              		.loc 1 714 0
 1217 0208 0120     		movs	r0, #1
 1218              	.LVL131:
 1219 020a 70BD     		pop	{r4, r5, r6, pc}
 1220              	.LVL132:
 1221              	.L108:
ARM GAS  /tmp/ccgMVEFA.s 			page 49


 723:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1222              		.loc 1 723 0
 1223 020c 0120     		movs	r0, #1
 1224              	.LVL133:
 1225 020e 70BD     		pop	{r4, r5, r6, pc}
 1226              	.LVL134:
 1227              	.L109:
 732:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 1228              		.loc 1 732 0
 1229 0210 0120     		movs	r0, #1
 1230              	.LVL135:
 1231 0212 70BD     		pop	{r4, r5, r6, pc}
 1232              	.LVL136:
 1233              	.L110:
 746:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 1234              		.loc 1 746 0
 1235 0214 0320     		movs	r0, #3
 1236 0216 70BD     		pop	{r4, r5, r6, pc}
 1237              	.LVL137:
 1238              	.L111:
 756:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 1239              		.loc 1 756 0
 1240 0218 0320     		movs	r0, #3
 1241 021a 70BD     		pop	{r4, r5, r6, pc}
 1242              	.LVL138:
 1243              	.L112:
 766:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 1244              		.loc 1 766 0
 1245 021c 0320     		movs	r0, #3
 1246 021e 70BD     		pop	{r4, r5, r6, pc}
 1247              	.LVL139:
 1248              	.L113:
 779:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 1249              		.loc 1 779 0
 1250 0220 0120     		movs	r0, #1
 801:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1251              		.loc 1 801 0
 1252 0222 70BD     		pop	{r4, r5, r6, pc}
 1253              	.LVL140:
 1254              	.L118:
 1255              		.align	2
 1256              	.L117:
 1257 0224 003C0240 		.word	1073888256
 1258 0228 00380240 		.word	1073887232
 1259              		.cfi_endproc
 1260              	.LFE114:
 1262              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1263              		.align	2
 1264              		.global	HAL_RCC_MCOConfig
 1265              		.thumb
 1266              		.thumb_func
 1268              	HAL_RCC_MCOConfig:
 1269              	.LFB115:
 802:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 803:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 804:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 805:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccgMVEFA.s 			page 50


 806:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 807:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Group2 Peripheral Control functions 
 808:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief   RCC clocks control functions 
 809:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 810:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim   
 811:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 812:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 813:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================  
 814:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 815:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 816:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     frequencies.
 817:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 818:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 819:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 820:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 821:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 822:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 823:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 824:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 825:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 826:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 827:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 828:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 829:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 830:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 831:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 832:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 833:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 834:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 835:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 836:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 837:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 838:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 839:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx prescaler.
 840:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 841:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 842:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 843:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 844:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 845:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 846:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 847:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 848:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 849:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1270              		.loc 1 849 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 24
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 1274              	.LVL141:
 1275 0000 70B5     		push	{r4, r5, r6, lr}
 1276              	.LCFI2:
 1277              		.cfi_def_cfa_offset 16
 1278              		.cfi_offset 4, -16
 1279              		.cfi_offset 5, -12
 1280              		.cfi_offset 6, -8
 1281              		.cfi_offset 14, -4
 1282 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccgMVEFA.s 			page 51


 1283              	.LCFI3:
 1284              		.cfi_def_cfa_offset 40
 1285 0004 0C46     		mov	r4, r1
 1286 0006 1646     		mov	r6, r2
 850:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 851:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 852:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 853:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 854:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* RCC_MCO1 */
 855:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1287              		.loc 1 855 0
 1288 0008 C8B9     		cbnz	r0, .L120
 856:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 857:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 858:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 859:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 860:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 1289              		.loc 1 860 0
 1290 000a 1B4D     		ldr	r5, .L123
 1291 000c 2B6B     		ldr	r3, [r5, #48]
 1292 000e 43F00103 		orr	r3, r3, #1
 1293 0012 2B63     		str	r3, [r5, #48]
 861:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 862:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configue the MCO1 pin in alternate function mode */    
 863:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 1294              		.loc 1 863 0
 1295 0014 4FF48073 		mov	r3, #256
 1296 0018 0193     		str	r3, [sp, #4]
 864:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1297              		.loc 1 864 0
 1298 001a 0223     		movs	r3, #2
 1299 001c 0293     		str	r3, [sp, #8]
 865:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1300              		.loc 1 865 0
 1301 001e 0323     		movs	r3, #3
 1302 0020 0493     		str	r3, [sp, #16]
 866:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1303              		.loc 1 866 0
 1304 0022 0023     		movs	r3, #0
 1305 0024 0393     		str	r3, [sp, #12]
 867:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1306              		.loc 1 867 0
 1307 0026 0593     		str	r3, [sp, #20]
 868:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1308              		.loc 1 868 0
 1309 0028 01A9     		add	r1, sp, #4
 1310              	.LVL142:
 1311 002a 1448     		ldr	r0, .L123+4
 1312              	.LVL143:
 1313 002c FFF7FEFF 		bl	HAL_GPIO_Init
 1314              	.LVL144:
 869:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 870:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 871:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 1315              		.loc 1 871 0
 1316 0030 AB68     		ldr	r3, [r5, #8]
 1317 0032 23F0EC63 		bic	r3, r3, #123731968
ARM GAS  /tmp/ccgMVEFA.s 			page 52


 1318 0036 3443     		orrs	r4, r4, r6
 1319              	.LVL145:
 1320 0038 1C43     		orrs	r4, r4, r3
 1321 003a AC60     		str	r4, [r5, #8]
 1322 003c 19E0     		b	.L119
 1323              	.LVL146:
 1324              	.L120:
 872:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 873:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 874:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 875:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 876:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 877:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 878:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 1325              		.loc 1 878 0
 1326 003e 0E4D     		ldr	r5, .L123
 1327 0040 2B6B     		ldr	r3, [r5, #48]
 1328 0042 43F00403 		orr	r3, r3, #4
 1329 0046 2B63     		str	r3, [r5, #48]
 879:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 880:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configue the MCO2 pin in alternate function mode */
 881:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 1330              		.loc 1 881 0
 1331 0048 4FF40073 		mov	r3, #512
 1332 004c 0193     		str	r3, [sp, #4]
 882:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1333              		.loc 1 882 0
 1334 004e 0223     		movs	r3, #2
 1335 0050 0293     		str	r3, [sp, #8]
 883:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1336              		.loc 1 883 0
 1337 0052 0323     		movs	r3, #3
 1338 0054 0493     		str	r3, [sp, #16]
 884:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1339              		.loc 1 884 0
 1340 0056 0023     		movs	r3, #0
 1341 0058 0393     		str	r3, [sp, #12]
 885:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1342              		.loc 1 885 0
 1343 005a 0593     		str	r3, [sp, #20]
 886:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1344              		.loc 1 886 0
 1345 005c 01A9     		add	r1, sp, #4
 1346              	.LVL147:
 1347 005e 0848     		ldr	r0, .L123+8
 1348              	.LVL148:
 1349 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 1350              	.LVL149:
 887:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 888:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 889:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 1351              		.loc 1 889 0
 1352 0064 AB68     		ldr	r3, [r5, #8]
 1353 0066 23F07843 		bic	r3, r3, #-134217728
 1354 006a 44EAC604 		orr	r4, r4, r6, lsl #3
 1355              	.LVL150:
 1356 006e 1C43     		orrs	r4, r4, r3
ARM GAS  /tmp/ccgMVEFA.s 			page 53


 1357 0070 AC60     		str	r4, [r5, #8]
 1358              	.L119:
 890:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 891:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1359              		.loc 1 891 0
 1360 0072 06B0     		add	sp, sp, #24
 1361              	.LCFI4:
 1362              		.cfi_def_cfa_offset 16
 1363              		@ sp needed
 1364 0074 70BD     		pop	{r4, r5, r6, pc}
 1365              	.LVL151:
 1366              	.L124:
 1367 0076 00BF     		.align	2
 1368              	.L123:
 1369 0078 00380240 		.word	1073887232
 1370 007c 00000240 		.word	1073872896
 1371 0080 00080240 		.word	1073874944
 1372              		.cfi_endproc
 1373              	.LFE115:
 1375              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1376              		.align	2
 1377              		.global	HAL_RCC_EnableCSS
 1378              		.thumb
 1379              		.thumb_func
 1381              	HAL_RCC_EnableCSS:
 1382              	.LFB116:
 892:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 893:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 894:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 895:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 896:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 897:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 898:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 899:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 900:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 901:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 902:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 903:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 904:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1383              		.loc 1 904 0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 1387              		@ link register save eliminated.
 905:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)ENABLE;
 1388              		.loc 1 905 0
 1389 0000 0122     		movs	r2, #1
 1390 0002 014B     		ldr	r3, .L126
 1391 0004 1A60     		str	r2, [r3]
 1392 0006 7047     		bx	lr
 1393              	.L127:
 1394              		.align	2
 1395              	.L126:
 1396 0008 4C004742 		.word	1111949388
 1397              		.cfi_endproc
 1398              	.LFE116:
 1400              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
ARM GAS  /tmp/ccgMVEFA.s 			page 54


 1401              		.align	2
 1402              		.global	HAL_RCC_DisableCSS
 1403              		.thumb
 1404              		.thumb_func
 1406              	HAL_RCC_DisableCSS:
 1407              	.LFB117:
 906:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 907:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 908:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 909:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 910:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 911:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 912:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 913:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 914:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1408              		.loc 1 914 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412              		@ link register save eliminated.
 915:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)DISABLE;
 1413              		.loc 1 915 0
 1414 0000 0022     		movs	r2, #0
 1415 0002 014B     		ldr	r3, .L129
 1416 0004 1A60     		str	r2, [r3]
 1417 0006 7047     		bx	lr
 1418              	.L130:
 1419              		.align	2
 1420              	.L129:
 1421 0008 4C004742 		.word	1111949388
 1422              		.cfi_endproc
 1423              	.LFE117:
 1425              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1426              		.align	2
 1427              		.global	HAL_RCC_GetSysClockFreq
 1428              		.thumb
 1429              		.thumb_func
 1431              	HAL_RCC_GetSysClockFreq:
 1432              	.LFB118:
 916:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 917:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 918:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 919:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 920:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *        
 921:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 922:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 923:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         constant and the selected clock source:
 924:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 925:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 926:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 927:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 928:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 929:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 930:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               in voltage and temperature.
 931:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 932:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 933:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
ARM GAS  /tmp/ccgMVEFA.s 			page 55


 934:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                have wrong result.
 935:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                  
 936:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 937:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         value for HSE crystal.
 938:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 939:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
 940:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 941:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 942:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 943:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 944:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         
 945:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               
 946:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
 947:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval SYSCLK frequency
 948:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 949:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 950:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1433              		.loc 1 950 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437              		@ link register save eliminated.
 1438              	.LVL152:
 951:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t pllm = 0, pllvco = 0, pllp = 0;
 952:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t sysclockfreq = 0;
 953:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 954:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 955:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1439              		.loc 1 955 0
 1440 0000 2B4B     		ldr	r3, .L140
 1441 0002 9B68     		ldr	r3, [r3, #8]
 1442 0004 03F00C03 		and	r3, r3, #12
 1443 0008 042B     		cmp	r3, #4
 1444 000a 4BD0     		beq	.L137
 1445 000c 082B     		cmp	r3, #8
 1446 000e 01D0     		beq	.L134
 956:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 957:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
 958:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 959:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1447              		.loc 1 959 0
 1448 0010 2848     		ldr	r0, .L140+4
 1449              	.LVL153:
 960:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        break;
 961:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 962:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
 963:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 964:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 965:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 966:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 967:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
 968:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 969:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 970:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
 971:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 972:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if (__RCC_PLLSRC() != 0)
 973:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccgMVEFA.s 			page 56


 974:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSE used as PLL clock source */
 975:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 976:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 977:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 978:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 979:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSI used as PLL clock source */
 980:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 981:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 982:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 983:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 984:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 985:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 986:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 987:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     default:
 988:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 989:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 990:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 991:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 992:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 993:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return sysclockfreq;
 994:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1450              		.loc 1 994 0
 1451 0012 7047     		bx	lr
 1452              	.LVL154:
 1453              	.L134:
 950:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t pllm = 0, pllvco = 0, pllp = 0;
 1454              		.loc 1 950 0
 1455 0014 10B4     		push	{r4}
 1456              	.LCFI5:
 1457              		.cfi_def_cfa_offset 4
 1458              		.cfi_offset 4, -4
 971:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if (__RCC_PLLSRC() != 0)
 1459              		.loc 1 971 0
 1460 0016 264B     		ldr	r3, .L140
 1461 0018 5868     		ldr	r0, [r3, #4]
 1462 001a 00F03F00 		and	r0, r0, #63
 1463              	.LVL155:
 972:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 1464              		.loc 1 972 0
 1465 001e 5968     		ldr	r1, [r3, #4]
 1466 0020 01F48001 		and	r1, r1, #4194304
 1467              	.LVL156:
 1468              	.LBB86:
 1469              	.LBB87:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1470              		.loc 2 491 0
 1471 0024 4FF48002 		mov	r2, #4194304
 1472              		.syntax unified
 1473              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1474 0028 92FAA2F2 		rbit r2, r2
 1475              	@ 0 "" 2
 1476              	.LVL157:
 1477              		.thumb
 1478              		.syntax unified
 1479              	.LBE87:
 1480              	.LBE86:
 1481              	.LBB88:
ARM GAS  /tmp/ccgMVEFA.s 			page 57


 1482              	.LBB89:
 1483              		.loc 2 666 0
 1484              		.syntax unified
 1485              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1486 002c B2FA82F2 		clz r2, r2
 1487              	@ 0 "" 2
 1488              		.thumb
 1489              		.syntax unified
 1490              	.LBE89:
 1491              	.LBE88:
 972:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 1492              		.loc 1 972 0
 1493 0030 D2B2     		uxtb	r2, r2
 1494 0032 31FA02F3 		lsrs	r3, r1, r2
 1495 0036 11D0     		beq	.L135
 975:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 1496              		.loc 1 975 0
 1497 0038 1F4B     		ldr	r3, .L140+8
 1498 003a B3FBF0F0 		udiv	r0, r3, r0
 1499              	.LVL158:
 1500 003e 1C4B     		ldr	r3, .L140
 1501 0040 5A68     		ldr	r2, [r3, #4]
 1502 0042 47F6C071 		movw	r1, #32704
 1503 0046 0A40     		ands	r2, r2, r1
 1504              	.LVL159:
 1505              	.LBB90:
 1506              	.LBB91:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1507              		.loc 2 491 0
 1508              		.syntax unified
 1509              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1510 0048 91FAA1F3 		rbit r3, r1
 1511              	@ 0 "" 2
 1512              	.LVL160:
 1513              		.thumb
 1514              		.syntax unified
 1515              	.LBE91:
 1516              	.LBE90:
 1517              	.LBB92:
 1518              	.LBB93:
 1519              		.loc 2 666 0
 1520              		.syntax unified
 1521              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1522 004c B3FA83F3 		clz r3, r3
 1523              	@ 0 "" 2
 1524              		.thumb
 1525              		.syntax unified
 1526              	.LBE93:
 1527              	.LBE92:
 975:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 1528              		.loc 1 975 0
 1529 0050 DBB2     		uxtb	r3, r3
 1530 0052 22FA03F3 		lsr	r3, r2, r3
 1531 0056 03FB00F3 		mul	r3, r3, r0
 1532              	.LVL161:
 1533 005a 11E0     		b	.L136
 1534              	.LVL162:
ARM GAS  /tmp/ccgMVEFA.s 			page 58


 1535              	.L135:
 980:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 1536              		.loc 1 980 0
 1537 005c 154B     		ldr	r3, .L140+4
 1538 005e B3FBF0F0 		udiv	r0, r3, r0
 1539              	.LVL163:
 1540 0062 134B     		ldr	r3, .L140
 1541 0064 5A68     		ldr	r2, [r3, #4]
 1542 0066 47F6C074 		movw	r4, #32704
 1543 006a 02EA0401 		and	r1, r2, r4
 1544              	.LVL164:
 1545              	.LBB94:
 1546              	.LBB95:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1547              		.loc 2 491 0
 1548              		.syntax unified
 1549              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1550 006e 94FAA4F2 		rbit r2, r4
 1551              	@ 0 "" 2
 1552              	.LVL165:
 1553              		.thumb
 1554              		.syntax unified
 1555              	.LBE95:
 1556              	.LBE94:
 1557              	.LBB96:
 1558              	.LBB97:
 1559              		.loc 2 666 0
 1560              		.syntax unified
 1561              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1562 0072 B2FA82F2 		clz r2, r2
 1563              	@ 0 "" 2
 1564              		.thumb
 1565              		.syntax unified
 1566              	.LBE97:
 1567              	.LBE96:
 980:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 1568              		.loc 1 980 0
 1569 0076 D2B2     		uxtb	r2, r2
 1570 0078 21FA02F2 		lsr	r2, r1, r2
 1571 007c 02FB00F3 		mul	r3, r2, r0
 1572              	.LVL166:
 1573              	.L136:
 982:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 1574              		.loc 1 982 0
 1575 0080 0B4A     		ldr	r2, .L140
 1576 0082 5068     		ldr	r0, [r2, #4]
 1577 0084 00F44032 		and	r2, r0, #196608
 1578              	.LVL167:
 1579              	.LBB98:
 1580              	.LBB99:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1581              		.loc 2 491 0
 1582 0088 4FF44030 		mov	r0, #196608
 1583              		.syntax unified
 1584              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1585 008c 90FAA0F0 		rbit r0, r0
 1586              	@ 0 "" 2
ARM GAS  /tmp/ccgMVEFA.s 			page 59


 1587              	.LVL168:
 1588              		.thumb
 1589              		.syntax unified
 1590              	.LBE99:
 1591              	.LBE98:
 1592              	.LBB100:
 1593              	.LBB101:
 1594              		.loc 2 666 0
 1595              		.syntax unified
 1596              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1597 0090 B0FA80F0 		clz r0, r0
 1598              	@ 0 "" 2
 1599              		.thumb
 1600              		.syntax unified
 1601              	.LBE101:
 1602              	.LBE100:
 982:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 1603              		.loc 1 982 0
 1604 0094 C0B2     		uxtb	r0, r0
 1605 0096 22FA00F0 		lsr	r0, r2, r0
 1606 009a 0130     		adds	r0, r0, #1
 1607 009c 4000     		lsls	r0, r0, #1
 1608              	.LVL169:
 984:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1609              		.loc 1 984 0
 1610 009e B3FBF0F0 		udiv	r0, r3, r0
 1611              	.LVL170:
 985:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 1612              		.loc 1 985 0
 1613 00a2 01E0     		b	.L133
 1614              	.LVL171:
 1615              	.L137:
 1616              	.LCFI6:
 1617              		.cfi_def_cfa_offset 0
 1618              		.cfi_restore 4
 964:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1619              		.loc 1 964 0
 1620 00a4 0448     		ldr	r0, .L140+8
 1621 00a6 7047     		bx	lr
 1622              	.LVL172:
 1623              	.L133:
 1624              	.LCFI7:
 1625              		.cfi_def_cfa_offset 4
 1626              		.cfi_offset 4, -4
 1627              		.loc 1 994 0
 1628 00a8 5DF8044B 		ldr	r4, [sp], #4
 1629              	.LCFI8:
 1630              		.cfi_restore 4
 1631              		.cfi_def_cfa_offset 0
 1632 00ac 7047     		bx	lr
 1633              	.L141:
 1634 00ae 00BF     		.align	2
 1635              	.L140:
 1636 00b0 00380240 		.word	1073887232
 1637 00b4 0024F400 		.word	16000000
 1638 00b8 00127A00 		.word	8000000
 1639              		.cfi_endproc
ARM GAS  /tmp/ccgMVEFA.s 			page 60


 1640              	.LFE118:
 1642              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1643              		.align	2
 1644              		.global	HAL_RCC_GetHCLKFreq
 1645              		.thumb
 1646              		.thumb_func
 1648              	HAL_RCC_GetHCLKFreq:
 1649              	.LFB119:
 995:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 996:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 997:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
 998:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
 999:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1000:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
1001:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1002:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated within this function
1003:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
1004:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HCLK frequency
1005:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1006:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1007:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1650              		.loc 1 1007 0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 1654 0000 08B5     		push	{r3, lr}
 1655              	.LCFI9:
 1656              		.cfi_def_cfa_offset 8
 1657              		.cfi_offset 3, -8
 1658              		.cfi_offset 14, -4
1008:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POS
 1659              		.loc 1 1008 0
 1660 0002 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1661              	.LVL173:
 1662 0006 094B     		ldr	r3, .L144
 1663 0008 9B68     		ldr	r3, [r3, #8]
 1664 000a 03F0F002 		and	r2, r3, #240
 1665              	.LVL174:
 1666              	.LBB102:
 1667              	.LBB103:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1668              		.loc 2 491 0
 1669 000e F023     		movs	r3, #240
 1670              		.syntax unified
 1671              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1672 0010 93FAA3F3 		rbit r3, r3
 1673              	@ 0 "" 2
 1674              	.LVL175:
 1675              		.thumb
 1676              		.syntax unified
 1677              	.LBE103:
 1678              	.LBE102:
 1679              	.LBB104:
 1680              	.LBB105:
 1681              		.loc 2 666 0
 1682              		.syntax unified
 1683              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
ARM GAS  /tmp/ccgMVEFA.s 			page 61


 1684 0014 B3FA83F3 		clz r3, r3
 1685              	@ 0 "" 2
 1686              		.thumb
 1687              		.syntax unified
 1688              	.LBE105:
 1689              	.LBE104:
 1690              		.loc 1 1008 0
 1691 0018 DBB2     		uxtb	r3, r3
 1692 001a 22FA03F3 		lsr	r3, r2, r3
 1693 001e 044A     		ldr	r2, .L144+4
 1694 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1695 0022 D840     		lsrs	r0, r0, r3
 1696 0024 034B     		ldr	r3, .L144+8
 1697 0026 1860     		str	r0, [r3]
1009:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return SystemCoreClock;
1010:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1698              		.loc 1 1010 0
 1699 0028 08BD     		pop	{r3, pc}
 1700              	.L145:
 1701 002a 00BF     		.align	2
 1702              	.L144:
 1703 002c 00380240 		.word	1073887232
 1704 0030 00000000 		.word	.LANCHOR0
 1705 0034 00000000 		.word	SystemCoreClock
 1706              		.cfi_endproc
 1707              	.LFE119:
 1709              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1710              		.align	2
 1711              		.global	HAL_RCC_GetPCLK1Freq
 1712              		.thumb
 1713              		.thumb_func
 1715              	HAL_RCC_GetPCLK1Freq:
 1716              	.LFB120:
1011:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1012:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1013:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1014:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1015:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1016:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
1017:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK1 frequency
1018:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1019:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1020:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {  
 1717              		.loc 1 1020 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721 0000 08B5     		push	{r3, lr}
 1722              	.LCFI10:
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 3, -8
 1725              		.cfi_offset 14, -4
1021:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1022:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC
 1726              		.loc 1 1022 0
 1727 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1728              	.LVL176:
ARM GAS  /tmp/ccgMVEFA.s 			page 62


 1729 0006 084B     		ldr	r3, .L148
 1730 0008 9B68     		ldr	r3, [r3, #8]
 1731 000a 03F4E052 		and	r2, r3, #7168
 1732              	.LVL177:
 1733              	.LBB106:
 1734              	.LBB107:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1735              		.loc 2 491 0
 1736 000e 4FF4E053 		mov	r3, #7168
 1737              		.syntax unified
 1738              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1739 0012 93FAA3F3 		rbit r3, r3
 1740              	@ 0 "" 2
 1741              	.LVL178:
 1742              		.thumb
 1743              		.syntax unified
 1744              	.LBE107:
 1745              	.LBE106:
 1746              	.LBB108:
 1747              	.LBB109:
 1748              		.loc 2 666 0
 1749              		.syntax unified
 1750              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1751 0016 B3FA83F3 		clz r3, r3
 1752              	@ 0 "" 2
 1753              		.thumb
 1754              		.syntax unified
 1755              	.LBE109:
 1756              	.LBE108:
 1757              		.loc 1 1022 0
 1758 001a DBB2     		uxtb	r3, r3
 1759 001c 22FA03F3 		lsr	r3, r2, r3
 1760 0020 024A     		ldr	r2, .L148+4
 1761 0022 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1023:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1762              		.loc 1 1023 0
 1763 0024 D840     		lsrs	r0, r0, r3
 1764 0026 08BD     		pop	{r3, pc}
 1765              	.L149:
 1766              		.align	2
 1767              	.L148:
 1768 0028 00380240 		.word	1073887232
 1769 002c 00000000 		.word	.LANCHOR0
 1770              		.cfi_endproc
 1771              	.LFE120:
 1773              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1774              		.align	2
 1775              		.global	HAL_RCC_GetPCLK2Freq
 1776              		.thumb
 1777              		.thumb_func
 1779              	HAL_RCC_GetPCLK2Freq:
 1780              	.LFB121:
1024:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1025:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1026:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1027:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1028:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
ARM GAS  /tmp/ccgMVEFA.s 			page 63


1029:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  None
1030:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK2 frequency
1031:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1032:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1033:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1781              		.loc 1 1033 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785 0000 08B5     		push	{r3, lr}
 1786              	.LCFI11:
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 3, -8
 1789              		.cfi_offset 14, -4
1034:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1035:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_
 1790              		.loc 1 1035 0
 1791 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1792              	.LVL179:
 1793 0006 084B     		ldr	r3, .L152
 1794 0008 9B68     		ldr	r3, [r3, #8]
 1795 000a 03F46042 		and	r2, r3, #57344
 1796              	.LVL180:
 1797              	.LBB110:
 1798              	.LBB111:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1799              		.loc 2 491 0
 1800 000e 4FF46043 		mov	r3, #57344
 1801              		.syntax unified
 1802              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1803 0012 93FAA3F3 		rbit r3, r3
 1804              	@ 0 "" 2
 1805              	.LVL181:
 1806              		.thumb
 1807              		.syntax unified
 1808              	.LBE111:
 1809              	.LBE110:
 1810              	.LBB112:
 1811              	.LBB113:
 1812              		.loc 2 666 0
 1813              		.syntax unified
 1814              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1815 0016 B3FA83F3 		clz r3, r3
 1816              	@ 0 "" 2
 1817              		.thumb
 1818              		.syntax unified
 1819              	.LBE113:
 1820              	.LBE112:
 1821              		.loc 1 1035 0
 1822 001a DBB2     		uxtb	r3, r3
 1823 001c 22FA03F3 		lsr	r3, r2, r3
 1824 0020 024A     		ldr	r2, .L152+4
 1825 0022 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1036:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** } 
 1826              		.loc 1 1036 0
 1827 0024 D840     		lsrs	r0, r0, r3
 1828 0026 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccgMVEFA.s 			page 64


 1829              	.L153:
 1830              		.align	2
 1831              	.L152:
 1832 0028 00380240 		.word	1073887232
 1833 002c 00000000 		.word	.LANCHOR0
 1834              		.cfi_endproc
 1835              	.LFE121:
 1837              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1838              		.align	2
 1839              		.global	HAL_RCC_GetOscConfig
 1840              		.thumb
 1841              		.thumb_func
 1843              	HAL_RCC_GetOscConfig:
 1844              	.LFB122:
1037:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1038:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1039:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1040:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1041:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
1042:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1043:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1044:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1045:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1046:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1845              		.loc 1 1046 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 0
 1848              		@ frame_needed = 0, uses_anonymous_args = 0
 1849              		@ link register save eliminated.
 1850              	.LVL182:
1047:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1048:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1851              		.loc 1 1048 0
 1852 0000 0F23     		movs	r3, #15
 1853 0002 0360     		str	r3, [r0]
1049:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1050:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1051:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1854              		.loc 1 1051 0
 1855 0004 404B     		ldr	r3, .L167
 1856 0006 1B68     		ldr	r3, [r3]
 1857 0008 13F4802F 		tst	r3, #262144
 1858 000c 02D0     		beq	.L155
1052:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1053:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1859              		.loc 1 1053 0
 1860 000e 0523     		movs	r3, #5
 1861 0010 4360     		str	r3, [r0, #4]
 1862 0012 09E0     		b	.L156
 1863              	.L155:
1054:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1055:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1864              		.loc 1 1055 0
 1865 0014 3C4B     		ldr	r3, .L167
 1866 0016 1B68     		ldr	r3, [r3]
 1867 0018 13F4803F 		tst	r3, #65536
 1868 001c 02D0     		beq	.L157
ARM GAS  /tmp/ccgMVEFA.s 			page 65


1056:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1057:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1869              		.loc 1 1057 0
 1870 001e 0123     		movs	r3, #1
 1871 0020 4360     		str	r3, [r0, #4]
 1872 0022 01E0     		b	.L156
 1873              	.L157:
1058:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1059:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1060:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1061:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1874              		.loc 1 1061 0
 1875 0024 0023     		movs	r3, #0
 1876 0026 4360     		str	r3, [r0, #4]
 1877              	.L156:
1062:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1063:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1064:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1065:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1878              		.loc 1 1065 0
 1879 0028 374B     		ldr	r3, .L167
 1880 002a 1B68     		ldr	r3, [r3]
 1881 002c 13F0010F 		tst	r3, #1
 1882 0030 02D0     		beq	.L158
1066:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1067:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1883              		.loc 1 1067 0
 1884 0032 0123     		movs	r3, #1
 1885 0034 C360     		str	r3, [r0, #12]
 1886 0036 01E0     		b	.L159
 1887              	.L158:
1068:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1069:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1070:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1071:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1888              		.loc 1 1071 0
 1889 0038 0023     		movs	r3, #0
 1890 003a C360     		str	r3, [r0, #12]
 1891              	.L159:
1072:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1073:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1074:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC
 1892              		.loc 1 1074 0
 1893 003c 3249     		ldr	r1, .L167
 1894 003e 0B68     		ldr	r3, [r1]
 1895 0040 03F0F802 		and	r2, r3, #248
 1896              	.LVL183:
 1897              	.LBB114:
 1898              	.LBB115:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1899              		.loc 2 491 0
 1900 0044 F823     		movs	r3, #248
 1901              		.syntax unified
 1902              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1903 0046 93FAA3F3 		rbit r3, r3
 1904              	@ 0 "" 2
 1905              	.LVL184:
ARM GAS  /tmp/ccgMVEFA.s 			page 66


 1906              		.thumb
 1907              		.syntax unified
 1908              	.LBE115:
 1909              	.LBE114:
 1910              	.LBB116:
 1911              	.LBB117:
 1912              		.loc 2 666 0
 1913              		.syntax unified
 1914              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1915 004a B3FA83F3 		clz r3, r3
 1916              	@ 0 "" 2
 1917              		.thumb
 1918              		.syntax unified
 1919              	.LBE117:
 1920              	.LBE116:
 1921              		.loc 1 1074 0
 1922 004e DBB2     		uxtb	r3, r3
 1923 0050 22FA03F3 		lsr	r3, r2, r3
 1924 0054 0361     		str	r3, [r0, #16]
1075:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1076:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1077:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1925              		.loc 1 1077 0
 1926 0056 0B6F     		ldr	r3, [r1, #112]
 1927 0058 13F0040F 		tst	r3, #4
 1928 005c 02D0     		beq	.L160
1078:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1079:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1929              		.loc 1 1079 0
 1930 005e 0523     		movs	r3, #5
 1931 0060 8360     		str	r3, [r0, #8]
 1932 0062 09E0     		b	.L161
 1933              	.L160:
1080:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1081:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1934              		.loc 1 1081 0
 1935 0064 284B     		ldr	r3, .L167
 1936 0066 1B6F     		ldr	r3, [r3, #112]
 1937 0068 13F0010F 		tst	r3, #1
 1938 006c 02D0     		beq	.L162
1082:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1083:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 1939              		.loc 1 1083 0
 1940 006e 0123     		movs	r3, #1
 1941 0070 8360     		str	r3, [r0, #8]
 1942 0072 01E0     		b	.L161
 1943              	.L162:
1084:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1085:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1086:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1087:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 1944              		.loc 1 1087 0
 1945 0074 0023     		movs	r3, #0
 1946 0076 8360     		str	r3, [r0, #8]
 1947              	.L161:
1088:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1089:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
ARM GAS  /tmp/ccgMVEFA.s 			page 67


1090:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1091:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 1948              		.loc 1 1091 0
 1949 0078 234B     		ldr	r3, .L167
 1950 007a 5B6F     		ldr	r3, [r3, #116]
 1951 007c 13F0010F 		tst	r3, #1
 1952 0080 02D0     		beq	.L163
1092:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1093:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1953              		.loc 1 1093 0
 1954 0082 0123     		movs	r3, #1
 1955 0084 4361     		str	r3, [r0, #20]
 1956 0086 01E0     		b	.L164
 1957              	.L163:
1094:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1095:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1096:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1097:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 1958              		.loc 1 1097 0
 1959 0088 0023     		movs	r3, #0
 1960 008a 4361     		str	r3, [r0, #20]
 1961              	.L164:
1098:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1099:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1100:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1101:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1962              		.loc 1 1101 0
 1963 008c 1E4B     		ldr	r3, .L167
 1964 008e 1B68     		ldr	r3, [r3]
 1965 0090 13F0807F 		tst	r3, #16777216
 1966 0094 02D0     		beq	.L165
1102:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1103:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 1967              		.loc 1 1103 0
 1968 0096 0223     		movs	r3, #2
 1969 0098 8361     		str	r3, [r0, #24]
 1970 009a 01E0     		b	.L166
 1971              	.L165:
1104:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1105:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1106:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1107:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1972              		.loc 1 1107 0
 1973 009c 0123     		movs	r3, #1
 1974 009e 8361     		str	r3, [r0, #24]
 1975              	.L166:
1108:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1109:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 1976              		.loc 1 1109 0
 1977 00a0 1949     		ldr	r1, .L167
 1978 00a2 4B68     		ldr	r3, [r1, #4]
 1979 00a4 03F48003 		and	r3, r3, #4194304
 1980 00a8 C361     		str	r3, [r0, #28]
1110:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 1981              		.loc 1 1110 0
 1982 00aa 4B68     		ldr	r3, [r1, #4]
 1983 00ac 03F03F03 		and	r3, r3, #63
ARM GAS  /tmp/ccgMVEFA.s 			page 68


 1984 00b0 0362     		str	r3, [r0, #32]
1111:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 1985              		.loc 1 1111 0
 1986 00b2 4A68     		ldr	r2, [r1, #4]
 1987 00b4 47F6C073 		movw	r3, #32704
 1988 00b8 1A40     		ands	r2, r2, r3
 1989              	.LVL185:
 1990              	.LBB118:
 1991              	.LBB119:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 1992              		.loc 2 491 0
 1993              		.syntax unified
 1994              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 1995 00ba 93FAA3F3 		rbit r3, r3
 1996              	@ 0 "" 2
 1997              	.LVL186:
 1998              		.thumb
 1999              		.syntax unified
 2000              	.LBE119:
 2001              	.LBE118:
 2002              	.LBB120:
 2003              	.LBB121:
 2004              		.loc 2 666 0
 2005              		.syntax unified
 2006              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2007 00be B3FA83F3 		clz r3, r3
 2008              	@ 0 "" 2
 2009              		.thumb
 2010              		.syntax unified
 2011              	.LBE121:
 2012              	.LBE120:
 2013              		.loc 1 1111 0
 2014 00c2 DBB2     		uxtb	r3, r3
 2015 00c4 22FA03F3 		lsr	r3, r2, r3
 2016 00c8 4362     		str	r3, [r0, #36]
1112:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 2017              		.loc 1 1112 0
 2018 00ca 4B68     		ldr	r3, [r1, #4]
 2019 00cc 03F44033 		and	r3, r3, #196608
 2020 00d0 03F58033 		add	r3, r3, #65536
 2021 00d4 5A00     		lsls	r2, r3, #1
 2022              	.LVL187:
 2023              	.LBB122:
 2024              	.LBB123:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 2025              		.loc 2 491 0
 2026 00d6 4FF44033 		mov	r3, #196608
 2027              		.syntax unified
 2028              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2029 00da 93FAA3F3 		rbit r3, r3
 2030              	@ 0 "" 2
 2031              	.LVL188:
 2032              		.thumb
 2033              		.syntax unified
 2034              	.LBE123:
 2035              	.LBE122:
 2036              	.LBB124:
ARM GAS  /tmp/ccgMVEFA.s 			page 69


 2037              	.LBB125:
 2038              		.loc 2 666 0
 2039              		.syntax unified
 2040              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2041 00de B3FA83F3 		clz r3, r3
 2042              	@ 0 "" 2
 2043              		.thumb
 2044              		.syntax unified
 2045              	.LBE125:
 2046              	.LBE124:
 2047              		.loc 1 1112 0
 2048 00e2 DBB2     		uxtb	r3, r3
 2049 00e4 22FA03F3 		lsr	r3, r2, r3
 2050 00e8 8362     		str	r3, [r0, #40]
1113:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PL
 2051              		.loc 1 1113 0
 2052 00ea 4B68     		ldr	r3, [r1, #4]
 2053 00ec 03F07062 		and	r2, r3, #251658240
 2054              	.LVL189:
 2055              	.LBB126:
 2056              	.LBB127:
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 2057              		.loc 2 491 0
 2058 00f0 4FF07063 		mov	r3, #251658240
 2059              		.syntax unified
 2060              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2061 00f4 93FAA3F3 		rbit r3, r3
 2062              	@ 0 "" 2
 2063              	.LVL190:
 2064              		.thumb
 2065              		.syntax unified
 2066              	.LBE127:
 2067              	.LBE126:
 2068              	.LBB128:
 2069              	.LBB129:
 2070              		.loc 2 666 0
 2071              		.syntax unified
 2072              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 2073 00f8 B3FA83F3 		clz r3, r3
 2074              	@ 0 "" 2
 2075              		.thumb
 2076              		.syntax unified
 2077              	.LBE129:
 2078              	.LBE128:
 2079              		.loc 1 1113 0
 2080 00fc DBB2     		uxtb	r3, r3
 2081 00fe 22FA03F3 		lsr	r3, r2, r3
 2082 0102 C362     		str	r3, [r0, #44]
 2083 0104 7047     		bx	lr
 2084              	.L168:
 2085 0106 00BF     		.align	2
 2086              	.L167:
 2087 0108 00380240 		.word	1073887232
 2088              		.cfi_endproc
 2089              	.LFE122:
 2091              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2092              		.align	2
ARM GAS  /tmp/ccgMVEFA.s 			page 70


 2093              		.global	HAL_RCC_GetClockConfig
 2094              		.thumb
 2095              		.thumb_func
 2097              	HAL_RCC_GetClockConfig:
 2098              	.LFB123:
1114:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
1115:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1116:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1117:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal 
1118:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1119:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_ClkInitTypeDef structure that 
1120:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1121:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
1122:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1123:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1124:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1125:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2099              		.loc 1 1125 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 0
 2102              		@ frame_needed = 0, uses_anonymous_args = 0
 2103              		@ link register save eliminated.
 2104              	.LVL191:
1126:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1127:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2105              		.loc 1 1127 0
 2106 0000 0F23     		movs	r3, #15
 2107 0002 0360     		str	r3, [r0]
1128:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    
1129:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1130:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2108              		.loc 1 1130 0
 2109 0004 0B4B     		ldr	r3, .L170
 2110 0006 9A68     		ldr	r2, [r3, #8]
 2111 0008 02F00302 		and	r2, r2, #3
 2112 000c 4260     		str	r2, [r0, #4]
1131:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1132:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1133:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2113              		.loc 1 1133 0
 2114 000e 9A68     		ldr	r2, [r3, #8]
 2115 0010 02F0F002 		and	r2, r2, #240
 2116 0014 8260     		str	r2, [r0, #8]
1134:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1135:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1136:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 2117              		.loc 1 1136 0
 2118 0016 9A68     		ldr	r2, [r3, #8]
 2119 0018 02F4E052 		and	r2, r2, #7168
 2120 001c C260     		str	r2, [r0, #12]
1137:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1138:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1139:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2121              		.loc 1 1139 0
 2122 001e 9B68     		ldr	r3, [r3, #8]
 2123 0020 DB08     		lsrs	r3, r3, #3
 2124 0022 03F4E053 		and	r3, r3, #7168
ARM GAS  /tmp/ccgMVEFA.s 			page 71


 2125 0026 0361     		str	r3, [r0, #16]
1140:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1141:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1142:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2126              		.loc 1 1142 0
 2127 0028 034B     		ldr	r3, .L170+4
 2128 002a 1B68     		ldr	r3, [r3]
 2129 002c 03F00F03 		and	r3, r3, #15
 2130 0030 0B60     		str	r3, [r1]
 2131 0032 7047     		bx	lr
 2132              	.L171:
 2133              		.align	2
 2134              	.L170:
 2135 0034 00380240 		.word	1073887232
 2136 0038 003C0240 		.word	1073888256
 2137              		.cfi_endproc
 2138              	.LFE123:
 2140              		.section	.text.HAL_RCC_CCSCallback,"ax",%progbits
 2141              		.align	2
 2142              		.weak	HAL_RCC_CCSCallback
 2143              		.thumb
 2144              		.thumb_func
 2146              	HAL_RCC_CCSCallback:
 2147              	.LFB125:
1143:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
1144:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1145:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1146:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1147:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1148:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param None
1149:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1150:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1151:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
1153:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
1155:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1156:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_RCC_CCSCallback();
1158:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1159:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
1161:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1162:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
1163:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1164:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1166:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  none 
1167:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval none
1168:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1169:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_CCSCallback(void)
1170:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2148              		.loc 1 1170 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 2152              		@ link register save eliminated.
ARM GAS  /tmp/ccgMVEFA.s 			page 72


 2153 0000 7047     		bx	lr
 2154              		.cfi_endproc
 2155              	.LFE125:
 2157 0002 00BF     		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2158              		.align	2
 2159              		.global	HAL_RCC_NMI_IRQHandler
 2160              		.thumb
 2161              		.thumb_func
 2163              	HAL_RCC_NMI_IRQHandler:
 2164              	.LFB124:
1152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 2165              		.loc 1 1152 0
 2166              		.cfi_startproc
 2167              		@ args = 0, pretend = 0, frame = 0
 2168              		@ frame_needed = 0, uses_anonymous_args = 0
1152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 2169              		.loc 1 1152 0
 2170 0000 08B5     		push	{r3, lr}
 2171              	.LCFI12:
 2172              		.cfi_def_cfa_offset 8
 2173              		.cfi_offset 3, -8
 2174              		.cfi_offset 14, -4
1154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 2175              		.loc 1 1154 0
 2176 0002 054B     		ldr	r3, .L176
 2177 0004 DB68     		ldr	r3, [r3, #12]
 2178 0006 13F0800F 		tst	r3, #128
 2179 000a 04D0     		beq	.L173
1157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 2180              		.loc 1 1157 0
 2181 000c FFF7FEFF 		bl	HAL_RCC_CCSCallback
 2182              	.LVL192:
1160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 2183              		.loc 1 1160 0
 2184 0010 8022     		movs	r2, #128
 2185 0012 024B     		ldr	r3, .L176+4
 2186 0014 1A70     		strb	r2, [r3]
 2187              	.L173:
 2188 0016 08BD     		pop	{r3, pc}
 2189              	.L177:
 2190              		.align	2
 2191              	.L176:
 2192 0018 00380240 		.word	1073887232
 2193 001c 0E380240 		.word	1073887246
 2194              		.cfi_endproc
 2195              	.LFE124:
 2197              		.global	APBAHBPrescTable
 2198              		.section	.rodata.APBAHBPrescTable,"a",%progbits
 2199              		.align	2
 2200              		.set	.LANCHOR0,. + 0
 2203              	APBAHBPrescTable:
 2204 0000 00       		.byte	0
 2205 0001 00       		.byte	0
 2206 0002 00       		.byte	0
 2207 0003 00       		.byte	0
 2208 0004 01       		.byte	1
 2209 0005 02       		.byte	2
ARM GAS  /tmp/ccgMVEFA.s 			page 73


 2210 0006 03       		.byte	3
 2211 0007 04       		.byte	4
 2212 0008 01       		.byte	1
 2213 0009 02       		.byte	2
 2214 000a 03       		.byte	3
 2215 000b 04       		.byte	4
 2216 000c 06       		.byte	6
 2217 000d 07       		.byte	7
 2218 000e 08       		.byte	8
 2219 000f 09       		.byte	9
 2220              		.text
 2221              	.Letext0:
 2222              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2223              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2224              		.file 5 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2225              		.file 6 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2226              		.file 7 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2227              		.file 8 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2228              		.file 9 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2229              		.file 10 "../Drivers/CMSIS/Include/core_cm4.h"
 2230              		.file 11 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2231              		.file 12 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccgMVEFA.s 			page 74


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hal_rcc.c
     /tmp/ccgMVEFA.s:22     .text.HAL_RCC_DeInit:00000000 $t
     /tmp/ccgMVEFA.s:27     .text.HAL_RCC_DeInit:00000000 HAL_RCC_DeInit
     /tmp/ccgMVEFA.s:72     .text.HAL_RCC_DeInit:00000044 $d
     /tmp/ccgMVEFA.s:78     .text.HAL_RCC_OscConfig:00000000 $t
     /tmp/ccgMVEFA.s:83     .text.HAL_RCC_OscConfig:00000000 HAL_RCC_OscConfig
     /tmp/ccgMVEFA.s:583    .text.HAL_RCC_OscConfig:000002b8 $d
     /tmp/ccgMVEFA.s:593    .text.HAL_RCC_OscConfig:000002d4 $t
     /tmp/ccgMVEFA.s:857    .text.HAL_RCC_OscConfig:000003d0 $d
     /tmp/ccgMVEFA.s:863    .text.HAL_RCC_ClockConfig:00000000 $t
     /tmp/ccgMVEFA.s:868    .text.HAL_RCC_ClockConfig:00000000 HAL_RCC_ClockConfig
     /tmp/ccgMVEFA.s:1257   .text.HAL_RCC_ClockConfig:00000224 $d
     /tmp/ccgMVEFA.s:1263   .text.HAL_RCC_MCOConfig:00000000 $t
     /tmp/ccgMVEFA.s:1268   .text.HAL_RCC_MCOConfig:00000000 HAL_RCC_MCOConfig
     /tmp/ccgMVEFA.s:1369   .text.HAL_RCC_MCOConfig:00000078 $d
     /tmp/ccgMVEFA.s:1376   .text.HAL_RCC_EnableCSS:00000000 $t
     /tmp/ccgMVEFA.s:1381   .text.HAL_RCC_EnableCSS:00000000 HAL_RCC_EnableCSS
     /tmp/ccgMVEFA.s:1396   .text.HAL_RCC_EnableCSS:00000008 $d
     /tmp/ccgMVEFA.s:1401   .text.HAL_RCC_DisableCSS:00000000 $t
     /tmp/ccgMVEFA.s:1406   .text.HAL_RCC_DisableCSS:00000000 HAL_RCC_DisableCSS
     /tmp/ccgMVEFA.s:1421   .text.HAL_RCC_DisableCSS:00000008 $d
     /tmp/ccgMVEFA.s:1426   .text.HAL_RCC_GetSysClockFreq:00000000 $t
     /tmp/ccgMVEFA.s:1431   .text.HAL_RCC_GetSysClockFreq:00000000 HAL_RCC_GetSysClockFreq
     /tmp/ccgMVEFA.s:1636   .text.HAL_RCC_GetSysClockFreq:000000b0 $d
     /tmp/ccgMVEFA.s:1643   .text.HAL_RCC_GetHCLKFreq:00000000 $t
     /tmp/ccgMVEFA.s:1648   .text.HAL_RCC_GetHCLKFreq:00000000 HAL_RCC_GetHCLKFreq
     /tmp/ccgMVEFA.s:1703   .text.HAL_RCC_GetHCLKFreq:0000002c $d
     /tmp/ccgMVEFA.s:1710   .text.HAL_RCC_GetPCLK1Freq:00000000 $t
     /tmp/ccgMVEFA.s:1715   .text.HAL_RCC_GetPCLK1Freq:00000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccgMVEFA.s:1768   .text.HAL_RCC_GetPCLK1Freq:00000028 $d
     /tmp/ccgMVEFA.s:1774   .text.HAL_RCC_GetPCLK2Freq:00000000 $t
     /tmp/ccgMVEFA.s:1779   .text.HAL_RCC_GetPCLK2Freq:00000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccgMVEFA.s:1832   .text.HAL_RCC_GetPCLK2Freq:00000028 $d
     /tmp/ccgMVEFA.s:1838   .text.HAL_RCC_GetOscConfig:00000000 $t
     /tmp/ccgMVEFA.s:1843   .text.HAL_RCC_GetOscConfig:00000000 HAL_RCC_GetOscConfig
     /tmp/ccgMVEFA.s:2087   .text.HAL_RCC_GetOscConfig:00000108 $d
     /tmp/ccgMVEFA.s:2092   .text.HAL_RCC_GetClockConfig:00000000 $t
     /tmp/ccgMVEFA.s:2097   .text.HAL_RCC_GetClockConfig:00000000 HAL_RCC_GetClockConfig
     /tmp/ccgMVEFA.s:2135   .text.HAL_RCC_GetClockConfig:00000034 $d
     /tmp/ccgMVEFA.s:2141   .text.HAL_RCC_CCSCallback:00000000 $t
     /tmp/ccgMVEFA.s:2146   .text.HAL_RCC_CCSCallback:00000000 HAL_RCC_CCSCallback
     /tmp/ccgMVEFA.s:2158   .text.HAL_RCC_NMI_IRQHandler:00000000 $t
     /tmp/ccgMVEFA.s:2163   .text.HAL_RCC_NMI_IRQHandler:00000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccgMVEFA.s:2192   .text.HAL_RCC_NMI_IRQHandler:00000018 $d
     /tmp/ccgMVEFA.s:2203   .rodata.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/ccgMVEFA.s:2199   .rodata.APBAHBPrescTable:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
HAL_GPIO_Init
SystemCoreClock
