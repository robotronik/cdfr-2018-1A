ARM GAS  /tmp/ccnAeKgf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_hal_flash_ex.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.FLASH_MassErase,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	FLASH_MassErase:
  27              	.LFB120:
  28              		.file 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c"
   1:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
   2:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ******************************************************************************
   3:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @file    stm32f4xx_hal_flash_ex.c
   4:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @author  MCD Application Team
   5:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @version V1.1.0
   6:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @date    19-June-2014
   7:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Extended FLASH HAL module driver.
   8:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This file provides firmware functions to manage the following 
   9:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          functionalities of the FLASH extension peripheral:
  10:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           + Extended programming operations functions
  11:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *  
  12:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   @verbatim
  13:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ==============================================================================
  14:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                    ##### Flash Extension features #####
  15:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ==============================================================================
  16:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            
  17:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   [..] Comparing to other previous devices, the FLASH interface for STM32F427xx/437xx and 
  18:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        STM32F429xx/439xx devices contains the following additional features 
  19:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        
  20:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (+) Capacity up to 2 Mbyte with dual bank architecture supporting read-while-write
  21:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            capability (RWW)
  22:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (+) Dual bank memory organization       
  23:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (+) PCROP protection for all banks
  24:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    
  25:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                       ##### How to use this driver #####
  26:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ==============================================================================
  27:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   [..] This driver provides functions to configure and program the FLASH memory 
  28:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        of all STM32F427xx/437xx andSTM32F429xx/439xx devices. It includes
  29:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       (#) FLASH Memory Erase functions: 
  30:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and 
ARM GAS  /tmp/ccnAeKgf.s 			page 2


  31:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                 HAL_FLASH_Lock() functions
  32:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Erase function: Erase sector, erase all sectors
  33:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) There are two modes of erase :
  34:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****              (+++) Polling Mode using HAL_FLASHEx_Erase()
  35:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****              (+++) Interrupt Mode using HAL_FLASHEx_Erase_IT()
  36:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****              
  37:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       (#) Option Bytes Programming functions: Use HAL_FLASHEx_OBProgram() to :
  38:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Set/Reset the write protection
  39:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Set the Read protection Level
  40:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Set the BOR level
  41:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Program the user Option Bytes
  42:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       (#) Advanced Option Bytes Programming functions: Use HAL_FLASHEx_AdvOBProgram() to :  
  43:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Extended space (bank 2) erase function
  44:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Full FLASH space (2 Mo) erase (bank 1 and bank 2)
  45:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Dual Boot actrivation
  46:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Write protection configuration for bank 2
  47:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) PCROP protection configuration and control for both banks
  48:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
  49:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   @endverbatim
  50:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ******************************************************************************
  51:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @attention
  52:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  53:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  54:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  55:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  56:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * are permitted provided that the following conditions are met:
  57:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  58:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer.
  59:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  60:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  61:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      and/or other materials provided with the distribution.
  62:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  63:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      may be used to endorse or promote products derived from this software
  64:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      without specific prior written permission.
  65:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  66:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  67:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  68:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  69:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  70:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  71:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  72:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  73:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  74:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  75:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  76:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  77:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ******************************************************************************
  78:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */ 
  79:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  80:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Includes ------------------------------------------------------------------*/
  81:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #include "stm32f4xx_hal.h"
  82:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  83:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @addtogroup STM32F4xx_HAL_Driver
  84:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
  85:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
  86:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  87:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @defgroup FLASHEx
ARM GAS  /tmp/ccnAeKgf.s 			page 3


  88:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief FLASH HAL Extension module driver
  89:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
  90:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
  91:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  92:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  93:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  94:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private typedef -----------------------------------------------------------*/
  95:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private define ------------------------------------------------------------*/
  96:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  97:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  98:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #define HAL_FLASH_TIMEOUT_VALUE   ((uint32_t)50000)/* 50 s */
  99:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private macro -------------------------------------------------------------*/
 100:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private variables ---------------------------------------------------------*/
 101:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** extern FLASH_ProcessTypeDef pFlash;
 102:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 103:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private function prototypes -----------------------------------------------*/
 104:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Option bytes control */
 105:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static void               FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks);
 106:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks);
 107:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks);
 108:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_RDP_LevelConfig(uint8_t Level);
 109:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby);
 110:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BOR_LevelConfig(uint8_t Level);
 111:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetUser(void);
 112:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint16_t           FLASH_OB_GetWRP(void);
 113:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static FlagStatus         FLASH_OB_GetRDP(void);
 114:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetBOR(void);
 115:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 116:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
 117:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_EnablePCROP(uint32_t Sector);
 118:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_DisablePCROP(uint32_t Sector);
 119:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
 120:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 121:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx)|| defined(STM32F439xx) 
 122:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t 
 123:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t
 124:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BootConfig(uint8_t BootConfig);
 125:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx */
 126:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 127:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private functions ---------------------------------------------------------*/
 128:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** extern HAL_StatusTypeDef         FLASH_WaitForLastOperation(uint32_t Timeout);
 129:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 130:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Functions Extended FLASH Private functions
 131:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
 132:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 133:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 134:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Group1 Extended IO operation functions
 135:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  *  @brief   Extended IO operation functions 
 136:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  *
 137:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** @verbatim   
 138:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  ===============================================================================
 139:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                 ##### Extended programming operation functions #####
 140:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  ===============================================================================  
 141:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     [..]
 142:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     This subsection provides a set of functions allowing to manage the Extension FLASH 
 143:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     programming operations Operations.
 144:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
ARM GAS  /tmp/ccnAeKgf.s 			page 4


 145:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** @endverbatim
 146:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
 147:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 148:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 149:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors 
 150:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param[in]  pEraseInit: pointer to an FLASH_EraseInitTypeDef structure that
 151:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 153:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param[out]  SectorError: pointer to variable  that
 154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information on faulty sector in case of error 
 155:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         (0xFFFFFFFF means that all the sectors have been correctly erased)
 156:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 158:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 159:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
 160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 161:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 162:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t index = 0;
 163:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 164:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Locked */
 165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 166:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 167:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 168:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_TYPEERASE(pEraseInit->TypeErase));
 169:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 170:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 171:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 172:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 173:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if (status == HAL_OK)
 174:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 175:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Initialization of SectorError variable*/
 176:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *SectorError = 0xFFFFFFFF;
 177:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 178:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if (pEraseInit->TypeErase == TYPEERASE_MASSERASE)
 179:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 180:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Mass erase to be done*/
 181:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 182:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 183:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 184:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 185:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 186:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* if the erase operation is completed, disable the MER Bit */
 187:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       FLASH->CR &= (~FLASH_MER_BIT);
 188:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 189:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else
 190:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 191:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Check the parameters */
 192:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 193:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 194:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Erase by sector by sector to be done*/
 195:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++
 196:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       {
 197:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 198:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 199:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 200:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 201:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         
ARM GAS  /tmp/ccnAeKgf.s 			page 5


 202:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /* If the erase operation is completed, disable the SER Bit */
 203:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         FLASH->CR &= (~FLASH_CR_SER);
 204:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         FLASH->CR &= SECTOR_MASK; 
 205:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 206:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         if (status != HAL_OK) 
 207:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         {
 208:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /* In case of error, stop erase procedure and return the faulty sector*/
 209:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *SectorError = index;
 210:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           break;
 211:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         }
 212:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 213:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 214:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 215:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 216:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Unlocked */
 217:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 218:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 219:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 220:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 221:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 222:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 223:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors  with interrupt enable
 224:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pEraseInit: pointer to an FLASH_EraseInitTypeDef structure that
 225:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 226:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 227:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 228:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 229:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
 230:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 231:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 232:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 233:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Locked */
 234:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 235:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 236:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 237:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_TYPEERASE(pEraseInit->TypeErase));
 238:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 239:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Enable End of FLASH Operation interrupt */
 240:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 241:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 242:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Enable Error source interrupt */
 243:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 244:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 245:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Clear pending flags (if any) */  
 246:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 247:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
 248:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 249:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if (pEraseInit->TypeErase == TYPEERASE_MASSERASE)
 250:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 251:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Mass erase to be done*/
 252:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 253:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.Bank = pEraseInit->Banks;
 254:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 255:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 256:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
 257:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 258:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Erase by sector to be done*/
ARM GAS  /tmp/ccnAeKgf.s 			page 6


 259:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 260:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Check the parameters */
 261:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     assert_param(IS_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 262:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 263:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 264:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 265:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.Sector = pEraseInit->Sector;
 266:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 267:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 268:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Erase 1st sector and wait for IT*/
 269:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 270:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 271:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 272:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 273:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 274:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 275:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 276:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Program option bytes
 277:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that
 278:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 279:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 280:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 281:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 282:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
 283:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 284:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 285:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 286:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Locked */
 287:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 288:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 289:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 290:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 291:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 292:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Write protection configuration*/
 293:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 294:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 295:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     assert_param(IS_WRPSTATE(pOBInit->WRPState));
 296:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if (pOBInit->WRPState == WRPSTATE_ENABLE)
 297:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 298:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 299:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 300:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 301:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else
 302:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 303:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Disable of Write protection on the selected Sector*/
 304:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 305:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 306:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 307:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 308:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Read protection configuration*/
 309:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 310:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 311:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 312:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 313:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 314:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*USER  configuration*/
 315:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
ARM GAS  /tmp/ccnAeKgf.s 			page 7


 316:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 317:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 318:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                                      pOBInit->USERConfig&OB_STOP_NO_RST,
 319:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                                      pOBInit->USERConfig&OB_STDBY_NO_RST);
 320:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 321:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 322:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*BOR Level  configuration*/
 323:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 324:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 325:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 326:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 327:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 328:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Unlocked */
 329:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 330:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 331:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 332:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 333:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 334:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 335:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Get the Option byte configuration
 336:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that
 337:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 338:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 339:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 340:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 341:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
 342:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 343:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 344:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 345:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get WRP*/
 346:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->WRPSector = FLASH_OB_GetWRP();
 347:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 348:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get RDP Level*/
 349:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->RDPLevel = FLASH_OB_GetRDP();
 350:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 351:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get USER*/
 352:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->USERConfig = FLASH_OB_GetUser();
 353:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 354:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get BOR Level*/
 355:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->BORLevel = FLASH_OB_GetBOR();
 356:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 357:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 358:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx)|| defined(STM32F439xx) ||\
 359:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
 360:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 361:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Program option bytes
 362:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pAdvOBInit: pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 363:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 364:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 365:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 366:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 367:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 368:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 369:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 370:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 371:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 372:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OBEX(pAdvOBInit->OptionType));
ARM GAS  /tmp/ccnAeKgf.s 			page 8


 373:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 374:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Program PCROP option byte*/
 375:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if (((pAdvOBInit->OptionType) & OBEX_PCROP) == OBEX_PCROP)
 376:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 377:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Check the parameters */
 378:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
 379:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if ((pAdvOBInit->PCROPState) == PCROPSTATE_ENABLE)
 380:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 381:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 382:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE) 
 383:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
 384:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx */
 385:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_EnablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit-
 386:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
 387:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 388:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else
 389:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 390:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Disable of Write protection on the selected Sector*/
 391:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE) 
 392:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
 393:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx */
 394:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_DisablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit
 395:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
 396:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 397:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 398:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    
 399:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx)|| defined(STM32F439xx)
 400:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Program BOOT config option byte*/
 401:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if (((pAdvOBInit->OptionType) & OBEX_BOOTCONFIG) == OBEX_BOOTCONFIG)
 402:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 403:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 404:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 405:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */
 406:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 407:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 408:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 409:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 410:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 411:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Get the OBEX byte configuration
 412:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pAdvOBInit: pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 413:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 414:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 415:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 416:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 417:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 418:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 419:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
 420:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Sector*/
 421:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 422:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx */
 423:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Sector for Bank1*/
 424:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->SectorsBank1 = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 425:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 426:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Sector for Bank2*/
 427:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->SectorsBank2 = (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 428:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 429:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Boot config OB*/
ARM GAS  /tmp/ccnAeKgf.s 			page 9


 430:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
 431:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
 432:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 433:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 434:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 435:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Select the Protection Mode 
 436:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 437:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   After PCROP activated Option Byte modification NOT POSSIBLE! excepted 
 438:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         Global Read Out Protection modification (from level1 to level0) 
 439:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
 440:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Read a prtotected sector will set RDERR Flag and write a protected sector will set WRPE
 441:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F427xx/STM32F429xx/STM32F437xx/STM32F439xx/STM3
 442:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 443:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  None
 444:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 445:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 446:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
 447:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 448:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 449:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 450:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Mask SPRMOD bit */
 451:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 452:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 453:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Update Option Byte */
 454:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp); 
 455:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 456:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return HAL_OK;
 457:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 458:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 459:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 460:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 461:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Deselect the Protection Mode 
 462:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 463:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   After PCROP activated Option Byte modification NOT POSSIBLE! excepted 
 464:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         Global Read Out Protection modification (from level1 to level0) 
 465:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
 466:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Read a prtotected sector will set RDERR Flag and write a protected sector will set WRPE
 467:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F427xx/STM32F429xx/STM32F437xx/STM32F439xx/STM3
 468:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 469:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  None
 470:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 471:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 472:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
 473:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 474:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 475:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 476:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Mask SPRMOD bit */
 477:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 478:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 479:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Update Option Byte */
 480:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);  
 481:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 482:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return HAL_OK;
 483:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 484:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 485:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F401xC || STM32F401xE ||
 486:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
ARM GAS  /tmp/ccnAeKgf.s 			page 10


 487:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx)|| defined(STM32F439xx)
 488:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 489:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 490:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value for Bank 2
 491:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F427X and STM32F429X devices.  
 492:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  None
 493:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval The FLASH Write Protection  Option Bytes value
 494:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 495:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** uint16_t HAL_FLASHEx_OB_GetBank2WRP(void)
 496:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {                            
 497:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
 498:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 499:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 500:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */
 501:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 502:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 503:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @}
 504:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 505:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 506:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx)|| defined(STM32F439xx)
 507:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 508:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Full erase of FLASH memory sectors 
 509:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 510:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 511:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 512:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 513:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 514:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 515:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 516:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 517:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 518:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 519:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 520:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Banks to be erased
 521:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 522:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 523:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: Bank2 to be erased
 524:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
 525:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 526:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 527:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 528:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
 529:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 530:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 531:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 532:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 533:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 534:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 535:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 536:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* if the previous operation is completed, proceed to erase all sectors */
 537:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 538:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 539:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(Banks == FLASH_BANK_BOTH)
 540:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 541:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* bank1 & bank2 will be erased*/
 542:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_MER_BIT;
 543:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
ARM GAS  /tmp/ccnAeKgf.s 			page 11


 544:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(Banks == FLASH_BANK_1)
 545:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 546:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Only bank1 will be erased*/
 547:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER1;
 548:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 549:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
 550:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 551:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Only bank2 will be erased*/
 552:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER2;
 553:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 554:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 555:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 556:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 557:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 558:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
 559:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector: FLASH sector to erase
 560:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
 561:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 562:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 563:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 564:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 565:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 566:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 567:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 568:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 569:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 570:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 571:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 572:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 573:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 574:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
 575:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 576:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 577:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 578:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 579:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
 580:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 581:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 582:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(VoltageRange == VOLTAGE_RANGE_1)
 583:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 584:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 585:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 586:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == VOLTAGE_RANGE_2)
 587:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 588:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 589:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 590:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == VOLTAGE_RANGE_3)
 591:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 592:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
 593:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 594:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
 595:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 596:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 597:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 598:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 599:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
 600:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if (Sector > FLASH_SECTOR_11) 
ARM GAS  /tmp/ccnAeKgf.s 			page 12


 601:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 602:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     Sector += 4;
 603:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 604:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
 605:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 606:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 607:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR &= SECTOR_MASK;
 608:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 609:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 610:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 611:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 612:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 613:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the write protection of the desired bank1 or bank 2 sectors
 614:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 615:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 616:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 617:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 618:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
 619:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 620:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
 621:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 622:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_23                
 623:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_WRP_SECTOR_All
 624:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   BANK2 starts from OB_WRP_SECTOR_12
 625:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 626:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Enable write protection on all the sectors for the specific bank
 627:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 628:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
 629:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: WRP on all sectors of bank2
 630:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
 631:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 632:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL FLASH State   
 633:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 634:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
 635:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 636:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 637:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 638:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 639:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 640:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 641:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 642:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 643:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 644:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 645:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 646:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 647:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if (((WRPSector == OB_WRP_SECTOR_All) && ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH)
 648:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****          (WRPSector < OB_WRP_SECTOR_12))
 649:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 650:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        if (WRPSector == OB_WRP_SECTOR_All)
 651:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 652:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection on all sector of BANK1*/
 653:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 654:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 655:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        else
 656:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 657:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection done on sectors of BANK1*/
ARM GAS  /tmp/ccnAeKgf.s 			page 13


 658:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 659:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 660:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 661:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 662:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 663:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 664:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 665:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 666:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 667:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector of BANK2*/
 668:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if ((WRPSector == OB_WRP_SECTOR_All) && (Banks == FLASH_BANK_BOTH))
 669:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 670:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 671:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 672:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 673:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 674:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 675:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 676:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 677:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 678:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 679:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 680:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 681:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 682:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 683:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 684:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 685:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the write protection of the desired bank1 or bank 2 sectors
 686:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 687:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 688:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 689:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 690:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
 691:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 692:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
 693:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 694:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_23                
 695:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_WRP_Sector_All
 696:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   BANK2 starts from OB_WRP_SECTOR_12
 697:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 698:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Disable write protection on all the sectors for the specific bank
 699:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 700:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 701:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: Bank2 to be erased
 702:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
 703:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 704:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Staus   
 705:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 706:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
 707:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 708:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 709:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 710:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 711:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 712:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 713:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 714:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
ARM GAS  /tmp/ccnAeKgf.s 			page 14


 715:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 716:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 717:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 718:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 719:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if (((WRPSector == OB_WRP_SECTOR_All) && ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH)
 720:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****          (WRPSector < OB_WRP_SECTOR_12))
 721:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 722:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        if (WRPSector == OB_WRP_SECTOR_All)
 723:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 724:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection on all sector of BANK1*/
 725:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 726:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 727:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        else
 728:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 729:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection done on sectors of BANK1*/
 730:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 731:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 732:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 733:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 734:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 735:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 736:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 737:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 738:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 739:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector  of BANK2*/
 740:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if ((WRPSector == OB_WRP_SECTOR_All) && (Banks == FLASH_BANK_BOTH))
 741:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 742:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 743:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 744:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 745:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 746:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 747:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 748:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 749:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 750:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 751:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 752:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 753:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 754:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 755:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 756:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 757:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Configure the Dual Bank Boot.
 758:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   
 759:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 760:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      
 761:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  BootConfig specifies the Dual Bank Boot Option byte.
 762:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 763:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
 764:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
 765:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 766:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 767:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t BootConfig)
 768:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 769:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 770:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 771:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
ARM GAS  /tmp/ccnAeKgf.s 			page 15


 772:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_BOOT(BootConfig));
 773:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 774:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */  
 775:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 776:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 777:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 778:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
 779:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Set Dual Bank Boot */
 780:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 781:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= BootConfig;
 782:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 783:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 784:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 785:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 786:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 787:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 788:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the read/write protection (PCROP) of the desired 
 789:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         sectors of Bank 1 and/or Bank 2.
 790:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 791:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank1 Specifies the sector(s) to be read/write protected or unprotected for bank1
 792:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 793:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_0 and OB_PCROP_SECTOR_11
 794:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 795:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank2 Specifies the sector(s) to be read/write protected or unprotected for bank2
 796:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 797:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_12 and OB_PCROP_SECTOR_23
 798:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 799:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks Enable PCROP protection on all the sectors for the specific bank
 800:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 801:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
 802:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: WRP on all sectors of bank2
 803:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
 804:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 805:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
 806:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 807:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t 
 808:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 809:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 810:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 811:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 812:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 813:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 814:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 815:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 816:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 817:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 818:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 819:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 820:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank1));
 821:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK1*/
 822:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)SectorBank1; 
 823:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 824:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 825:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 826:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 827:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 828:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2; 
ARM GAS  /tmp/ccnAeKgf.s 			page 16


 829:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 830:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 831:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector  of BANK2*/
 832:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if (Banks == FLASH_BANK_BOTH)
 833:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 834:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 835:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 836:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 837:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 838:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 839:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 840:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /*Write protection done on sectors of BANK2*/
 841:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2; 
 842:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 843:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 844:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 845:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 846:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 847:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 848:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 849:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 850:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 851:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 852:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the read/write protection (PCROP) of the desired 
 853:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         sectors  of Bank 1 and/or Bank 2.
 854:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 855:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank1 specifies the sector(s) to be read/write protected or unprotected for bank1
 856:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 857:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_0 and OB_PCROP_SECTOR_11
 858:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 859:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank2 Specifies the sector(s) to be read/write protected or unprotected for bank2
 860:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 861:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_12 and OB_PCROP_SECTOR_23
 862:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 863:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks Disable PCROP protection on all the sectors for the specific bank
 864:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 865:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
 866:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: WRP on all sectors of bank2
 867:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
 868:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 869:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
 870:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 871:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t
 872:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {  
 873:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 874:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 875:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 876:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 877:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 878:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 879:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 880:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 881:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 882:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 883:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 884:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 885:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank1));
ARM GAS  /tmp/ccnAeKgf.s 			page 17


 886:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK1*/
 887:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~SectorBank1); 
 888:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 889:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 890:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 891:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 892:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 893:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2); 
 894:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 895:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 896:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector  of BANK2*/
 897:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if (Banks == FLASH_BANK_BOTH)
 898:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 899:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 900:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****      /* Wait for last operation to be completed */
 901:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 902:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 903:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 904:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 905:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /*Write protection done on sectors of BANK2*/
 906:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2); 
 907:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 908:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 909:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 910:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 911:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 912:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 913:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 914:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 915:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 916:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */
 917:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 918:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx)|| defined(STM32F417xx) ||\
 919:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
 920:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 921:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Mass erase of FLASH memory
 922:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 923:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 924:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 925:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 926:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 927:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 928:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 929:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 930:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 931:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 932:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 933:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Banks to be erased
 934:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 935:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 936:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 937:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 938:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 939:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
 940:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
  29              		.loc 1 940 0
  30              		.cfi_startproc
ARM GAS  /tmp/ccnAeKgf.s 			page 18


  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
 941:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 942:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 943:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 944:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 945:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 946:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 947:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase all sectors */
 948:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    FLASH->CR &= CR_PSIZE_MASK;
  35              		.loc 1 948 0
  36 0000 074B     		ldr	r3, .L2
  37 0002 1A69     		ldr	r2, [r3, #16]
  38 0004 22F44072 		bic	r2, r2, #768
  39 0008 1A61     		str	r2, [r3, #16]
 949:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    FLASH->CR |= tmp_psize;
  40              		.loc 1 949 0
  41 000a 1A69     		ldr	r2, [r3, #16]
  42 000c 1A61     		str	r2, [r3, #16]
 950:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    FLASH->CR |= FLASH_CR_MER;
  43              		.loc 1 950 0
  44 000e 1A69     		ldr	r2, [r3, #16]
  45 0010 42F00402 		orr	r2, r2, #4
  46 0014 1A61     		str	r2, [r3, #16]
 951:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    FLASH->CR |= FLASH_CR_STRT;
  47              		.loc 1 951 0
  48 0016 1A69     		ldr	r2, [r3, #16]
  49 0018 42F48032 		orr	r2, r2, #65536
  50 001c 1A61     		str	r2, [r3, #16]
  51 001e 7047     		bx	lr
  52              	.L3:
  53              		.align	2
  54              	.L2:
  55 0020 003C0240 		.word	1073888256
  56              		.cfi_endproc
  57              	.LFE120:
  59              		.section	.text.FLASH_OB_BOR_LevelConfig,"ax",%progbits
  60              		.align	2
  61              		.thumb
  62              		.thumb_func
  64              	FLASH_OB_BOR_LevelConfig:
  65              	.LFB128:
 952:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 953:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 954:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 955:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
 956:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector: FLASH sector to erase
 957:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
 958:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 959:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 960:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 961:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 962:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 963:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 964:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
ARM GAS  /tmp/ccnAeKgf.s 			page 19


 965:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 966:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 967:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 968:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 969:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 970:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 971:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
 972:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 973:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 974:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 975:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 976:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
 977:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 978:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 979:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(VoltageRange == VOLTAGE_RANGE_1)
 980:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 981:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 982:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 983:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == VOLTAGE_RANGE_2)
 984:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 985:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 986:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 987:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == VOLTAGE_RANGE_3)
 988:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 989:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
 990:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 991:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
 992:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 993:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 994:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 995:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 996:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
 997:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR &= CR_PSIZE_MASK;
 998:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 999:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR &= SECTOR_MASK;
1000:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
1001:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
1002:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1003:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1004:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1005:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the write protection of the desired bank 1 sectors
1006:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1007:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
1008:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1009:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1010:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1011:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1012:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
1013:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series 
1014:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1015:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Enable write protection on all the sectors for the specific bank
1016:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1017:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
1018:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1019:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status 
1020:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1021:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
ARM GAS  /tmp/ccnAeKgf.s 			page 20


1022:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1023:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1024:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1025:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1026:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
1027:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
1028:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1029:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1030:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
1031:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1032:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1033:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1034:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
1035:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1036:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1037:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1038:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1039:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1040:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1041:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the write protection of the desired bank 1 sectors
1042:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1043:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
1044:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1045:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1046:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1047:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1048:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
1049:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series 
1050:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1051:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Enable write protection on all the sectors for the specific bank
1052:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1053:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
1054:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1055:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status 
1056:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1057:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
1058:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1059:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1060:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1061:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1062:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
1063:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
1064:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1065:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1066:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
1067:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1068:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1069:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1070:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
1071:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1072:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1073:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1074:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1075:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE ||
1076:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1077:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
1078:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
ARM GAS  /tmp/ccnAeKgf.s 			page 21


1079:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the read/write protection (PCROP) of the desired sectors.
1080:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F401xx devices.
1081:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector specifies the sector(s) to be read/write protected or unprotected.
1082:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1083:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
1084:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_Sector_All                         
1085:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
1086:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1087:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t Sector)
1088:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1089:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1090:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1091:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1092:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_PCROP(Sector));
1093:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1094:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */  
1095:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
1096:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1097:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1098:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1099:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)Sector;
1100:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1101:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1102:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1103:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1104:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1105:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1106:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1107:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the read/write protection (PCROP) of the desired sectors.
1108:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F401xx devices.
1109:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector specifies the sector(s) to be read/write protected or unprotected.
1110:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1111:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
1112:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_Sector_All                         
1113:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
1114:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1115:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t Sector)
1116:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {  
1117:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1118:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1119:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1120:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_PCROP(Sector));
1121:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1122:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */  
1123:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
1124:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1125:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1126:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1127:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~Sector);
1128:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1129:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1130:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1131:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1132:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1133:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
1134:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1135:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
ARM GAS  /tmp/ccnAeKgf.s 			page 22


1136:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Set the read protection level.
1137:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Level: specifies the read protection level.
1138:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1139:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_0: No protection
1140:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_1: Read protection of the memory
1141:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_2: Full chip protection
1142:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   
1143:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1144:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *    
1145:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
1146:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1147:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
1148:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1149:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1150:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1151:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1152:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_RDP_LEVEL(Level));
1153:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1154:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1155:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
1156:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1158:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1159:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
1160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1161:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1162:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1163:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1164:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1166:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1167:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Iwdg: Selects the IWDG mode
1168:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1169:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1170:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1171:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Stop: Reset event when entering STOP mode.
1172:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
1173:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STOP_NO_RST: No reset generated when entering in STOP
1174:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1175:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Stdby: Reset event when entering Standby mode.
1176:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
1177:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
1178:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1179:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
1180:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1181:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
1182:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1183:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
1184:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1185:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1186:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1187:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(Iwdg));
1188:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(Stop));
1189:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(Stdby));
1190:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1191:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1192:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
ARM GAS  /tmp/ccnAeKgf.s 			page 23


1193:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1194:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1195:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {     
1196:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1197:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1198:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1199:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Update User Option Byte */
1200:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)opti
1201:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1202:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1203:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status; 
1204:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1205:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1206:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1207:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1208:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Set the BOR Level. 
1209:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Level: specifies the Option Bytes BOR Reset Level.
1210:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1211:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1212:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1213:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1214:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1215:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
1216:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1217:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
1218:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
  66              		.loc 1 1218 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71              	.LVL1:
1219:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1220:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_BOR_LEVEL(Level));
1221:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1222:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Set the BOR Level */
1223:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
  72              		.loc 1 1223 0
  73 0000 044B     		ldr	r3, .L5
  74 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  75 0004 02F0F302 		and	r2, r2, #243
  76 0008 1A70     		strb	r2, [r3]
1224:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
  77              		.loc 1 1224 0
  78 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  79 000c 1043     		orrs	r0, r0, r2
  80              	.LVL2:
  81 000e 1870     		strb	r0, [r3]
1225:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1226:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return HAL_OK;
1227:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1228:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
  82              		.loc 1 1228 0
  83 0010 0020     		movs	r0, #0
  84 0012 7047     		bx	lr
  85              	.L6:
  86              		.align	2
ARM GAS  /tmp/ccnAeKgf.s 			page 24


  87              	.L5:
  88 0014 143C0240 		.word	1073888276
  89              		.cfi_endproc
  90              	.LFE128:
  92              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
  93              		.align	2
  94              		.thumb
  95              		.thumb_func
  97              	FLASH_OB_GetUser:
  98              	.LFB129:
1229:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1230:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1231:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Return the FLASH User Option Byte value.
1232:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  None
1233:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1234:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         and RST_STDBY(Bit2).
1235:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1236:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetUser(void)
1237:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
  99              		.loc 1 1237 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
1238:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the User Option Byte */
1239:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return ((uint8_t)(FLASH->OPTCR & 0xE0));
 104              		.loc 1 1239 0
 105 0000 024B     		ldr	r3, .L8
 106 0002 5869     		ldr	r0, [r3, #20]
1240:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 107              		.loc 1 1240 0
 108 0004 00F0E000 		and	r0, r0, #224
 109 0008 7047     		bx	lr
 110              	.L9:
 111 000a 00BF     		.align	2
 112              	.L8:
 113 000c 003C0240 		.word	1073888256
 114              		.cfi_endproc
 115              	.LFE129:
 117              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 118              		.align	2
 119              		.thumb
 120              		.thumb_func
 122              	FLASH_OB_GetWRP:
 123              	.LFB130:
1241:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1242:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1243:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Return the FLASH Write Protection Option Bytes value.
1244:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  None
1245:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval uint16_t FLASH Write Protection Option Bytes value
1246:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1247:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint16_t FLASH_OB_GetWRP(void)
1248:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 124              		.loc 1 1248 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccnAeKgf.s 			page 25


 128              		@ link register save eliminated.
1249:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
1250:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 129              		.loc 1 1250 0
 130 0000 014B     		ldr	r3, .L11
 131 0002 1888     		ldrh	r0, [r3]
1251:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 132              		.loc 1 1251 0
 133 0004 80B2     		uxth	r0, r0
 134 0006 7047     		bx	lr
 135              	.L12:
 136              		.align	2
 137              	.L11:
 138 0008 163C0240 		.word	1073888278
 139              		.cfi_endproc
 140              	.LFE130:
 142              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 143              		.align	2
 144              		.thumb
 145              		.thumb_func
 147              	FLASH_OB_GetRDP:
 148              	.LFB131:
1252:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1253:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1254:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Read Protection level.
1255:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  None
1256:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval FlagStatus FLASH ReadOut Protection Status:
1257:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1258:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - RESET, when OB_RDP_Level_0 is set
1259:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1260:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static FlagStatus FLASH_OB_GetRDP(void)
1261:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 149              		.loc 1 1261 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL3:
1262:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FlagStatus readstatus = RESET;
1263:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1264:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_LEVEL_0))
 155              		.loc 1 1264 0
 156 0000 044B     		ldr	r3, .L16
 157 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 158 0004 DBB2     		uxtb	r3, r3
 159 0006 AA2B     		cmp	r3, #170
 160 0008 01D1     		bne	.L15
1262:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FlagStatus readstatus = RESET;
 161              		.loc 1 1262 0
 162 000a 0020     		movs	r0, #0
 163 000c 7047     		bx	lr
 164              	.L15:
1265:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1266:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     readstatus = SET;
 165              		.loc 1 1266 0
 166 000e 0120     		movs	r0, #1
 167              	.LVL4:
ARM GAS  /tmp/ccnAeKgf.s 			page 26


1267:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1268:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1269:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return readstatus;
1270:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 168              		.loc 1 1270 0
 169 0010 7047     		bx	lr
 170              	.L17:
 171 0012 00BF     		.align	2
 172              	.L16:
 173 0014 153C0240 		.word	1073888277
 174              		.cfi_endproc
 175              	.LFE131:
 177              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 178              		.align	2
 179              		.thumb
 180              		.thumb_func
 182              	FLASH_OB_GetBOR:
 183              	.LFB132:
1271:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1272:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1273:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Returns the FLASH BOR level.
1274:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  None
1275:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval uint8_t The FLASH BOR level:
1276:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1277:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1278:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1279:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1280:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1281:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetBOR(void)
1282:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 184              		.loc 1 1282 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
1283:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the FLASH BOR level */
1284:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 189              		.loc 1 1284 0
 190 0000 024B     		ldr	r3, .L19
 191 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1285:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 192              		.loc 1 1285 0
 193 0004 00F00C00 		and	r0, r0, #12
 194 0008 7047     		bx	lr
 195              	.L20:
 196 000a 00BF     		.align	2
 197              	.L19:
 198 000c 143C0240 		.word	1073888276
 199              		.cfi_endproc
 200              	.LFE132:
 202              		.section	.text.FLASH_OB_EnableWRP,"ax",%progbits
 203              		.align	2
 204              		.thumb
 205              		.thumb_func
 207              	FLASH_OB_EnableWRP:
 208              	.LFB122:
1022:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
ARM GAS  /tmp/ccnAeKgf.s 			page 27


 209              		.loc 1 1022 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL5:
 214 0000 10B5     		push	{r4, lr}
 215              	.LCFI0:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
 219 0002 0446     		mov	r4, r0
 220              	.LVL6:
1030:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 221              		.loc 1 1030 0
 222 0004 4CF25030 		movw	r0, #50000
 223              	.LVL7:
 224 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 225              	.LVL8:
1032:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
 226              		.loc 1 1032 0
 227 000c 0346     		mov	r3, r0
 228 000e 28B9     		cbnz	r0, .L22
1034:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 229              		.loc 1 1034 0
 230 0010 034A     		ldr	r2, .L24
 231 0012 1088     		ldrh	r0, [r2]
 232              	.LVL9:
 233 0014 80B2     		uxth	r0, r0
 234 0016 20EA0400 		bic	r0, r0, r4
 235 001a 1080     		strh	r0, [r2]	@ movhi
 236              	.L22:
1038:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 237              		.loc 1 1038 0
 238 001c 1846     		mov	r0, r3
 239 001e 10BD     		pop	{r4, pc}
 240              	.LVL10:
 241              	.L25:
 242              		.align	2
 243              	.L24:
 244 0020 163C0240 		.word	1073888278
 245              		.cfi_endproc
 246              	.LFE122:
 248              		.section	.text.FLASH_OB_DisableWRP,"ax",%progbits
 249              		.align	2
 250              		.thumb
 251              		.thumb_func
 253              	FLASH_OB_DisableWRP:
 254              	.LFB123:
1058:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 255              		.loc 1 1058 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              	.LVL11:
 260 0000 10B5     		push	{r4, lr}
 261              	.LCFI1:
 262              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccnAeKgf.s 			page 28


 263              		.cfi_offset 4, -8
 264              		.cfi_offset 14, -4
 265 0002 0446     		mov	r4, r0
 266              	.LVL12:
1066:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 267              		.loc 1 1066 0
 268 0004 4CF25030 		movw	r0, #50000
 269              	.LVL13:
 270 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 271              	.LVL14:
1068:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
 272              		.loc 1 1068 0
 273 000c 0246     		mov	r2, r0
 274 000e 28B9     		cbnz	r0, .L27
1070:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 275              		.loc 1 1070 0
 276 0010 0349     		ldr	r1, .L29
 277 0012 0B88     		ldrh	r3, [r1]
 278 0014 9BB2     		uxth	r3, r3
 279 0016 A4B2     		uxth	r4, r4
 280              	.LVL15:
 281 0018 1C43     		orrs	r4, r4, r3
 282 001a 0C80     		strh	r4, [r1]	@ movhi
 283              	.L27:
1074:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE ||
 284              		.loc 1 1074 0
 285 001c 1046     		mov	r0, r2
 286              	.LVL16:
 287 001e 10BD     		pop	{r4, pc}
 288              	.L30:
 289              		.align	2
 290              	.L29:
 291 0020 163C0240 		.word	1073888278
 292              		.cfi_endproc
 293              	.LFE123:
 295              		.section	.text.FLASH_OB_RDP_LevelConfig,"ax",%progbits
 296              		.align	2
 297              		.thumb
 298              		.thumb_func
 300              	FLASH_OB_RDP_LevelConfig:
 301              	.LFB126:
1148:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 302              		.loc 1 1148 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              	.LVL17:
 307 0000 10B5     		push	{r4, lr}
 308              	.LCFI2:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 4, -8
 311              		.cfi_offset 14, -4
 312 0002 0446     		mov	r4, r0
 313              	.LVL18:
1155:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 314              		.loc 1 1155 0
 315 0004 4CF25030 		movw	r0, #50000
ARM GAS  /tmp/ccnAeKgf.s 			page 29


 316              	.LVL19:
 317 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 318              	.LVL20:
1157:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
 319              		.loc 1 1157 0
 320 000c 0346     		mov	r3, r0
 321 000e 08B9     		cbnz	r0, .L32
1159:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 322              		.loc 1 1159 0
 323 0010 014A     		ldr	r2, .L34
 324 0012 1470     		strb	r4, [r2]
 325              	.L32:
1163:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 326              		.loc 1 1163 0
 327 0014 1846     		mov	r0, r3
 328              	.LVL21:
 329 0016 10BD     		pop	{r4, pc}
 330              	.L35:
 331              		.align	2
 332              	.L34:
 333 0018 153C0240 		.word	1073888277
 334              		.cfi_endproc
 335              	.LFE126:
 337              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 338              		.align	2
 339              		.thumb
 340              		.thumb_func
 342              	FLASH_OB_UserConfig:
 343              	.LFB127:
1182:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 344              		.loc 1 1182 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              	.LVL22:
 349 0000 70B5     		push	{r4, r5, r6, lr}
 350              	.LCFI3:
 351              		.cfi_def_cfa_offset 16
 352              		.cfi_offset 4, -16
 353              		.cfi_offset 5, -12
 354              		.cfi_offset 6, -8
 355              		.cfi_offset 14, -4
 356 0002 0446     		mov	r4, r0
 357 0004 0E46     		mov	r6, r1
 358 0006 1546     		mov	r5, r2
 359              	.LVL23:
1192:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 360              		.loc 1 1192 0
 361 0008 4CF25030 		movw	r0, #50000
 362              	.LVL24:
 363 000c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 364              	.LVL25:
1194:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {     
 365              		.loc 1 1194 0
 366 0010 0246     		mov	r2, r0
 367 0012 38B9     		cbnz	r0, .L37
1197:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
ARM GAS  /tmp/ccnAeKgf.s 			page 30


 368              		.loc 1 1197 0
 369 0014 0449     		ldr	r1, .L39
 370 0016 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 371 0018 03F01F03 		and	r3, r3, #31
 372              	.LVL26:
1200:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 373              		.loc 1 1200 0
 374 001c 1E43     		orrs	r6, r6, r3
 375 001e 3543     		orrs	r5, r5, r6
 376 0020 2C43     		orrs	r4, r4, r5
 377 0022 0C70     		strb	r4, [r1]
 378              	.LVL27:
 379              	.L37:
1205:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 380              		.loc 1 1205 0
 381 0024 1046     		mov	r0, r2
 382              	.LVL28:
 383 0026 70BD     		pop	{r4, r5, r6, pc}
 384              	.L40:
 385              		.align	2
 386              	.L39:
 387 0028 143C0240 		.word	1073888276
 388              		.cfi_endproc
 389              	.LFE127:
 391              		.section	.text.FLASH_OB_EnablePCROP,"ax",%progbits
 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 396              	FLASH_OB_EnablePCROP:
 397              	.LFB124:
1088:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 398              		.loc 1 1088 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL29:
 403 0000 10B5     		push	{r4, lr}
 404              	.LCFI4:
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 4, -8
 407              		.cfi_offset 14, -4
 408 0002 0446     		mov	r4, r0
 409              	.LVL30:
1095:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 410              		.loc 1 1095 0
 411 0004 4CF25030 		movw	r0, #50000
 412              	.LVL31:
 413 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 414              	.LVL32:
1097:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
 415              		.loc 1 1097 0
 416 000c 0246     		mov	r2, r0
 417 000e 28B9     		cbnz	r0, .L42
1099:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 418              		.loc 1 1099 0
 419 0010 0349     		ldr	r1, .L44
 420 0012 0B88     		ldrh	r3, [r1]
ARM GAS  /tmp/ccnAeKgf.s 			page 31


 421 0014 9BB2     		uxth	r3, r3
 422 0016 A4B2     		uxth	r4, r4
 423              	.LVL33:
 424 0018 1C43     		orrs	r4, r4, r3
 425 001a 0C80     		strh	r4, [r1]	@ movhi
 426              	.L42:
1103:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 427              		.loc 1 1103 0
 428 001c 1046     		mov	r0, r2
 429              	.LVL34:
 430 001e 10BD     		pop	{r4, pc}
 431              	.L45:
 432              		.align	2
 433              	.L44:
 434 0020 163C0240 		.word	1073888278
 435              		.cfi_endproc
 436              	.LFE124:
 438              		.section	.text.FLASH_OB_DisablePCROP,"ax",%progbits
 439              		.align	2
 440              		.thumb
 441              		.thumb_func
 443              	FLASH_OB_DisablePCROP:
 444              	.LFB125:
1116:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 445              		.loc 1 1116 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL35:
 450 0000 10B5     		push	{r4, lr}
 451              	.LCFI5:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 4, -8
 454              		.cfi_offset 14, -4
 455 0002 0446     		mov	r4, r0
 456              	.LVL36:
1123:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 457              		.loc 1 1123 0
 458 0004 4CF25030 		movw	r0, #50000
 459              	.LVL37:
 460 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 461              	.LVL38:
1125:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
 462              		.loc 1 1125 0
 463 000c 0346     		mov	r3, r0
 464 000e 28B9     		cbnz	r0, .L47
1127:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 465              		.loc 1 1127 0
 466 0010 034A     		ldr	r2, .L49
 467 0012 1088     		ldrh	r0, [r2]
 468              	.LVL39:
 469 0014 80B2     		uxth	r0, r0
 470 0016 20EA0400 		bic	r0, r0, r4
 471 001a 1080     		strh	r0, [r2]	@ movhi
 472              	.L47:
1132:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
 473              		.loc 1 1132 0
ARM GAS  /tmp/ccnAeKgf.s 			page 32


 474 001c 1846     		mov	r0, r3
 475 001e 10BD     		pop	{r4, pc}
 476              	.LVL40:
 477              	.L50:
 478              		.align	2
 479              	.L49:
 480 0020 163C0240 		.word	1073888278
 481              		.cfi_endproc
 482              	.LFE125:
 484              		.section	.text.HAL_FLASHEx_OBProgram,"ax",%progbits
 485              		.align	2
 486              		.global	HAL_FLASHEx_OBProgram
 487              		.thumb
 488              		.thumb_func
 490              	HAL_FLASHEx_OBProgram:
 491              	.LFB114:
 283:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 492              		.loc 1 283 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496              	.LVL41:
 287:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 497              		.loc 1 287 0
 498 0000 1D4B     		ldr	r3, .L62
 499 0002 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 500 0004 012B     		cmp	r3, #1
 501 0006 35D0     		beq	.L58
 283:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 502              		.loc 1 283 0 discriminator 2
 503 0008 10B5     		push	{r4, lr}
 504              	.LCFI6:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 4, -8
 507              		.cfi_offset 14, -4
 508 000a 0446     		mov	r4, r0
 287:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 509              		.loc 1 287 0 discriminator 2
 510 000c 0122     		movs	r2, #1
 511 000e 1A4B     		ldr	r3, .L62
 512 0010 1A76     		strb	r2, [r3, #24]
 293:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 513              		.loc 1 293 0 discriminator 2
 514 0012 0368     		ldr	r3, [r0]
 515 0014 13F0010F 		tst	r3, #1
 516 0018 0CD0     		beq	.L59
 296:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 517              		.loc 1 296 0
 518 001a 4368     		ldr	r3, [r0, #4]
 519 001c 9342     		cmp	r3, r2
 520 001e 04D1     		bne	.L54
 299:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 521              		.loc 1 299 0
 522 0020 C168     		ldr	r1, [r0, #12]
 523 0022 8068     		ldr	r0, [r0, #8]
 524              	.LVL42:
 525 0024 FFF7FEFF 		bl	FLASH_OB_EnableWRP
ARM GAS  /tmp/ccnAeKgf.s 			page 33


 526              	.LVL43:
 527 0028 05E0     		b	.L53
 528              	.LVL44:
 529              	.L54:
 304:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 530              		.loc 1 304 0
 531 002a C168     		ldr	r1, [r0, #12]
 532 002c 8068     		ldr	r0, [r0, #8]
 533              	.LVL45:
 534 002e FFF7FEFF 		bl	FLASH_OB_DisableWRP
 535              	.LVL46:
 536 0032 00E0     		b	.L53
 537              	.LVL47:
 538              	.L59:
 284:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 539              		.loc 1 284 0
 540 0034 0120     		movs	r0, #1
 541              	.LVL48:
 542              	.L53:
 309:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 543              		.loc 1 309 0
 544 0036 2368     		ldr	r3, [r4]
 545 0038 13F0020F 		tst	r3, #2
 546 003c 02D0     		beq	.L55
 311:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 547              		.loc 1 311 0
 548 003e 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 549              	.LVL49:
 550 0040 FFF7FEFF 		bl	FLASH_OB_RDP_LevelConfig
 551              	.LVL50:
 552              	.L55:
 315:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 553              		.loc 1 315 0
 554 0044 2368     		ldr	r3, [r4]
 555 0046 13F0040F 		tst	r3, #4
 556 004a 08D0     		beq	.L56
 317:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                                      pOBInit->USERConfig&OB_STOP_NO_RST,
 557              		.loc 1 317 0
 558 004c 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 559              	.LVL51:
 560 004e 00F08002 		and	r2, r0, #128
 561 0052 00F04001 		and	r1, r0, #64
 562 0056 00F02000 		and	r0, r0, #32
 563 005a FFF7FEFF 		bl	FLASH_OB_UserConfig
 564              	.LVL52:
 565              	.L56:
 323:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 566              		.loc 1 323 0
 567 005e 2368     		ldr	r3, [r4]
 568 0060 13F0080F 		tst	r3, #8
 569 0064 02D0     		beq	.L57
 325:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 570              		.loc 1 325 0
 571 0066 207D     		ldrb	r0, [r4, #20]	@ zero_extendqisi2
 572              	.LVL53:
 573 0068 FFF7FEFF 		bl	FLASH_OB_BOR_LevelConfig
 574              	.LVL54:
ARM GAS  /tmp/ccnAeKgf.s 			page 34


 575              	.L57:
 329:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 576              		.loc 1 329 0
 577 006c 0022     		movs	r2, #0
 578 006e 024B     		ldr	r3, .L62
 579 0070 1A76     		strb	r2, [r3, #24]
 331:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 580              		.loc 1 331 0
 581 0072 10BD     		pop	{r4, pc}
 582              	.LVL55:
 583              	.L58:
 584              	.LCFI7:
 585              		.cfi_def_cfa_offset 0
 586              		.cfi_restore 4
 587              		.cfi_restore 14
 287:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 588              		.loc 1 287 0
 589 0074 0220     		movs	r0, #2
 590              	.LVL56:
 591 0076 7047     		bx	lr
 592              	.L63:
 593              		.align	2
 594              	.L62:
 595 0078 00000000 		.word	pFlash
 596              		.cfi_endproc
 597              	.LFE114:
 599              		.section	.text.HAL_FLASHEx_OBGetConfig,"ax",%progbits
 600              		.align	2
 601              		.global	HAL_FLASHEx_OBGetConfig
 602              		.thumb
 603              		.thumb_func
 605              	HAL_FLASHEx_OBGetConfig:
 606              	.LFB115:
 342:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 607              		.loc 1 342 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              	.LVL57:
 612 0000 10B5     		push	{r4, lr}
 613              	.LCFI8:
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 4, -8
 616              		.cfi_offset 14, -4
 617 0002 0446     		mov	r4, r0
 343:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 618              		.loc 1 343 0
 619 0004 0F23     		movs	r3, #15
 620 0006 0360     		str	r3, [r0]
 346:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 621              		.loc 1 346 0
 622 0008 FFF7FEFF 		bl	FLASH_OB_GetWRP
 623              	.LVL58:
 624 000c A060     		str	r0, [r4, #8]
 349:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 625              		.loc 1 349 0
 626 000e FFF7FEFF 		bl	FLASH_OB_GetRDP
ARM GAS  /tmp/ccnAeKgf.s 			page 35


 627              	.LVL59:
 628 0012 2061     		str	r0, [r4, #16]
 352:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 629              		.loc 1 352 0
 630 0014 FFF7FEFF 		bl	FLASH_OB_GetUser
 631              	.LVL60:
 632 0018 2076     		strb	r0, [r4, #24]
 355:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 633              		.loc 1 355 0
 634 001a FFF7FEFF 		bl	FLASH_OB_GetBOR
 635              	.LVL61:
 636 001e 6061     		str	r0, [r4, #20]
 637 0020 10BD     		pop	{r4, pc}
 638              		.cfi_endproc
 639              	.LFE115:
 641 0022 00BF     		.section	.text.HAL_FLASHEx_AdvOBProgram,"ax",%progbits
 642              		.align	2
 643              		.global	HAL_FLASHEx_AdvOBProgram
 644              		.thumb
 645              		.thumb_func
 647              	HAL_FLASHEx_AdvOBProgram:
 648              	.LFB116:
 368:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 649              		.loc 1 368 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              	.LVL62:
 654 0000 08B5     		push	{r3, lr}
 655              	.LCFI9:
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 3, -8
 658              		.cfi_offset 14, -4
 659              	.LVL63:
 375:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 660              		.loc 1 375 0
 661 0002 0368     		ldr	r3, [r0]
 662 0004 13F0010F 		tst	r3, #1
 663 0008 0AD0     		beq	.L69
 379:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 664              		.loc 1 379 0
 665 000a 4368     		ldr	r3, [r0, #4]
 666 000c 012B     		cmp	r3, #1
 667 000e 03D1     		bne	.L68
 383:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx */
 668              		.loc 1 383 0
 669 0010 0089     		ldrh	r0, [r0, #8]
 670              	.LVL64:
 671 0012 FFF7FEFF 		bl	FLASH_OB_EnablePCROP
 672              	.LVL65:
 673 0016 08BD     		pop	{r3, pc}
 674              	.LVL66:
 675              	.L68:
 392:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx */
 676              		.loc 1 392 0
 677 0018 0089     		ldrh	r0, [r0, #8]
 678              	.LVL67:
ARM GAS  /tmp/ccnAeKgf.s 			page 36


 679 001a FFF7FEFF 		bl	FLASH_OB_DisablePCROP
 680              	.LVL68:
 681 001e 08BD     		pop	{r3, pc}
 682              	.LVL69:
 683              	.L69:
 369:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 684              		.loc 1 369 0
 685 0020 0120     		movs	r0, #1
 686              	.LVL70:
 408:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 687              		.loc 1 408 0
 688 0022 08BD     		pop	{r3, pc}
 689              		.cfi_endproc
 690              	.LFE116:
 692              		.section	.text.HAL_FLASHEx_AdvOBGetConfig,"ax",%progbits
 693              		.align	2
 694              		.global	HAL_FLASHEx_AdvOBGetConfig
 695              		.thumb
 696              		.thumb_func
 698              	HAL_FLASHEx_AdvOBGetConfig:
 699              	.LFB117:
 418:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
 700              		.loc 1 418 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              		@ link register save eliminated.
 705              	.LVL71:
 421:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx */
 706              		.loc 1 421 0
 707 0000 014B     		ldr	r3, .L72
 708 0002 1B88     		ldrh	r3, [r3]
 709 0004 0381     		strh	r3, [r0, #8]	@ movhi
 710 0006 7047     		bx	lr
 711              	.L73:
 712              		.align	2
 713              	.L72:
 714 0008 163C0240 		.word	1073888278
 715              		.cfi_endproc
 716              	.LFE117:
 718              		.section	.text.HAL_FLASHEx_OB_SelectPCROP,"ax",%progbits
 719              		.align	2
 720              		.global	HAL_FLASHEx_OB_SelectPCROP
 721              		.thumb
 722              		.thumb_func
 724              	HAL_FLASHEx_OB_SelectPCROP:
 725              	.LFB118:
 447:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 726              		.loc 1 447 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731              	.LVL72:
 451:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 732              		.loc 1 451 0
 733 0000 034A     		ldr	r2, .L75
ARM GAS  /tmp/ccnAeKgf.s 			page 37


 734 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 735              	.LVL73:
 454:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 736              		.loc 1 454 0
 737 0004 43F08003 		orr	r3, r3, #128
 738              	.LVL74:
 739 0008 1370     		strb	r3, [r2]
 458:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 740              		.loc 1 458 0
 741 000a 0020     		movs	r0, #0
 742 000c 7047     		bx	lr
 743              	.L76:
 744 000e 00BF     		.align	2
 745              	.L75:
 746 0010 173C0240 		.word	1073888279
 747              		.cfi_endproc
 748              	.LFE118:
 750              		.section	.text.HAL_FLASHEx_OB_DeSelectPCROP,"ax",%progbits
 751              		.align	2
 752              		.global	HAL_FLASHEx_OB_DeSelectPCROP
 753              		.thumb
 754              		.thumb_func
 756              	HAL_FLASHEx_OB_DeSelectPCROP:
 757              	.LFB119:
 473:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 758              		.loc 1 473 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              		@ link register save eliminated.
 763              	.LVL75:
 477:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 764              		.loc 1 477 0
 765 0000 034A     		ldr	r2, .L78
 766 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 767 0004 03F07F03 		and	r3, r3, #127
 768              	.LVL76:
 480:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 769              		.loc 1 480 0
 770 0008 1370     		strb	r3, [r2]
 483:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 771              		.loc 1 483 0
 772 000a 0020     		movs	r0, #0
 773 000c 7047     		bx	lr
 774              	.L79:
 775 000e 00BF     		.align	2
 776              	.L78:
 777 0010 173C0240 		.word	1073888279
 778              		.cfi_endproc
 779              	.LFE119:
 781              		.section	.text.FLASH_Erase_Sector,"ax",%progbits
 782              		.align	2
 783              		.global	FLASH_Erase_Sector
 784              		.thumb
 785              		.thumb_func
 787              	FLASH_Erase_Sector:
 788              	.LFB121:
ARM GAS  /tmp/ccnAeKgf.s 			page 38


 972:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 789              		.loc 1 972 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794              	.LVL77:
 795 0000 10B4     		push	{r4}
 796              	.LCFI10:
 797              		.cfi_def_cfa_offset 4
 798              		.cfi_offset 4, -4
 799              	.LVL78:
 979:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 800              		.loc 1 979 0
 801 0002 31B1     		cbz	r1, .L82
 983:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 802              		.loc 1 983 0
 803 0004 0129     		cmp	r1, #1
 804 0006 06D0     		beq	.L83
 987:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 805              		.loc 1 987 0
 806 0008 0229     		cmp	r1, #2
 807 000a 07D1     		bne	.L84
 989:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 808              		.loc 1 989 0
 809 000c 4FF40074 		mov	r4, #512
 810 0010 06E0     		b	.L81
 811              	.L82:
 981:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 812              		.loc 1 981 0
 813 0012 0024     		movs	r4, #0
 814 0014 04E0     		b	.L81
 815              	.L83:
 985:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 816              		.loc 1 985 0
 817 0016 4FF48074 		mov	r4, #256
 818 001a 01E0     		b	.L81
 819              	.L84:
 993:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 820              		.loc 1 993 0
 821 001c 4FF44074 		mov	r4, #768
 822              	.L81:
 823              	.LVL79:
 997:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 824              		.loc 1 997 0
 825 0020 0F4B     		ldr	r3, .L86
 826 0022 1969     		ldr	r1, [r3, #16]
 827              	.LVL80:
 828 0024 21F44071 		bic	r1, r1, #768
 829 0028 1961     		str	r1, [r3, #16]
 998:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR &= SECTOR_MASK;
 830              		.loc 1 998 0
 831 002a 1A69     		ldr	r2, [r3, #16]
 832 002c 2243     		orrs	r2, r2, r4
 833 002e 1A61     		str	r2, [r3, #16]
 999:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 834              		.loc 1 999 0
ARM GAS  /tmp/ccnAeKgf.s 			page 39


 835 0030 1A69     		ldr	r2, [r3, #16]
 836 0032 22F0F802 		bic	r2, r2, #248
 837 0036 1A61     		str	r2, [r3, #16]
 838              	.LVL81:
 839              	.LBB6:
 840              	.LBB7:
 841              		.file 2 "../Drivers/CMSIS/Include/core_cmInstr.h"
   1:../Drivers/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @version  V3.20
   5:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @date     05. March 2013
   6:../Drivers/CMSIS/Include/core_cmInstr.h ****  *
   7:../Drivers/CMSIS/Include/core_cmInstr.h ****  * @note
   8:../Drivers/CMSIS/Include/core_cmInstr.h ****  *
   9:../Drivers/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:../Drivers/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  12:../Drivers/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:../Drivers/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:../Drivers/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:../Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:../Drivers/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:../Drivers/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../Drivers/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:../Drivers/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:../Drivers/CMSIS/Include/core_cmInstr.h ****    *
  24:../Drivers/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../Drivers/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../Drivers/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../Drivers/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../Drivers/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../Drivers/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../Drivers/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../Drivers/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../Drivers/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../Drivers/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../Drivers/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../Drivers/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  37:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  38:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  41:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  42:../Drivers/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:../Drivers/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:../Drivers/CMSIS/Include/core_cmInstr.h ****   @{
  46:../Drivers/CMSIS/Include/core_cmInstr.h **** */
  47:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  48:../Drivers/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../Drivers/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccnAeKgf.s 			page 40


  51:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:../Drivers/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
  54:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  55:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  56:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  58:../Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  60:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  62:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  63:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  65:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:../Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  68:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  70:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  71:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  73:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:../Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  76:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  78:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  79:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  81:../Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  83:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  85:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  86:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  88:../Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:../Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:../Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
  92:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  94:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  95:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:../Drivers/CMSIS/Include/core_cmInstr.h **** 
  97:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:../Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 100:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 102:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 103:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 105:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:../Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/ccnAeKgf.s 			page 41


 108:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 110:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 111:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 113:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 115:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 117:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 118:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 119:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 120:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 121:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 123:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 125:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 128:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 131:../Drivers/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 132:../Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 133:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 134:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 135:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 136:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 138:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 140:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 142:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 143:../Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 146:../Drivers/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 147:../Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 148:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 149:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 150:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 151:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 152:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 154:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 156:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 159:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 160:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 161:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 162:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 163:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 164:../Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccnAeKgf.s 			page 42


 165:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:../Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 168:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:../Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 171:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 173:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 174:../Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 176:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 178:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 180:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 182:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 183:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 184:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 185:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 186:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 188:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 190:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 193:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 195:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 196:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 198:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 200:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 203:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 205:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 206:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 208:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 210:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 213:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 215:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 216:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 218:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 220:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 221:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccnAeKgf.s 			page 43


 222:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 223:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 224:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 225:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 227:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 228:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 230:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 232:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 233:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 235:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 236:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 237:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 239:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 240:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 242:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 244:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 245:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 247:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 248:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 249:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 251:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 252:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 254:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 256:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 257:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 258:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 259:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 260:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 261:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 262:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 263:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 264:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 267:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 268:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 269:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 270:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 271:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 273:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 274:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 275:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 278:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/ccnAeKgf.s 			page 44


 279:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 280:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 281:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 282:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 283:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 284:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 286:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 288:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 289:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 290:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 291:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 293:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 294:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 295:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:../Drivers/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 298:../Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 299:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 300:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 301:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:../Drivers/CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 303:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 304:../Drivers/CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 306:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 307:../Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:../Drivers/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 309:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 310:../Drivers/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:../Drivers/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:../Drivers/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:../Drivers/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 317:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 320:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 321:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 322:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 323:../Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 325:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 327:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 328:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 329:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 330:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 331:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 333:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:../Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 335:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/ccnAeKgf.s 			page 45


 336:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 338:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 339:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 340:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 341:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 342:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 343:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 344:../Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:../Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 347:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 349:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 350:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 351:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 352:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 353:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 354:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 355:../Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 357:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 359:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 360:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 361:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 362:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 363:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 365:../Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:../Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:../Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 368:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 369:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 371:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 372:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 373:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 374:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 375:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 377:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:../Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 380:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 382:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 383:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 384:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 385:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 386:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 387:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 388:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 389:../Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 390:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 391:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 392:../Drivers/CMSIS/Include/core_cmInstr.h **** {
ARM GAS  /tmp/ccnAeKgf.s 			page 46


 393:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 394:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 395:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 396:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 397:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 398:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 399:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 400:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 401:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 402:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 403:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 404:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
 405:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 406:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 407:../Drivers/CMSIS/Include/core_cmInstr.h ****   return __builtin_bswap32(value);
 408:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 409:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 410:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 411:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 412:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 413:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 414:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 415:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 416:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 417:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 418:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 419:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 420:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 421:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 422:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 423:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 424:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 425:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 426:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 427:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 428:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 429:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 430:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 431:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 432:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 433:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 434:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 435:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 436:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 437:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 438:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 439:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 440:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t __REVSH(int32_t value)
 441:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 442:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 443:../Drivers/CMSIS/Include/core_cmInstr.h ****   return (short)__builtin_bswap16(value);
 444:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 445:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 446:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 447:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 448:../Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 449:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
ARM GAS  /tmp/ccnAeKgf.s 			page 47


 450:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 451:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 452:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 453:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 454:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 455:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 456:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 457:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 458:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 459:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 460:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 461:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 462:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 463:../Drivers/CMSIS/Include/core_cmInstr.h ****   return (op1 >> op2) | (op1 << (32 - op2)); 
 464:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 465:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 466:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 467:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 468:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 469:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 470:../Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 471:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 472:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 473:../Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 474:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 475:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 476:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 477:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 478:../Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 479:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 480:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 481:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 482:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 483:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 484:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 485:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 486:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 487:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 488:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 489:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 490:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 491:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 842              		.loc 2 491 0
 843 0038 F822     		movs	r2, #248
 844              		.syntax unified
 845              	@ 491 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 846 003a 92FAA2F2 		rbit r2, r2
 847              	@ 0 "" 2
 848              	.LVL82:
 849              		.thumb
 850              		.syntax unified
 851              	.LBE7:
 852              	.LBE6:
 853              	.LBB8:
 854              	.LBB9:
 492:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 493:../Drivers/CMSIS/Include/core_cmInstr.h **** }
ARM GAS  /tmp/ccnAeKgf.s 			page 48


 494:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 495:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 496:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 497:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 498:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 499:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 500:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 501:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 502:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 503:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)
 504:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 505:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 506:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 507:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 508:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 509:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 510:../Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 511:../Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 512:../Drivers/CMSIS/Include/core_cmInstr.h ****     */
 513:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 514:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 515:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 516:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 517:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 518:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 519:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 520:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 521:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 522:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 523:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 524:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 525:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 526:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)
 527:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 528:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 529:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 530:../Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 531:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 532:../Drivers/CMSIS/Include/core_cmInstr.h **** #else
 533:../Drivers/CMSIS/Include/core_cmInstr.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 534:../Drivers/CMSIS/Include/core_cmInstr.h ****        accepted by assembler. So has to use following less efficient pattern.
 535:../Drivers/CMSIS/Include/core_cmInstr.h ****     */
 536:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 537:../Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 538:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 539:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 540:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 541:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 542:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 543:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 544:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 545:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 546:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 547:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 548:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 549:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
 550:../Drivers/CMSIS/Include/core_cmInstr.h **** {
ARM GAS  /tmp/ccnAeKgf.s 			page 49


 551:../Drivers/CMSIS/Include/core_cmInstr.h ****     uint32_t result;
 552:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 553:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 554:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 555:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 556:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 557:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 558:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 559:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 560:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 561:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 562:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 563:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 564:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 565:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 566:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 567:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_
 568:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 569:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 570:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 571:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 572:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 573:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 574:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 575:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 576:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 577:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 578:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 579:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 580:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 581:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 582:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 583:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 584:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 585:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint1
 586:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 587:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 588:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 589:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 590:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 591:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 592:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 593:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 594:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 595:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 596:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 597:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 598:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 599:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 600:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 601:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 602:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 603:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint3
 604:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 605:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
 606:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 607:../Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
ARM GAS  /tmp/ccnAeKgf.s 			page 50


 608:../Drivers/CMSIS/Include/core_cmInstr.h ****    return(result);
 609:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 610:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 611:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 612:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 613:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 614:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 615:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 616:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 617:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __CLREX(void)
 618:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 619:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clrex" ::: "memory");
 620:../Drivers/CMSIS/Include/core_cmInstr.h **** }
 621:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 622:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 623:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 624:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 625:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 626:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 627:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 628:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 629:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 630:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 631:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT(ARG1,ARG2) \
 632:../Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 633:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 634:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 635:../Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 636:../Drivers/CMSIS/Include/core_cmInstr.h ****  })
 637:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 638:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 639:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 640:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 641:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 642:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 643:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 644:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 645:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 646:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 647:../Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT(ARG1,ARG2) \
 648:../Drivers/CMSIS/Include/core_cmInstr.h **** ({                          \
 649:../Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 650:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 651:../Drivers/CMSIS/Include/core_cmInstr.h ****   __RES; \
 652:../Drivers/CMSIS/Include/core_cmInstr.h ****  })
 653:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 654:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 655:../Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 656:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 657:../Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 658:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 659:../Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 660:../Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 661:../Drivers/CMSIS/Include/core_cmInstr.h ****  */
 662:../Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
 663:../Drivers/CMSIS/Include/core_cmInstr.h **** {
 664:../Drivers/CMSIS/Include/core_cmInstr.h ****    uint32_t result;
ARM GAS  /tmp/ccnAeKgf.s 			page 51


 665:../Drivers/CMSIS/Include/core_cmInstr.h **** 
 666:../Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 855              		.loc 2 666 0
 856              		.syntax unified
 857              	@ 666 "../Drivers/CMSIS/Include/core_cmInstr.h" 1
 858 003e B2FA82F2 		clz r2, r2
 859              	@ 0 "" 2
 860              		.thumb
 861              		.syntax unified
 862              	.LBE9:
 863              	.LBE8:
1000:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 864              		.loc 1 1000 0
 865 0042 D2B2     		uxtb	r2, r2
 866 0044 9040     		lsls	r0, r0, r2
 867              	.LVL83:
 868 0046 40F00200 		orr	r0, r0, #2
 869 004a 1A69     		ldr	r2, [r3, #16]
 870 004c 1043     		orrs	r0, r0, r2
 871 004e 1861     		str	r0, [r3, #16]
1001:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 872              		.loc 1 1001 0
 873 0050 1A69     		ldr	r2, [r3, #16]
 874 0052 42F48032 		orr	r2, r2, #65536
 875 0056 1A61     		str	r2, [r3, #16]
1002:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 876              		.loc 1 1002 0
 877 0058 5DF8044B 		ldr	r4, [sp], #4
 878              	.LCFI11:
 879              		.cfi_restore 4
 880              		.cfi_def_cfa_offset 0
 881              	.LVL84:
 882 005c 7047     		bx	lr
 883              	.L87:
 884 005e 00BF     		.align	2
 885              	.L86:
 886 0060 003C0240 		.word	1073888256
 887              		.cfi_endproc
 888              	.LFE121:
 890              		.section	.text.HAL_FLASHEx_Erase,"ax",%progbits
 891              		.align	2
 892              		.global	HAL_FLASHEx_Erase
 893              		.thumb
 894              		.thumb_func
 896              	HAL_FLASHEx_Erase:
 897              	.LFB112:
 160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 898              		.loc 1 160 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902              	.LVL85:
 165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 903              		.loc 1 165 0
 904 0000 244B     		ldr	r3, .L98
 905 0002 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 906 0004 012B     		cmp	r3, #1
ARM GAS  /tmp/ccnAeKgf.s 			page 52


 907 0006 43D0     		beq	.L95
 160:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 908              		.loc 1 160 0 discriminator 2
 909 0008 70B5     		push	{r4, r5, r6, lr}
 910              	.LCFI12:
 911              		.cfi_def_cfa_offset 16
 912              		.cfi_offset 4, -16
 913              		.cfi_offset 5, -12
 914              		.cfi_offset 6, -8
 915              		.cfi_offset 14, -4
 916 000a 0E46     		mov	r6, r1
 917 000c 0446     		mov	r4, r0
 165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 918              		.loc 1 165 0 discriminator 2
 919 000e 0122     		movs	r2, #1
 920 0010 204B     		ldr	r3, .L98
 921 0012 1A76     		strb	r2, [r3, #24]
 171:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 922              		.loc 1 171 0 discriminator 2
 923 0014 4CF25030 		movw	r0, #50000
 924              	.LVL86:
 925 0018 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 926              	.LVL87:
 173:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 927              		.loc 1 173 0 discriminator 2
 928 001c 0246     		mov	r2, r0
 929 001e 0028     		cmp	r0, #0
 930 0020 31D1     		bne	.L90
 176:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 931              		.loc 1 176 0
 932 0022 4FF0FF33 		mov	r3, #-1
 933 0026 3360     		str	r3, [r6]
 178:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 934              		.loc 1 178 0
 935 0028 2368     		ldr	r3, [r4]
 936 002a 012B     		cmp	r3, #1
 937 002c 0ED1     		bne	.L91
 181:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 938              		.loc 1 181 0
 939 002e 6168     		ldr	r1, [r4, #4]
 940 0030 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 941              	.LVL88:
 942 0032 FFF7FEFF 		bl	FLASH_MassErase
 943              	.LVL89:
 184:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 944              		.loc 1 184 0
 945 0036 4CF25030 		movw	r0, #50000
 946 003a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 947              	.LVL90:
 948 003e 0246     		mov	r2, r0
 949              	.LVL91:
 187:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 950              		.loc 1 187 0
 951 0040 1549     		ldr	r1, .L98+4
 952 0042 0B69     		ldr	r3, [r1, #16]
 953 0044 23F00403 		bic	r3, r3, #4
 954 0048 0B61     		str	r3, [r1, #16]
ARM GAS  /tmp/ccnAeKgf.s 			page 53


 955 004a 1CE0     		b	.L90
 956              	.LVL92:
 957              	.L91:
 195:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       {
 958              		.loc 1 195 0
 959 004c A568     		ldr	r5, [r4, #8]
 960              	.LVL93:
 961 004e 15E0     		b	.L92
 962              	.LVL94:
 963              	.L94:
 197:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 964              		.loc 1 197 0
 965 0050 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 966 0052 2846     		mov	r0, r5
 967 0054 FFF7FEFF 		bl	FLASH_Erase_Sector
 968              	.LVL95:
 200:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         
 969              		.loc 1 200 0
 970 0058 4CF25030 		movw	r0, #50000
 971 005c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 972              	.LVL96:
 203:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         FLASH->CR &= SECTOR_MASK; 
 973              		.loc 1 203 0
 974 0060 0D4B     		ldr	r3, .L98+4
 975 0062 1A69     		ldr	r2, [r3, #16]
 976 0064 22F00202 		bic	r2, r2, #2
 977 0068 1A61     		str	r2, [r3, #16]
 204:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 978              		.loc 1 204 0
 979 006a 1A69     		ldr	r2, [r3, #16]
 980 006c 22F0F802 		bic	r2, r2, #248
 981 0070 1A61     		str	r2, [r3, #16]
 206:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         {
 982              		.loc 1 206 0
 983 0072 0246     		mov	r2, r0
 984 0074 08B1     		cbz	r0, .L93
 209:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           break;
 985              		.loc 1 209 0
 986 0076 3560     		str	r5, [r6]
 210:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         }
 987              		.loc 1 210 0
 988 0078 05E0     		b	.L90
 989              	.L93:
 195:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       {
 990              		.loc 1 195 0 discriminator 2
 991 007a 0135     		adds	r5, r5, #1
 992              	.LVL97:
 993              	.L92:
 195:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       {
 994              		.loc 1 195 0 is_stmt 0 discriminator 1
 995 007c E168     		ldr	r1, [r4, #12]
 996 007e A368     		ldr	r3, [r4, #8]
 997 0080 0B44     		add	r3, r3, r1
 998 0082 9D42     		cmp	r5, r3
 999 0084 E4D3     		bcc	.L94
 1000              	.LVL98:
 1001              	.L90:
ARM GAS  /tmp/ccnAeKgf.s 			page 54


 217:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 1002              		.loc 1 217 0 is_stmt 1
 1003 0086 0021     		movs	r1, #0
 1004 0088 024B     		ldr	r3, .L98
 1005 008a 1976     		strb	r1, [r3, #24]
 219:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1006              		.loc 1 219 0
 1007 008c 1046     		mov	r0, r2
 1008 008e 70BD     		pop	{r4, r5, r6, pc}
 1009              	.LVL99:
 1010              	.L95:
 1011              	.LCFI13:
 1012              		.cfi_def_cfa_offset 0
 1013              		.cfi_restore 4
 1014              		.cfi_restore 5
 1015              		.cfi_restore 6
 1016              		.cfi_restore 14
 165:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 1017              		.loc 1 165 0
 1018 0090 0220     		movs	r0, #2
 1019              	.LVL100:
 1020 0092 7047     		bx	lr
 1021              	.L99:
 1022              		.align	2
 1023              	.L98:
 1024 0094 00000000 		.word	pFlash
 1025 0098 003C0240 		.word	1073888256
 1026              		.cfi_endproc
 1027              	.LFE112:
 1029              		.section	.text.HAL_FLASHEx_Erase_IT,"ax",%progbits
 1030              		.align	2
 1031              		.global	HAL_FLASHEx_Erase_IT
 1032              		.thumb
 1033              		.thumb_func
 1035              	HAL_FLASHEx_Erase_IT:
 1036              	.LFB113:
 230:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1037              		.loc 1 230 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              	.LVL101:
 1042 0000 08B5     		push	{r3, lr}
 1043              	.LCFI14:
 1044              		.cfi_def_cfa_offset 8
 1045              		.cfi_offset 3, -8
 1046              		.cfi_offset 14, -4
 1047              	.LVL102:
 234:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 1048              		.loc 1 234 0
 1049 0002 184B     		ldr	r3, .L105
 1050 0004 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1051 0006 012B     		cmp	r3, #1
 1052 0008 29D0     		beq	.L103
 234:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 1053              		.loc 1 234 0 is_stmt 0 discriminator 2
 1054 000a 0122     		movs	r2, #1
ARM GAS  /tmp/ccnAeKgf.s 			page 55


 1055 000c 154B     		ldr	r3, .L105
 1056 000e 1A76     		strb	r2, [r3, #24]
 240:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 1057              		.loc 1 240 0 is_stmt 1 discriminator 2
 1058 0010 154B     		ldr	r3, .L105+4
 1059 0012 1A69     		ldr	r2, [r3, #16]
 1060 0014 42F08072 		orr	r2, r2, #16777216
 1061 0018 1A61     		str	r2, [r3, #16]
 243:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 1062              		.loc 1 243 0 discriminator 2
 1063 001a 1A69     		ldr	r2, [r3, #16]
 1064 001c 42F00072 		orr	r2, r2, #33554432
 1065 0020 1A61     		str	r2, [r3, #16]
 246:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
 1066              		.loc 1 246 0 discriminator 2
 1067 0022 F322     		movs	r2, #243
 1068 0024 DA60     		str	r2, [r3, #12]
 249:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 1069              		.loc 1 249 0 discriminator 2
 1070 0026 0368     		ldr	r3, [r0]
 1071 0028 012B     		cmp	r3, #1
 1072 002a 0AD1     		bne	.L102
 252:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.Bank = pEraseInit->Banks;
 1073              		.loc 1 252 0
 1074 002c 0D4B     		ldr	r3, .L105
 1075 002e 0222     		movs	r2, #2
 1076 0030 1A70     		strb	r2, [r3]
 253:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 1077              		.loc 1 253 0
 1078 0032 4268     		ldr	r2, [r0, #4]
 1079 0034 1A61     		str	r2, [r3, #16]
 254:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 1080              		.loc 1 254 0
 1081 0036 4168     		ldr	r1, [r0, #4]
 1082 0038 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 1083              	.LVL103:
 1084 003a FFF7FEFF 		bl	FLASH_MassErase
 1085              	.LVL104:
 272:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1086              		.loc 1 272 0
 1087 003e 0020     		movs	r0, #0
 1088 0040 08BD     		pop	{r3, pc}
 1089              	.LVL105:
 1090              	.L102:
 263:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 1091              		.loc 1 263 0
 1092 0042 084B     		ldr	r3, .L105
 1093 0044 0122     		movs	r2, #1
 1094 0046 1A70     		strb	r2, [r3]
 264:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.Sector = pEraseInit->Sector;
 1095              		.loc 1 264 0
 1096 0048 C268     		ldr	r2, [r0, #12]
 1097 004a 5A60     		str	r2, [r3, #4]
 265:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 1098              		.loc 1 265 0
 1099 004c 8268     		ldr	r2, [r0, #8]
 1100 004e DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccnAeKgf.s 			page 56


 266:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 1101              		.loc 1 266 0
 1102 0050 017C     		ldrb	r1, [r0, #16]	@ zero_extendqisi2
 1103 0052 1972     		strb	r1, [r3, #8]
 269:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 1104              		.loc 1 269 0
 1105 0054 8068     		ldr	r0, [r0, #8]
 1106              	.LVL106:
 1107 0056 FFF7FEFF 		bl	FLASH_Erase_Sector
 1108              	.LVL107:
 272:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1109              		.loc 1 272 0
 1110 005a 0020     		movs	r0, #0
 1111 005c 08BD     		pop	{r3, pc}
 1112              	.LVL108:
 1113              	.L103:
 234:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 1114              		.loc 1 234 0
 1115 005e 0220     		movs	r0, #2
 1116              	.LVL109:
 273:../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 1117              		.loc 1 273 0
 1118 0060 08BD     		pop	{r3, pc}
 1119              	.L106:
 1120 0062 00BF     		.align	2
 1121              	.L105:
 1122 0064 00000000 		.word	pFlash
 1123 0068 003C0240 		.word	1073888256
 1124              		.cfi_endproc
 1125              	.LFE113:
 1127              		.text
 1128              	.Letext0:
 1129              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1130              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1131              		.file 5 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1132              		.file 6 "../Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1133              		.file 7 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1134              		.file 8 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_flash.h"
 1135              		.file 9 "../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_flash_ex.h"
 1136              		.file 10 "../Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccnAeKgf.s 			page 57


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hal_flash_ex.c
     /tmp/ccnAeKgf.s:22     .text.FLASH_MassErase:00000000 $t
     /tmp/ccnAeKgf.s:26     .text.FLASH_MassErase:00000000 FLASH_MassErase
     /tmp/ccnAeKgf.s:55     .text.FLASH_MassErase:00000020 $d
     /tmp/ccnAeKgf.s:60     .text.FLASH_OB_BOR_LevelConfig:00000000 $t
     /tmp/ccnAeKgf.s:64     .text.FLASH_OB_BOR_LevelConfig:00000000 FLASH_OB_BOR_LevelConfig
     /tmp/ccnAeKgf.s:88     .text.FLASH_OB_BOR_LevelConfig:00000014 $d
     /tmp/ccnAeKgf.s:93     .text.FLASH_OB_GetUser:00000000 $t
     /tmp/ccnAeKgf.s:97     .text.FLASH_OB_GetUser:00000000 FLASH_OB_GetUser
     /tmp/ccnAeKgf.s:113    .text.FLASH_OB_GetUser:0000000c $d
     /tmp/ccnAeKgf.s:118    .text.FLASH_OB_GetWRP:00000000 $t
     /tmp/ccnAeKgf.s:122    .text.FLASH_OB_GetWRP:00000000 FLASH_OB_GetWRP
     /tmp/ccnAeKgf.s:138    .text.FLASH_OB_GetWRP:00000008 $d
     /tmp/ccnAeKgf.s:143    .text.FLASH_OB_GetRDP:00000000 $t
     /tmp/ccnAeKgf.s:147    .text.FLASH_OB_GetRDP:00000000 FLASH_OB_GetRDP
     /tmp/ccnAeKgf.s:173    .text.FLASH_OB_GetRDP:00000014 $d
     /tmp/ccnAeKgf.s:178    .text.FLASH_OB_GetBOR:00000000 $t
     /tmp/ccnAeKgf.s:182    .text.FLASH_OB_GetBOR:00000000 FLASH_OB_GetBOR
     /tmp/ccnAeKgf.s:198    .text.FLASH_OB_GetBOR:0000000c $d
     /tmp/ccnAeKgf.s:203    .text.FLASH_OB_EnableWRP:00000000 $t
     /tmp/ccnAeKgf.s:207    .text.FLASH_OB_EnableWRP:00000000 FLASH_OB_EnableWRP
     /tmp/ccnAeKgf.s:244    .text.FLASH_OB_EnableWRP:00000020 $d
     /tmp/ccnAeKgf.s:249    .text.FLASH_OB_DisableWRP:00000000 $t
     /tmp/ccnAeKgf.s:253    .text.FLASH_OB_DisableWRP:00000000 FLASH_OB_DisableWRP
     /tmp/ccnAeKgf.s:291    .text.FLASH_OB_DisableWRP:00000020 $d
     /tmp/ccnAeKgf.s:296    .text.FLASH_OB_RDP_LevelConfig:00000000 $t
     /tmp/ccnAeKgf.s:300    .text.FLASH_OB_RDP_LevelConfig:00000000 FLASH_OB_RDP_LevelConfig
     /tmp/ccnAeKgf.s:333    .text.FLASH_OB_RDP_LevelConfig:00000018 $d
     /tmp/ccnAeKgf.s:338    .text.FLASH_OB_UserConfig:00000000 $t
     /tmp/ccnAeKgf.s:342    .text.FLASH_OB_UserConfig:00000000 FLASH_OB_UserConfig
     /tmp/ccnAeKgf.s:387    .text.FLASH_OB_UserConfig:00000028 $d
     /tmp/ccnAeKgf.s:392    .text.FLASH_OB_EnablePCROP:00000000 $t
     /tmp/ccnAeKgf.s:396    .text.FLASH_OB_EnablePCROP:00000000 FLASH_OB_EnablePCROP
     /tmp/ccnAeKgf.s:434    .text.FLASH_OB_EnablePCROP:00000020 $d
     /tmp/ccnAeKgf.s:439    .text.FLASH_OB_DisablePCROP:00000000 $t
     /tmp/ccnAeKgf.s:443    .text.FLASH_OB_DisablePCROP:00000000 FLASH_OB_DisablePCROP
     /tmp/ccnAeKgf.s:480    .text.FLASH_OB_DisablePCROP:00000020 $d
     /tmp/ccnAeKgf.s:485    .text.HAL_FLASHEx_OBProgram:00000000 $t
     /tmp/ccnAeKgf.s:490    .text.HAL_FLASHEx_OBProgram:00000000 HAL_FLASHEx_OBProgram
     /tmp/ccnAeKgf.s:595    .text.HAL_FLASHEx_OBProgram:00000078 $d
     /tmp/ccnAeKgf.s:600    .text.HAL_FLASHEx_OBGetConfig:00000000 $t
     /tmp/ccnAeKgf.s:605    .text.HAL_FLASHEx_OBGetConfig:00000000 HAL_FLASHEx_OBGetConfig
     /tmp/ccnAeKgf.s:642    .text.HAL_FLASHEx_AdvOBProgram:00000000 $t
     /tmp/ccnAeKgf.s:647    .text.HAL_FLASHEx_AdvOBProgram:00000000 HAL_FLASHEx_AdvOBProgram
     /tmp/ccnAeKgf.s:693    .text.HAL_FLASHEx_AdvOBGetConfig:00000000 $t
     /tmp/ccnAeKgf.s:698    .text.HAL_FLASHEx_AdvOBGetConfig:00000000 HAL_FLASHEx_AdvOBGetConfig
     /tmp/ccnAeKgf.s:714    .text.HAL_FLASHEx_AdvOBGetConfig:00000008 $d
     /tmp/ccnAeKgf.s:719    .text.HAL_FLASHEx_OB_SelectPCROP:00000000 $t
     /tmp/ccnAeKgf.s:724    .text.HAL_FLASHEx_OB_SelectPCROP:00000000 HAL_FLASHEx_OB_SelectPCROP
     /tmp/ccnAeKgf.s:746    .text.HAL_FLASHEx_OB_SelectPCROP:00000010 $d
     /tmp/ccnAeKgf.s:751    .text.HAL_FLASHEx_OB_DeSelectPCROP:00000000 $t
     /tmp/ccnAeKgf.s:756    .text.HAL_FLASHEx_OB_DeSelectPCROP:00000000 HAL_FLASHEx_OB_DeSelectPCROP
     /tmp/ccnAeKgf.s:777    .text.HAL_FLASHEx_OB_DeSelectPCROP:00000010 $d
     /tmp/ccnAeKgf.s:782    .text.FLASH_Erase_Sector:00000000 $t
     /tmp/ccnAeKgf.s:787    .text.FLASH_Erase_Sector:00000000 FLASH_Erase_Sector
     /tmp/ccnAeKgf.s:886    .text.FLASH_Erase_Sector:00000060 $d
ARM GAS  /tmp/ccnAeKgf.s 			page 58


     /tmp/ccnAeKgf.s:891    .text.HAL_FLASHEx_Erase:00000000 $t
     /tmp/ccnAeKgf.s:896    .text.HAL_FLASHEx_Erase:00000000 HAL_FLASHEx_Erase
     /tmp/ccnAeKgf.s:1024   .text.HAL_FLASHEx_Erase:00000094 $d
     /tmp/ccnAeKgf.s:1030   .text.HAL_FLASHEx_Erase_IT:00000000 $t
     /tmp/ccnAeKgf.s:1035   .text.HAL_FLASHEx_Erase_IT:00000000 HAL_FLASHEx_Erase_IT
     /tmp/ccnAeKgf.s:1122   .text.HAL_FLASHEx_Erase_IT:00000064 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
FLASH_WaitForLastOperation
pFlash
